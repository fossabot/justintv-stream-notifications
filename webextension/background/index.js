/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 55);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Concurrency utils for events.
 *
 * @author Martin Giger
 * @license MPL-2.0
 */

const when = (target, event) => {
    if (target instanceof EventTarget) {
        return new Promise(resolve => {
            target.addEventListener(event, resolve, {
                once: true,
                capture: false
            });
        });
    } else if ("on" + event[0].toUpperCase() + event.substr(1) in target) {
        return new Promise(resolve => {
            const property = "on" + event[0].toUpperCase() + event.substr(1),
                  listener = e => {
                target[property].removeListener(listener);
                resolve(e);
            };
            target[property].addListener(listener);
        });
    }
    return Promise.resolve();
};
/* harmony export (immutable) */ __webpack_exports__["d"] = when;


const emit = (target, event, ...detail) => {
    if (detail.length) {
        if (detail.length == 1) {
            detail = detail[0];
        }
        target.dispatchEvent(new CustomEvent(event, { detail }));
    } else {
        target.dispatchEvent(new Event(event));
    }
};
/* harmony export (immutable) */ __webpack_exports__["a"] = emit;


/**
 * So this is a magic function. It makes things work by being kind of a reversed
 * once. But let me explain: this function will only execute the function if it
 * is the most recently registered one. The first argument has to be an unique
 * id, which is used to check if the callback is the most recent one.
 * This is used to avoid race conditions with DB callbacks when channels are
 * deleted.
 *
 * @param {*} newId - An id for this new callback.
 * @param {Function} fn - Needs to be the same callback to work.
 * @returns {Function} Function that is "debounced".
 */
const invokeOnce = (newId, fn) => {
    fn.currentId = newId;
    return function (...args) {
        if (fn.currentId == newId) {
            delete fn.currentId;
            fn(...args);
        }
    };
};
/* harmony export (immutable) */ __webpack_exports__["c"] = invokeOnce;


/**
 * Filter an array based on a condition that is returned as promise.
 * Like Array.prototype.filter, just that it takes a promise from the callback
 * instead of a boolean.
 *
 * @param {Array} array - Array to filter.
 * @param {Function} callback - Callback to filter on. Should return a promise.
 * @returns {Array} Array filtered based on the result of the callback.
 */
const filterAsync = async (array, callback) => {
    const predicates = await Promise.all(array.map(callback));
    return array.filter((a, i) => predicates[i]);
};
/* harmony export (immutable) */ __webpack_exports__["b"] = filterAsync;


/**
 * Pipe an event from one target to another.
 *
 * @param {module:event-target.EventTarget} source - Object emitting the event.
 * @param {string} event - Event to pipe through.
 * @param {module:event-target.EventTarget} target - Target to pipe to.
 * @returns {undefined}
 */
const pipe = (source, event, target) => {
    source.addEventListener(event, e => target.dispatchEvent(e), { passive: true });
};
/* harmony export (immutable) */ __webpack_exports__["e"] = pipe;


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__live_state__ = __webpack_require__(6);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Channel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return User; });
/**
 * Channel and User Objects.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module channel/core
 */



const ITEM_ARGS = ["login", "type", "id", "live"];

/**
 * A generic thing.
 * @class
 */
class Item {
    /**
     * @param {string} login - Unique login name.
     * @param {string} type - Provider name.
     * @param {number} [id] - Extension internal ID if already known.
     */
    constructor(login, type, id) {
        this._uname = "";

        this._login = login;
        this._type = type;
        /**
         * An object with user avatars, by their size in pixels as property name.
         * @type {Object.<(string|number)>}
         */
        this.image = {};
        if (id) {
            this.id = id;
        }
    }
    /**
     * The human-readable name of the user.
     *
     * @type {string}
     * @default Value of {@link module:channel/core~Item#login}
     */
    get uname() {
        if (this._uname !== "") {
            return this._uname;
        } else {
            return this.login;
        }
    }
    set uname(val) {
        if (val) {
            this._uname = val;
        }
    }
    /**
     * The login name of the user, this should be a unique string or number within
     * the provider.
     *
     * @type {string|number}
     * @readonly
     */
    get login() {
        return this._login;
    }
    /**
     * The provider type this user is from.
     *
     * @type {string}
     * @readonly
     */
    get type() {
        return this._type;
    }
    //methods
    /**
     * Retuns the URL to the best image for displaying at the specified size.
     *
     * @param {string|number} size - The size the image will be displayed in in pixels.
     * @returns {string} An URL to an image.
     */
    getBestImageForSize(size) {
        size = Math.round(parseInt(size, 10) * window.devicePixelRatio);
        // shortcut if there's an image with the size demanded
        if (this.image.hasOwnProperty(size.toString())) {
            return this.image[size];
        }

        // search next biggest image
        let index = Number.MAX_VALUE,
            biggest = 0;
        Object.keys(this.image).forEach(s => {
            s = parseInt(s, 10);
            if (s > size && s < index) {
                index = s;
            }
            if (s > biggest) {
                biggest = s;
            }
        });

        if (index > biggest) {
            index = biggest;
        }

        return this.image[index];
    }

    /**
     * @returns {string} The human-readable name of the user with the first
     *          letter capitalized.
     */
    toString() {
        return this.uname.charAt(0).toUpperCase() + this.uname.slice(1);
    }
    /**
     * Serialized version of {@link module:channel/core~Item}
     *
     * @typedef {Object} SerializedItem
     * @property {string} uname
     * @property {string} login
     * @property {Object.<(string|number),string>} image
     * @property {string} type
     * @property {number} [id]
     */

    /**
     * Serialize the item into a normal object.
     *
     * @returns {module:channel/core~SerializedItem} A JSON serializable version
     *          of this item.
     */
    serialize() {
        const obj = {
            uname: this.uname,
            login: this.login,
            image: this.image,
            type: this.type
        };
        if (this.id) {
            obj.id = this.id;
        }
        return obj;
    }
}

/**
 * A generic user.
 *
 * @extends module:channel/core~Item
 */
class User extends Item {
    /**
     * @param {module:channel/core~SerializedUser} properties - Serialized object
     *        to turn into a user.
     * @returns {module:channel/core.User} User based on the serialized object.
     */
    static deserialize(properties) {
        const props = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_underscore__["omit"])(properties, ITEM_ARGS);
        props._uname = properties.uname;
        return Object.assign(new User(...ITEM_ARGS.map(a => properties[a])), props);
    }

    /**
     * @param {string} login - Login of the user.
     * @param {string} type - Type/Provider of the user.
     * @param {number} [id] - ID of the user.
     */
    constructor(login, type, id) {
        super(login, type, id);

        /**
         * The favorite channels of this user as an array of logins.
         * @type {Array.<string>}
         */
        this.favorites = [];
    }
    /**
     * Serialized version of {@link module:channel/core.User}.
     *
     * @typedef {module:channel/core~SerializedItem} SerializedUser
     * @property {Array.<string>} favorites
     */
    /**
     * Serialize the user into a normal object.
     *
     * @returns {module:channel/core~SerializedUser} A JSON serializable version
     *          of this user.
     */
    serialize() {
        return Object.assign(super.serialize(), {
            favorites: this.favorites
        });
    }
}

/**
 * A generic Channel object.
 *
 * @extends module:channel/core~Item
 */
class Channel extends Item {
    /**
     * @param {module:channel/core~SerializedChannel} properties - Serialzed object
     *        to deserialize into a channel.
     * @returns {module:channel/core.Channel} Deserialized channel based on the
     *          object.
     */
    static deserialize(properties) {
        const props = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_underscore__["omit"])(properties, ITEM_ARGS);
        props._uname = properties.uname;
        return Object.assign(new Channel(...ITEM_ARGS.map(a => properties[a])), props);
    }

    /**
     * The title of the live broadcast.
     *
     * @type {string}
     * @default ''
     */

    /**
     * The number of viewers of the live broadcast, -1 if unknown.
     *
     * @type {number}
     * @default -1
     */

    /**
     * Thumbnail of the live broadcast. Typically displayed at a width of 320px.
     *
     * @type {string}
     * @default ''
     */

    /**
     * A URL pointing to a page listing past broadcasts. Opened when clicked on the
     * channel while offline.
     *
     * @type {string}
     * @default ''
     */

    /**
     * A URL to a page containing only the chat for a broadcast.
     *
     * @type {string}
     * @default ''
     */

    /**
     * A UNIX timestamp, automatically set by the ChannelList.
     *
     * @type {number}
     * @readonly
     * @default Date.now()
     */

    /**
     * The category of the live broadcast if known.
     *
     * @type {string}
     * @default ''
     */

    /**
     * If the channel's content is rated mature. Only true if the content rating
     * is known and it is for mature audiences.
     *
     * @type {boolean}
     * @default false
     */


    /**
     * @param {string} login - Login of the channel.
     * @param {string} type - Type/Provider of the channel.
     * @param {number} [id] - ID of the channel.
     * @param {module:channel/live-state~SerializedLiveState} [state] - Live state
     *        of the channel.
     */
    constructor(login, type, id, state) {
        super(login, type, id);

        /**
         * An array of URLs that will contain a player of the stream. The first one is
         * treated as the main channel page and opened when the user clicks on the
         * stream.
         * @type {Array.<string>}
         */
        this.title = '';
        this.viewers = -1;
        this.thumbnail = '';
        this.archiveUrl = '';
        this.chatUrl = '';
        this.lastModified = 0;
        this.category = '';
        this.mature = false;
        this.url = [];

        this.lastModified = Date.now();
        if (state) {
            this.live = __WEBPACK_IMPORTED_MODULE_1__live_state__["a" /* default */].deserialize(state);
        } else {
            this.live = new __WEBPACK_IMPORTED_MODULE_1__live_state__["a" /* default */]();
        }
    }
    // properties
    /**
     * @type {module:channel/live-state.LiveState}
     * @default null
     */
    get live() {
        return this._live;
    }
    set live(val) {
        if (val instanceof __WEBPACK_IMPORTED_MODULE_1__live_state__["a" /* default */]) {
            this._live = val;
        } else {
            throw new TypeError("Trying to set the live state to something that isn't a LiveState");
        }
    }
    /**
     * Serialized version of {@link module:channel/core.Channel}.
     *
     * @typedef {module:channel/core~SerializedItem} SerializedChannel
     * @property {string} title
     * @property {number} viewers
     * @property {string} thumbnail
     * @property {Array.<string>} url
     * @property {string} archiveUrl
     * @property {string} chatUrl
     * @property {number} lastModified
     * @property {string} category
     * @property {string} intent
     * @proeprty {boolean} mature
     * @property {module:channel/live-state~SerializedLiveState} live
     */
    /**
     * Serialize the item into a normal object.
     *
     * @returns {module:channel/core~SerializedChannel} A JSON serializable
     *          version of this channel.
     */
    serialize() {
        return Object.assign(super.serialize(), {
            title: this.title,
            viewers: this.viewers,
            thumbnail: this.thumbnail,
            url: this.url,
            archiveUrl: this.archiveUrl,
            chatUrl: this.chatUrl,
            lastModified: this.lastModified,
            category: this.category,
            mature: this.mature,
            live: this.live.serialize()
        });
    }
}



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sdk__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_event_target_shim__);




//TODO move to storage.local & options_ui

class Preferences extends __WEBPACK_IMPORTED_MODULE_2_event_target_shim___default.a {
    constructor() {
        super();
        __WEBPACK_IMPORTED_MODULE_0__sdk__["a" /* default */].addEventListener("message", ({ detail: message }) => {
            if (message.target == "pref-change") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["a" /* emit */])(this, "change", message);
            }
        });
    }

    get(pref) {
        if (Array.isArray(pref)) {
            return Promise.all(pref.map(p => this.get(p)));
        } else {
            return __WEBPACK_IMPORTED_MODULE_0__sdk__["a" /* default */].doAction({
                target: "get-pref-" + pref,
                pref
            });
        }
    }

    set(pref, value) {
        return __WEBPACK_IMPORTED_MODULE_0__sdk__["a" /* default */].doAction({
            target: "set-pref-" + pref,
            pref,
            value
        });
    }

    open() {
        __WEBPACK_IMPORTED_MODULE_0__sdk__["a" /* default */].postMessage({
            target: "pref-open"
        });
    }
}

/* harmony default export */ __webpack_exports__["a"] = new Preferences();

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__parental_controls__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__queue_service__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_event_target_shim__);
/* eslint-disable no-unused-vars */
/**
 * A generic provider class
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/generic-provider
 * @requires module:queue/service
 */





const _ = browser.i18n.getMessage,
      methodNotSupported = (type, method) => Promise.reject(type + "." + method + " is not supported"),
      queues = new WeakMap(),
      queueFor = provider => queues.get(provider);

/**
 * @event module:providers/generic-provider.GenericProvider#updateduser
 * @type {module:channel/core.User}
 */
/**
 * @event module:providers/generic-provider.GenericProvider#newchannels
 * @type {Array.<module:channel/core.Channel>}
 */
/**
 * @event module:providers/generic-provider.GenericProvider#updatedchannels
 * @type {Array.<module:channel/core.Channel>|module:channel/core.Channel}
 */

/**
 * @extends external:Error
 */
class ProviderError extends Error {
    constructor(code) {
        let message;
        switch (code) {
            case 1:
                message = "The API did not accept the given request format";break;
            case 2:
                message = "Could not access the requested resource";break;
            case 3:
                message = "Could not find any result for the given username";break;
            default:
                message = "Could not load the requested resource";break;
        }
        super(message);
        this.code = code;
        this.name = "ProviderError";
    }
}

/**
 * @class
 * @extends module:disposable-target.Disposable
 */
class GenericProvider extends __WEBPACK_IMPORTED_MODULE_3_event_target_shim___default.a {
    static get NETWORK_ERROR() {
        return new ProviderError(0);
    }
    static get API_ERROR() {
        return new ProviderError(1);
    }
    static get ACCESS_ERROR() {
        return new ProviderError(2);
    }
    static get NORESULT_ERROR() {
        return new ProviderError(3);
    }
    static getErrorByHTTPCode(code) {
        switch (code) {
            case 404:
            case 410:
            case 415:
            case 422:
                return this.NORESULT_ERROR;
            case 401:
            case 403:
            case 511:
                return this.ACCESS_ERROR;
            case 500:
            case 501:
            case 502:
            case 504:
            case 506:
            case 507:
            case 508:
            case 510:
            case 429:
                return this.API_ERROR;
            default:
                return this.NETWORK_ERROR;
        }
    }

    /**
     * Internal property if the provider can get the favorites of a user.
     *
     * @type {boolean}
     * @protected
     * @default false
     */

    /**
     * Internal property specifying, if the provider can get the favorites
     * of a user based on stored credentials. The credentials checked are
     * for the URLs in the array the
     * {@link module:providers/generic-provider.GenericProvider#authURL}
     * property specifies.
     *
     * @type {boolean}
     * @protected
     * @default false
     */

    /**
     * Internal property specifying, if the provider can get a featured
     * channel on the platform.
     *
     * @type {boolean}
     * @protected
     * @default false
     */

    /**
     * The value of enabled.
     *
     * @type {boolean}
     * @protected
     * @readonly
     * @default true
     */


    /**
     * Array of URLs to search credentials for.
     *
     * @abstract
     * @type {Array.<string>}
     */


    /**
     * Generic base-class for all providers. Implements common patterns and helpers.
     *
     * @constructs
     * @param {string} type - Provider type descriptor.
     */
    constructor(type) {
        super();
        /**
         * The type specified to the constructor.
         *
         * @type {string}
         * @protected
         */
        this._supportsFavorites = false;
        this._supportsCredentials = false;
        this._supportsFeatured = false;
        this._enabled = true;
        this._type = type;

        queues.set(this, __WEBPACK_IMPORTED_MODULE_2__queue_service__["f" /* getServiceForProvider */](this._type));
    }
    /**
     * An instance of the QueueService for this provider.
     *
     * @type {queueservice.QueueService}
     * @protected
     * @readonly
     */
    get _qs() {
        return queueFor(this);
    }
    // For testing.
    _setQs(val) {
        queues.set(this, val);
    }
    /**
     * Indicates if exploring features should hold mature results. Respects
     * parental control settings of the OS.
     *
     * @returns {boolean} Explore features should hold mature results if true.
     * @protected
     * @async
     */
    _mature() {
        return __WEBPACK_IMPORTED_MODULE_0__preferences__["a" /* default */].get("find_mature").then(value => value && !__WEBPACK_IMPORTED_MODULE_1__parental_controls__["a" /* default */].enabled);
    }
    /**
     * If the provider is fully functional and should be enabled. Makes it
     * impossible to add new channels and users and disables the update
     * request queueing. Existing channels will be kept around, and could
     * still be updated. getChannelDetails is also expected to return a
     * channel that at least sets the login.
     *
     * @type {boolean}
     * @readonly
     */
    get enabled() {
        return this._enabled;
    }
    /**
     * The human readable name of this provider, by default looks for a
     * translated string with the id "provider_type" where type is the value of
     * _type.
     *
     * @type {string}
     * @readonly
     */
    get name() {
        return _("provider" + this._type);
    }
    /**
     * @returns {string} Localized name of the provider.
     * @see {@link module:providers/generic-provider.GenericProvider#name}
     */
    toString() {
        return this.name;
    }
    /**
     * Frozen
     *
     * @typedef {Object} ProviderSupports
     * @property {boolean} favorites - Provider supports getting a user's favorites
     * @property {boolean} credentials - Provider supports credential based auto-detect of users
     * @property {boolean} featured - Provider supports getting featured channels and search
     */
    /**
     * An object based on the _supports properties.
     *
     * @type {module:providers/generic-provider~ProviderSupports}
     * @readonly
     */
    get supports() {
        return Object.freeze({
            favorites: this._supportsFavorites && this._enabled,
            credentials: this._supportsCredentials && this._enabled,
            featured: this._supportsFeatured && this._enabled
        });
    }
    /**
     * Get the favorite channels of a user. Also called the followed channels.
     *
     * @async
     * @param {string} username - The username of the user on the platform
     *                            (as entered by the user in the channels
     *                            manager).
     * @returns {Array} A promise that resolves to an array with to elements in
     *          this order:
     *            - the user (an instance of a User object).
     *            - the favorite channels, an array of Channels objects.
     * @abstract
     */
    getUserFavorites(username) {
        return methodNotSupported(this.name, "getUserFavorites");
    }
    /**
     * Get a Channel object without the requirement of any live metadata.
     *
     * @async
     * @param {string} channelname - The username of the channel to return
     *                         (as entered by the user in the channels manager).
     * @returns {module:channel/core.Channel} Channel object with at least
     *          username, type, image and urls set.
     * @abstract
     */
    getChannelDetails(channelname) {
        return methodNotSupported(this.name, "getChannelDetails");
    }
    /**
     * Queues a reocurring update request for updating the favorite channels
     * of the users.
     *
     * @param {Array.<module:channel/core.User>} users - Users to update the
     *                                                   favorites of.
     * @fires module:providers/generic-provider.GenericProvider#updateduser
     * @fires module:providers/generic-provider.GenericProvider#newchannels
     * @abstract
     * @returns {undefined}
     */
    updateFavsRequest(users) {
        throw this.name + ".updateFavsRequest is not supported.";
    }
    /**
     * Unqueues the reocurring update request for updating the favorite
     * channels of the users.
     *
     * @returns {undefined}
     */
    removeFavsRequest() {
        this._qs.unqueueUpdateRequest(this._qs.LOW_PRIORITY);
    }
    /**
     * Queues a reocurring update request for updating the live status of all
     * channels for this provider.
     *
     * @param {Array.<module:channel/core.Channel>} channels - The Channel
     *                                                        objects to update.
     * @fires module:providers/generic-provider.GenericProvider#updatedchannels
     * @abstract
     * @returns {undefined}
     */
    updateRequest(channels) {
        throw this.name + ".updateRequest is not supported.";
    }
    /**
     * Unqueues the reocurring update request for updating the live status of
     * all channels for this provider.
     *
     * @returns {undefined}
     */
    removeRequest() {
        this._qs.unqueueUpdateRequest(this._qs.HIGH_PRIORITY);
    }
    /**
     * Updates all info for a channel, including its live metadata. By default
     * just calls {@link module:providers/generic-provider.GenericProvider#getChannelDetails}.
     *
     * @async
     * @param {string} channelname - The login of the channel.
     * @returns {module:channel/core.Channel} Updated Channel object.
     */
    updateChannel(channelname) {
        return this.getChannelDetails(channelname);
    }
    /**
     * Updates the information for an array of Channel objects, including
     * their live metadata. The default implementation calls
     * {@link module:providers/generic-provider.GenericProvider#updateChannel}
     * for each item.
     *
     * @async
     * @param {Array.<module:channel/core.Channel>} channels - An array of
     *                                                      channel objects.
     * @returns {Array.<module:channel/core.Channel>} Updated Channel objects.
     */
    updateChannels(channels) {
        return Promise.all(channels.map(channel => this.updateChannel(channel.login)));
    }
    /**
     * Returns channels the provider is featuring. Results should be
     * filtered if _mature is false. By default calls
     * {@link module:providers/generic-provider.GenericProvider#search} with
     * an empty string as argument.
     *
     * @async
     * @returns {Array.<module:channel/core.Channel>} An array of featured
     *                                                channels.
     * @see {@link module:lib/providers/generic-provider.GenericProvider#_mature}
     */
    getFeaturedChannels() {
        return this.search("");
    }
    /**
     * Search for live channels. Results should be filtered if _mature is
     * false.
     *
     * @async
     * @param {string} query - A string to search for.
     * @returns {Array.<module:channel/core.Channel>} An array of channels
     *                                                matching the query.
     * @abstract
     * @see {@link module:lib/providers/generic-provider.GenericProvider#_mature}
     */
    search(query) {
        return methodNotSupported(this.name, "search");
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GenericProvider;

GenericProvider.authURL = [];

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @author Toru Nagashima
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */


//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

/*globals window */

var Commons = __webpack_require__(18)
var CustomEventTarget = __webpack_require__(51)
var EventWrapper = __webpack_require__(52)
var isObject = Commons.isObject
var LISTENERS = Commons.LISTENERS
var CAPTURE = Commons.CAPTURE
var BUBBLE = Commons.BUBBLE
var ATTRIBUTE = Commons.ATTRIBUTE
var newNode = Commons.newNode
var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget
var createEventWrapper = EventWrapper.createEventWrapper
var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG
var PASSIVE_LISTENER_FLAG = EventWrapper.PASSIVE_LISTENER_FLAG

//------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------

/**
 * A flag which shows there is the native `EventTarget` interface object.
 *
 * @type {boolean}
 * @private
 */
var HAS_EVENTTARGET_INTERFACE = (
    typeof window !== "undefined" &&
    typeof window.EventTarget !== "undefined"
)

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * An implementation for `EventTarget` interface.
 *
 * @constructor
 * @public
 */
var EventTarget = module.exports = function EventTarget() {
    if (this instanceof EventTarget) {
        // this[LISTENERS] is a Map.
        // Its key is event type.
        // Its value is ListenerNode object or null.
        //
        // interface ListenerNode {
        //     var listener: Function
        //     var kind: CAPTURE|BUBBLE|ATTRIBUTE
        //     var next: ListenerNode|null
        // }
        Object.defineProperty(this, LISTENERS, {value: Object.create(null)})
    }
    else if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(EventTarget, arguments[0])
    }
    else if (arguments.length > 0) {
        var types = Array(arguments.length)
        for (var i = 0; i < arguments.length; ++i) {
            types[i] = arguments[i]
        }

        // To use to extend with attribute listener properties.
        // e.g.
        //     class MyCustomObject extends EventTarget("message", "error") {
        //         //...
        //     }
        return defineCustomEventTarget(EventTarget, types)
    }
    else {
        throw new TypeError("Cannot call a class as a function")
    }
}

EventTarget.prototype = Object.create(
    (HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype,
    {
        constructor: {
            value: EventTarget,
            writable: true,
            configurable: true,
        },

        addEventListener: {
            value: function addEventListener(type, listener, options) {
                if (listener == null) {
                    return false
                }
                if (typeof listener !== "function" && typeof listener !== "object") {
                    throw new TypeError("\"listener\" is not an object.")
                }

                var capture = isObject(options) ? Boolean(options.capture) : Boolean(options)
                var kind = (capture ? CAPTURE : BUBBLE)
                var node = this[LISTENERS][type]
                if (node == null) {
                    this[LISTENERS][type] = newNode(listener, kind, options)
                    return true
                }

                var prev = null
                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        // Should ignore a duplicated listener.
                        return false
                    }
                    prev = node
                    node = node.next
                }

                prev.next = newNode(listener, kind, options)
                return true
            },
            configurable: true,
            writable: true,
        },

        removeEventListener: {
            value: function removeEventListener(type, listener, options) {
                if (listener == null) {
                    return false
                }

                var capture = isObject(options) ? Boolean(options.capture) : Boolean(options)
                var kind = (capture ? CAPTURE : BUBBLE)
                var prev = null
                var node = this[LISTENERS][type]
                while (node != null) {
                    if (node.listener === listener && node.kind === kind) {
                        if (prev == null) {
                            this[LISTENERS][type] = node.next
                        }
                        else {
                            prev.next = node.next
                        }
                        return true
                    }

                    prev = node
                    node = node.next
                }

                return false
            },
            configurable: true,
            writable: true,
        },

        dispatchEvent: {
            value: function dispatchEvent(event) {
                // If listeners aren't registered, terminate.
                var type = event.type
                var node = this[LISTENERS][type]
                if (node == null) {
                    return true
                }

                // Since we cannot rewrite several properties, so wrap object.
                var wrapped = createEventWrapper(event, this)

                // This doesn't process capturing phase and bubbling phase.
                // This isn't participating in a tree.
                var prev = null
                while (node != null) {
                    // Remove this listener if it's once
                    if (node.once) {
                        if (prev == null) {
                            this[LISTENERS][type] = node.next
                        }
                        else {
                            prev.next = node.next
                        }
                    }
                    else {
                        prev = node
                    }

                    // Call this listener
                    wrapped[PASSIVE_LISTENER_FLAG] = node.passive
                    if (typeof node.listener === "function") {
                        node.listener.call(this, wrapped)
                    }
                    else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                        node.listener.handleEvent(wrapped)
                    }

                    // Break if `event.stopImmediatePropagation` was called.
                    if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                        break
                    }

                    node = node.next
                }

                return !wrapped.defaultPrevented
            },
            configurable: true,
            writable: true,
        },
    }
)


/***/ }),
/* 5 */,
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__live_state__ = __webpack_require__(17);
/**
 * Represents information for non-live streams.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module channel/live-state
 * @todo Replace alternate properties with a serialized channel (to avoid require loops)
 */




/**
 * @typedef {number} LiveStateIndicator
 */
/**
 * @typedef {Object} SerializedLiveState
 * @property {module:channel/live-state~LiveStateIndicator} state
 * @property {string} alternateUsername
 * @property {string} alternateURL
 * @see {@link module:channel/live-state.LiveState}
 */
/**
 * Constant for how the live state is to be interpreted in a boolean scenario.
 *
 * @typedef {number} LiveStateInterpretation
 */

const IGNORED_PROPERTIES = ["state", "isLive"],
      OFFLINE = __WEBPACK_IMPORTED_MODULE_2__live_state__["a" /* default */].OFFLINE,
      LIVE = __WEBPACK_IMPORTED_MODULE_2__live_state__["a" /* default */].LIVE,
      REDIRECT = __WEBPACK_IMPORTED_MODULE_2__live_state__["a" /* default */].REDIRECT,
      REBROADCAST = __WEBPACK_IMPORTED_MODULE_2__live_state__["a" /* default */].REBROADCAST,
      TOWARD_LIVE = __WEBPACK_IMPORTED_MODULE_2__live_state__["a" /* default */].TOWARD_LIVE,
      TOWARD_OFFLINE = __WEBPACK_IMPORTED_MODULE_2__live_state__["a" /* default */].TOWARD_OFFLINE,
      getDefaultInterpretation = () => {
  return __WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].get("panel_nonlive").then(value => {
    return parseInt(value, 10) < 3 ? TOWARD_LIVE : TOWARD_OFFLINE;
  });
};

/**
 * Used to describe the exact state of a stream. Sometimes streams are marked
 * as rebroadcasts or are a re-stream from a different source.
 *
 * @class module:channel/live-state.LiveState
 */
class LiveState {

  /**
   * @param {module:channel/live-state~SerializedLiveState} serializedLiveState
   *                      - LiveState represented as JSON serializable object.
   * @returns {module:channel/live-state.LiveState} LiveState derrived from
   *          the specification of the serialized version.
   */


  /**
   * Interprets everything but offline as live.
   *
   * @type {module:channel/live-state~LiveStateInterpretation}
   * @default 0
   * @const
   */

  /**
   * Indicates the channel is hosting another channel or similar.
   *
   * @const
   * @type {module:channel/live-state~LiveStateIndicator}
   * @alias module:channel/live-state.LiveState.REDIRECT
   * @default 1
   * @see {@link module:channel/live-state.LiveState.LIVE}, {@link module:channel/live-state.LiveState.REBROADCAST}, {@link module:channel/live-state.LiveState.OFFLINE}
   */

  /**
   * Indicates that the channel is offline.
   *
   * @const
   * @type {module:channel/live-state~LiveStateIndicator}
   * @alias module:channel/live-state.LiveState.OFFLINE
   * @default 0
   * @see {@link module:channel/live-state.LiveState.REDIRECT}, {@link module:channel/live-state.LiveState.REBROADCAST}, {@link module:channel/live-state.LiveState.LIVE}
   */
  static deserialize(serializedLiveState) {
    const props = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_underscore__["omit"])(serializedLiveState, IGNORED_PROPERTIES);
    return Object.assign(new LiveState(serializedLiveState.state), props);
  }
  /**
   * Interprets everything but live as offline.
   *
   * @type {module:channel/live-state~LiveStateInterpretation}
   * @default 1
   * @const
   */

  /**
   * The channel is rebroadcasting a previous broadcast.
   *
   * @const
   * @type {module:channel/live-state~LiveStateIndicator}
   * @alias module:channel/live-state.LiveState.REBROADCAST
   * @default 2
   * @see {@link module:channel/live-state.LiveState.LIVE}, {@link module:channel/live-state.LiveState.REDIRECT}, {@link module:channel/live-state.LiveState.OFFLINE}
   */

  /**
   * Indicates that the channel is live.
   *
   * @const
   * @type {module:channel/live-state~LiveStateIndicator}
   * @alias module:channel/live-state.LiveState.LIVE
   * @default 0
   * @see {@link module:channel/live-state.LiveState.REDIRECT}, {@link module:channel/live-state.LiveState.REBROADCAST}, {@link module:channel/live-state.LiveState.OFFLINE}
   */


  /**
   * @constructs
   * @param {module:channel/live-state~LiveStateIndicator} [state={@link module:channel/live-state.LiveState.OFFLINE}]
   *                                   - Initial state, defaulting to offline.
   */
  constructor(state = OFFLINE) {
    this.alternateUsername = "";
    this.alternateURL = "";

    this._state = state;
  }
  /**
   * The state descriptor of this LiveState.
   *
   * @type {module:channel/live-state~LiveStateIndicator}
   * @readonly
   */
  get state() {
    return this._state;
  }
  /**
   * The default interpretation mode based on a user's preference.
   *
   * @type {module:channel/live-state~LiveStateInterpretation}
   * @async
   */
  static defaultInterpretation() {
    return getDefaultInterpretation();
  }
  /**
   * Serialize the LiveState.
   *
   * @returns {module:channel/live-state~SerializedLiveState} JSON
   *          serializable object representation of the live state.
   */
  serialize() {
    return {
      state: this.state,
      alternateUsername: this.alternateUsername,
      alternateURL: this.alternateURL
    };
  }
  /**
   * Interpret the live state to a boolean decision.
   *
   * @param {module:channel/live-state~LiveStateInterpretation} [interpretation]
   *                                - How to interpret live states as boolean.
   * @returns {boolean} Whether the live state should be considered live.
   */
  async isLive(interpretation) {
    if (!interpretation) {
      interpretation = await getDefaultInterpretation();
    }

    if (interpretation === TOWARD_LIVE) {
      return this.state !== OFFLINE;
    } else if (interpretation === TOWARD_OFFLINE) {
      return this.state === LIVE;
    }
  }
  /**
   * Set the state to live or not live. Simple as can be.
   *
   * @param {boolean} live - Shortcut to set the object to simple states.
   */
  setLive(live) {
    this._state = live ? LIVE : OFFLINE;
    this.alternateUsername = "";
    this.alternateURL = "";
  }
}

LiveState.OFFLINE = OFFLINE;
LiveState.LIVE = LIVE;
LiveState.REDIRECT = REDIRECT;
LiveState.REBROADCAST = REBROADCAST;
LiveState.TOWARD_LIVE = TOWARD_LIVE;
LiveState.TOWARD_OFFLINE = TOWARD_OFFLINE;
/* harmony default export */ __webpack_exports__["a"] = LiveState;

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return promisedPaginationHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return PaginationHelper; });
/**
 * Pagination helper for APIs with pagination
 * @module pagination-helper
 * @author Martin Giger
 * @license MPL-2.0
 */

/**
 * An SDK request for executing HTTP request.
 * @external sdk/request
 * @requires sdk/request
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/request}
 */
/**
 * Add-on SDK Response object
 * @class Response
 * @memberof external:sdk/request
 * @inner
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/request#Response}
 */

/**
 * A helper object for working with paginated APIs. It fetches all the content
 * and then returns an array of all data. Runs immediately after construction.
 *
 * @class
 * @param {module:pagination-helper~PaginationHelperOptions} options - Pagination
 *        helper configuration.
 * @alias module:pagination-helper.PaginationHelper
 */
function PaginationHelper(options) {
    this.url = options.url;
    this.request = options.request;
    this.fetchNextPage = options.fetchNextPage;
    this.onComplete = options.onComplete;
    this.getItems = options.getItems;

    if ("pageSize" in options) {
        this.pageSize = options.pageSize;
    }
    if ("getPageNumber" in options) {
        this.getPageNumber = options.getPageNumber;
    }

    if ("initialPage" in options) {
        this.page = options.initialPage;
    }
    this.result = [];

    this.getPage(true);
}

PaginationHelper.prototype.url = "localhost/";
PaginationHelper.prototype.page = 0;
PaginationHelper.prototype.pageSize = 100;
PaginationHelper.prototype.result = [];
PaginationHelper.prototype.request = null;
PaginationHelper.prototype.fetchNextPage = null;
PaginationHelper.prototype.onComplete = null;
PaginationHelper.prototype.getItems = null;
PaginationHelper.prototype.getPageNumber = function (page, pageSize) {
    return page + pageSize;
};

/**
 * A function running a request on the provided URL and then calling the
 * callback function. Alternatively returnes a promise. Normally is
 * {@link module:queueservice~QueueServie.queueRequest}, which returns a
 * {@link external:sdk/request~Response}.
 *
 * @callback request
 * @argument {string} url
 * @argument {function} callback
 * @argument {boolean} initial - Indicating if this is the first request ran.
 * @return {?Promise} Optionally returns a promise instead of calling the
 *         callback function.
 */
/**
 * A function determining, if the next page should be fetched.
 *
 * @callback fetchNextPage
 * @argument {?} data - Whatever {@link module:pagination-helper~request} returned.
 * @argument {number} pageSize - The expected size of a page.
 * @return {boolean}
 */
/**
 * @callback completeCallback
 * @argument {Array} data - All the fetched items
 */
/**
 * Extracts the items from a page out of an Add-on SDK Response object.
 *
 * @callback getItems
 * @argument {?} data - Whatever {@link module:pagination-helper~request} returned.
 * @return {Array} The extracted items.
 */
/**
 * @callback getPageNumber
 * @argument {number|string} page - The current page.
 * @argument {number} pageSize - The size of a page.
 * @argument {?} data - Whatever {@link module:pagination-helper~request} returned.
 * @return {number|string} The next page to fetch.
 */
/**
 * @typedef {Object} PaginationHelperOptions
 * @property {string} url - The base URL to call.
 * @property {number} [pageSize=100] - The number of expected items per full page.
 * @property {module:pagination-helper~request} request
 * @property {module:pagination-helper~fetchNextPage} fetchNextPage
 * @property {module:pagination-helper~completeCallback} [onComplete]
 * @property {module:pagination-helper~getItems} getItems
 * @property {module:pagination-helper~getPageNumber} [getPageNumber=(page, pageSize) => page + pageSize]
 * @property {number|string} [initialPage=0] - The first page that is fetched.
 */

/**
 * Fetches the next page and then processes the content. Invokes itself
 * recursively and is initially invoked from the constructor. If all content
 * was fetched onComplete is called.
 *
 * @param {boolean} [initial=false] - If this is the first fetched page.
 * @returns {undefined}
 */
PaginationHelper.prototype.getPage = function (initial = false) {
    const cbk = data => {
        this.result = this.result.concat(this.getItems(data));
        if (this.fetchNextPage(data, this.pageSize)) {
            this.page = this.getPageNumber(this.page, this.pageSize, data);
            this.getPage();
        } else {
            if (this.onComplete) {
                this.onComplete(Array.slice(this.result));
            }
            this.result.length = 0;
        }
    },
          ret = this.request(this.url + this.page, cbk, initial);

    if (typeof ret == "object" && "then" in ret) {
        ret.then(cbk);
    }
};

/**
 * Get a PaginationHelper that resolves a promise. The specified callback
 * functions are not handeld promise aware.
 *
 * @param {module:pagination-helper~PaginationHelperOptions} options - Pagination
 *        helper configuration without onComplete.
 * @async
 * @returns {undefined} The PaginationHelper is done.
 * @alias module:pagination-helper.promisedPaginationHelper
 */
const promisedPaginationHelper = options => {
    return new Promise(resolve => {
        options.onComplete = resolve;

        new PaginationHelper(options);
    });
};



/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Build query strings from an Object
 *
 * @author Martin Giger
 * @license MPL-2.0
 */

/* harmony default export */ __webpack_exports__["a"] = {
    stringify(obj) {
        const qs = new URLSearchParams();
        for (const q in obj) {
            qs.append(q, obj[q]);
        }

        return qs.toString();
    }
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (true) {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}.call(this));


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_event_target_shim__);
/**
 * SDK communication helper.
 *
 * @author Martin Giger
 * @license MPL-2.0
 */



class SDKCommunication extends __WEBPACK_IMPORTED_MODULE_1_event_target_shim___default.a {
    constructor() {
        super();

        this.port = browser.runtime.connect({ name: "sdk-connection" });
        this.port.onMessage.addListener(message => {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "message", message);
        });
    }

    postMessage(message) {
        if (typeof message != "object" || !("target" in message)) {
            throw new Error("Must at least give a target action for the message");
        }
        this.port.postMessage(message);
    }

    doAction(message) {
        return new Promise((resolve, reject) => {
            // Can't use the once infrastructure since other replies might come in first.
            const waitForAction = ({ detail }) => {
                if (detail.target == message.target + "-reply") {
                    this.removeEventListener("message", waitForAction, false);
                    if (!detail.error) {
                        resolve(detail.payload);
                    } else {
                        reject(detail.error);
                    }
                }
            };
            this.addEventListener("message", waitForAction, false);
            this.postMessage(message);
        });
    }
}

const SDK = new SDKCommunication();

/* harmony default export */ __webpack_exports__["a"] = SDK;

/***/ }),
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = and;
/* harmony export (immutable) */ __webpack_exports__["b"] = or;
/* harmony export (immutable) */ __webpack_exports__["a"] = not;
/**
 * Concurrent logic utils
 *
 * @author Martin Giger
 * @license MPL-2.0
 */

/**
 * Identity function, returns what it gets.
 *
 * @param {?} i - What it gets.
 * @returns {?} What it got.
 */
const identity = i => i;

/**
 * An asynchronous version of the boolean and operation.
 *
 * @param {Promise} args - Promises that return booleans to do an and on.
 * @async
 * @returns {boolean} Result of the and operation on all returned values.
 */
function and(...args) {
  return Promise.all(args).then(p => p.every(identity));
}

/**
 * An asynchronous version of the boolean or operation.
 *
 * @param {Promise} args - Promises that return booleans to do an or on.
 * @async
 * @returns {boolean} Result of the or operation on all returned values.
 */
function or(...args) {
  return Promise.all(args).then(p => p.some(identity));
}

/*
 * Invert the value a promise resolves to.
 *
 * @param {Promise} promsie - Promise that returns the value to invert.
 * @async
 * @returns {boolean} The opposite value than the given promise resolved to.
 */
function not(promise) {
  return promise.then(p => !p);
}

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__twitch__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__hitbox__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ustream__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__youtube__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__livestream__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mlg__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__azubu__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__beam__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__picarto__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__new_livestream__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__douyutv__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__dailymotion__ = __webpack_require__(36);
/**
 * Exports each provider as a property named after the provider's type. Each
 * provider is assumed to be frozen.
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers
 */













/* harmony default export */ __webpack_exports__["a"] = {
    twitch: __WEBPACK_IMPORTED_MODULE_0__twitch__["a" /* default */],
    hitbox: __WEBPACK_IMPORTED_MODULE_1__hitbox__["a" /* default */],
    ustream: __WEBPACK_IMPORTED_MODULE_2__ustream__["a" /* default */],
    youtube: __WEBPACK_IMPORTED_MODULE_3__youtube__["a" /* default */],
    livestream: __WEBPACK_IMPORTED_MODULE_4__livestream__["a" /* default */],
    mlg: __WEBPACK_IMPORTED_MODULE_5__mlg__["a" /* default */],
    azubu: __WEBPACK_IMPORTED_MODULE_6__azubu__["a" /* default */],
    beam: __WEBPACK_IMPORTED_MODULE_7__beam__["a" /* default */],
    picarto: __WEBPACK_IMPORTED_MODULE_8__picarto__["a" /* default */],
    newlivestream: __WEBPACK_IMPORTED_MODULE_9__new_livestream__["a" /* default */],
    douyutv: __WEBPACK_IMPORTED_MODULE_10__douyutv__["a" /* default */],
    dailymotion: __WEBPACK_IMPORTED_MODULE_11__dailymotion__["a" /* default */]
};

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Live state constants
 *
 * @author Martin Giger
 * @license MPL-2.0
 */

/* harmony default export */ __webpack_exports__["a"] = {
    OFFLINE: -1,
    LIVE: 0,
    REDIRECT: 1,
    REBROADCAST: 2,
    TOWARD_LIVE: 0,
    TOWARD_OFFLINE: 1
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @author Toru Nagashima
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */


/**
 * Creates a unique key.
 *
 * @param {string} name - A name to create.
 * @returns {symbol|string} Generated unique key.
 * @private
 */
var createUniqueKey = module.exports.createUniqueKey = (
    typeof Symbol !== "undefined" ? Symbol : //eslint-disable-line no-undef
    /* otherwise */ function createUniqueKey(name) {
        return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]"
    }
)

/**
 * Checks whether the given value is a non-null object or not.
 *
 * @param {any} x - The value to be check.
 * @returns {boolean} `true` if the value is a non-null object.
 * @private
 */
var isObject = module.exports.isObject = function isObject(x) {
    return typeof x === "object" && x !== null
}

/**
 * The key of listeners.
 *
 * @type {symbol|string}
 * @private
 */
module.exports.LISTENERS = createUniqueKey("listeners")

/**
 * A value of kind for listeners which are registered in the capturing phase.
 *
 * @type {number}
 * @private
 */
module.exports.CAPTURE = 1

/**
 * A value of kind for listeners which are registered in the bubbling phase.
 *
 * @type {number}
 * @private
 */
module.exports.BUBBLE = 2

/**
 * A value of kind for listeners which are registered as an attribute.
 *
 * @type {number}
 * @private
 */
module.exports.ATTRIBUTE = 3

/**
 * @typedef object ListenerNode
 * @property {function} listener - A listener function.
 * @property {number} kind - The kind of the listener.
 * @property {ListenerNode|null} next - The next node.
 *      If this node is the last, this is `null`.
 */

/**
 * Creates a node of singly linked list for a list of listeners.
 *
 * @param {function} listener - A listener function.
 * @param {number} kind - The kind of the listener.
 * @param {object} [options] - The option object.
 * @param {boolean} [options.once] - The flag to remove the listener at the first call.
 * @param {boolean} [options.passive] - The flag to ignore `event.preventDefault` method.
 * @returns {ListenerNode} The created listener node.
 */
module.exports.newNode = function newNode(listener, kind, options) {
    var obj = isObject(options)

    return {
        listener: listener,
        kind: kind,
        once: obj && Boolean(options.once),
        passive: obj && Boolean(options.passive),
        next: null,
    }
}


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(16);
/**
 * Serializes the providers so they can be sent over a message port.
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/serialized
 * @see {@link module:providers}
 */


/**
 * Frozen.
 *
 * @typedef {Object} SerializedProvider
 * @property {string} name
 * @property {module:providers/generic-provider~ProviderSupports} supports
 * @property {boolean} enabled
 */

/**
 * Serializes the providers objects so they can get passed as a message.
 *
 * @param {Object.<string, module:providers/generic-provider.GenericProvider>} providers
 *                                              - Providers object to serialize.
 * @returns {Object<string, module:providers/serialized~SerializedProvider>}
 *         Frozen Object of serialized providers by id.
 */
const serializeProviders = providers => {
  const ret = {};
  for (const p in providers) {
    ret[p] = Object.freeze({
      name: providers[p].name,
      supports: providers[p].supports,
      enabled: providers[p].enabled
    });
  }
  Object.freeze(ret);
  return ret;
};

/**
 * @see {@link module:providers/serialized~serializeProviders}
 * @type {Object<string, module:providers/serialized~SerializedProvider>}
 */
/* harmony default export */ __webpack_exports__["a"] = serializeProviders(__WEBPACK_IMPORTED_MODULE_0__index__["a" /* default */]);

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__update__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__preferences__ = __webpack_require__(2);
/**
 * Queue service for providers. Provides a separated management for requests by
 * provider, all in the same {@link module:queue/update.UpdateQueue}.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module queue/service
 * @requires module:queue/update
 */

//TODO pre-calculate Response.json()?



const queue = new __WEBPACK_IMPORTED_MODULE_0__update__["a" /* default */](),
      services = {},
      defaultRequeue = response => !response.ok && response.status !== 404 && response.status !== 420,
      completeCallback = (requeue, callback, url, data) => {
    if (!requeue(data)) {
        callback(data, url);
    }
};

/**
 * @callback updateRequestCallback
 * @param {external:sdk/request~Response} data
 * @param {string} url
 */

/**
 * A service providing methods for a provider to place one-time and reocurring
 * requests.
 *
 * @class
 */
class QueueService {
    /**
     * @private
     * @type {Array}
     */
    constructor() {
        this.highPriorityRequestIds = [];
        this.lowPriorityRequestIds = [];
        this.HIGH_PRIORITY = QueueService.HIGH_PRIORITY;
        this.LOW_PRIORITY = QueueService.LOW_PRIORITY;

        this.highPriorityRequestIds = [];
        this.lowPriorityRequestIds = [];
    }

    /**
     * Returns the request ID array for the specified priority.
     *
     * @private
     * @param {module:queue-service~QueuePriority} priority - Priority to get
     *                                                        the array for.
     * @returns {Array} Array of request IDs.
     */

    /**
     * @private
     * @type {Array}
     */
    getRequestProperty(priority) {
        return this[priority + "PriorityRequestIds"];
    }

    /**
     * Determines if the request has to be requeued due to errors.
     *
     * @callback requeue
     * @param {external:sdk/request~Response} data - Response that was returned.
     * @returns {boolean} When true, the request will be queued again.
     */
    /**
     * Immediately run a request to the given URL.
     *
     * @param {string} url - The URL to request.
     * @param {Object.<string, string>} [headers={}] - An object with the headers
     *                                                 to send.
     * @param {module:queue/service~requeue} [requeue=(r) => r.status > 499]
     *                             - Determines if the request should be re-run.
     * @param {number} [attempt=0] - Counter to avoid requeuing infinitely.
     * @returns {Promise} A promise resolving with the Add-on SDK Request response.
     */
    queueRequest(url, headers = {}, requeue = defaultRequeue, attempt = 0) {
        console.log("Queueing " + url);
        return new Promise((resolve, reject) => {
            const id = queue.addRequest({
                url,
                headers: new Headers(headers),
                onComplete: data => {
                    if (requeue(data)) {
                        __WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].get("queueservice_maxRetries").then(maxRetries => {
                            if (attempt < maxRetries) {
                                resolve(this.queueRequest(url, headers, requeue, ++attempt));
                            } else {
                                reject("Too many attempts");
                            }
                        });
                    } else {
                        resolve(data);
                    }
                },
                onError: reject
            }, false, true);

            if (attempt === 0 && navigator.onLine) {
                queue.getRequestById(id);
            }
        });
    }

    /**
     * Unqueues an all update requests of the given priority. If none is given,
     * all update requests are unqueued.
     *
     * @param {module:queue/service~QueuePriority?} priority - Priority of
     *                                                      reuqests to unqueue.
     * @returns {undefined}
     */
    unqueueUpdateRequest(priority) {
        if (!priority) {
            this.unqueueUpdateRequest(QueueService.HIGH_PRIORITY);
            this.unqueueUpdateRequest(QueueService.LOW_PRIORITY);
        } else {
            if (this.getRequestProperty(priority).length > 0) {
                this.getRequestProperty(priority).forEach(reqId => {
                    queue.removeRequest(reqId);
                });
                this.getRequestProperty(priority).length = 0;
            }
        }
    }
    /**
     * Queue a new reocurring update request of the given priority. Removes all
     * existing update requests of this priority.
     *
     * @param {Array.<string>} urls - An array of URLs to call.
     * @param {module:queue/service~QueuePriority} priority - Priority to queue
     *                                                        the request as.
     * @param {module:queue/service~updateRequestCallback} callback - Called
     *                                           whenever a request is done (for
     *                                           each provided URL).
     * @param {Object.<string,string>} [rawHeaders={}] - An object with header-value
     *                                                pairs to send with the
     *                                                request.
     * @param {module:queue/service~requeue} [requeue=(r) => r.status > 499]
     *                             - Determinines if a request should be re-run.
     * @returns {undefined}
     */
    queueUpdateRequest(urls, priority, callback, rawHeaders = {}, requeue = defaultRequeue) {
        console.log("Requeueing " + priority + " priority update request");
        this.unqueueUpdateRequest(priority);
        const requests = this.getRequestProperty(priority),
              skips = priority == QueueService.LOW_PRIORITY ? 4 : 0,
              headers = new Headers(rawHeaders);

        requests.push(...urls.map(url => queue.addRequest({
            url,
            headers,
            onComplete: completeCallback.bind(null, requeue, callback, url)
        }, true, false, skips)));
    }
}

/**
 * Get a QueueService for the usage in a provider.
 *
 * @param {string} providerName - The type of the provider.
 * @returns {module:queue/service~QueueService} QueueService for the provider.
 */
QueueService.HIGH_PRIORITY = "high";
QueueService.LOW_PRIORITY = "low";
const getServiceForProvider = providerName => {
    if (!services.hasOwnProperty(providerName)) {
        services[providerName] = new QueueService();
    }
    return services[providerName];
};
/* harmony export (immutable) */ __webpack_exports__["f"] = getServiceForProvider;


/**
 * Set the internal queue refresh properties.
 *
 * @param {module:queue/pauseable~QueueOptions} options - Queue options.
 * @returns {undefined}
 */
const setOptions = options => {
    console.log("[QS]> setting queue options:" + options.toSource());
    queue.autoFetch(options.interval, options.amount, options.maxSize);
};
/* harmony export (immutable) */ __webpack_exports__["c"] = setOptions;


/**
 * Change the interval of the internal queue.
 *
 * @param {number} interval - Refresh interval in milliseconds.
 * @returns {undefined}
 */
const updateOptions = interval => {
    console.log("[QS]> setting interval to " + interval);
    queue.autoFetch(interval);
};
/* harmony export (immutable) */ __webpack_exports__["e"] = updateOptions;


/**
 * Pause the internal queue.
 *
 * @returns {undefined}
 */
const pause = () => {
    queue.pause();
};
/* harmony export (immutable) */ __webpack_exports__["a"] = pause;


/**
 * Resume the internal queue.
 *
 * @returns {undefined}
 */
const resume = () => {
    queue.resume();
};
/* harmony export (immutable) */ __webpack_exports__["b"] = resume;


/**
 * @typedef {Object} QueueServiceListener
 * @property {function} containsPriorized - Callback for the
 * {@link module:queue/update.UpdateQueue#event:queuepriorized} event of the
 * internal queue.
 * @property {function} priorizedLoaded - Callback for the
 * {@link module:queue/update.UpdateQueue#event:allpriorizedloaded} event of the
 * internal queue.
 * @property {function} paused
 * @property {function} resumed
 */

/**
 * Add event listeners to the internal queue.
 *
 * @param {module:queue/service~QueueServiceListener} listeners - Listeners to add.
 * @returns {undefined}
 */
const addListeners = ({ containsPriorized, priorizedLoaded, paused, resumed }) => {
    if (containsPriorized) {
        queue.addEventListener("queuepriorized", containsPriorized);
    }
    if (priorizedLoaded) {
        queue.addEventListener("allpriorizedloaded", priorizedLoaded);
    }
    if (paused) {
        queue.addEventListener("pause", paused);
    }
    if (resumed) {
        queue.addEventListener("resume", resumed);
    }
};
/* harmony export (immutable) */ __webpack_exports__["d"] = addListeners;


/**
 * Remove event listeners from the internal queue.
 *
 * @param {module:queue/service~QueueServiceListener} listeners - Listeners to
 *        remove.
 * @returns {undefined}
 */
const removeListeners = ({ containsPriorized, priorizedLoaded, paused, resumed }) => {
    if (containsPriorized) {
        queue.removeEventListener("queuepriorized", containsPriorized);
    }
    if (priorizedLoaded) {
        queue.removeEventListener("allpriorizedloaded", priorizedLoaded);
    }
    if (paused) {
        queue.removeEventListener("pause", paused);
    }
    if (resumed) {
        queue.removeEventListener("resume", resumed);
    }
};
/* unused harmony export removeListeners */


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sdk__ = __webpack_require__(10);
/**
 * Parental controls wrapper.
 *
 * @author Martin Giger
 * @license MPL-2.0
 */


let enabled = false;

const getEnabled = () => __WEBPACK_IMPORTED_MODULE_0__sdk__["a" /* default */].doAction({ target: "pc-enabled" }).then(e => {
    enabled = e;
});

/* harmony default export */ __webpack_exports__["a"] = {
    get enabled() {
        getEnabled();
        return enabled;
    }
};

getEnabled();

/***/ }),
/* 22 */
/***/ (function(module, exports) {

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__providers__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__manager__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__list__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__providers_events__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__providers_serialized__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__parental_controls__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_underscore__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__dump__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__logins__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_event_target_shim__);
/**
 * @author Martin Giger
 * @license MPL-2.0
 * @module channel/controller
 */













/**
 * @event module:channel/controller.ChannelController#channelsadded
 * @type {Array.<module:channel/core.Channel>}
 */
/**
 * @event module:channel/controller.ChannelController#channeldeleted
 * @type {number}
 */
/**
 * @event module:channel/controller.ChannelController#channelupdated
 * @type {module:channel/core.Channel}
 */

//const REFRESH_PROFILE_URL = "https://support.mozilla.org/kb/refresh-firefox-reset-add-ons-and-settings",

/**
 * Filters mature channels if parental controls are activated.
 *
 * @param {Array.<module:channel/core.Channel>} channels - Channels to filter.
 * @returns {Array.<module:channel/core.Channel>} Filtered of channels marked as
 *          mature if parental controls are activated.
 */
const filterInapropriateChannels = channels => {
    if (__WEBPACK_IMPORTED_MODULE_6__parental_controls__["a" /* default */].enabled) {
        return channels.filter(c => !c.mature);
    } else {
        return channels;
    }
},

/**
 * Filter channels to exclude existing favorites.
 *
 * @param {module:channel/core.User} user - User whose favs should be excluded.
 * @param {Array.<module:channel/core.Channel>} channels - Channels to filter.
 * @returns {Array.<module:channel/core.Channel>} Filtered array of channels.
 */
filterExistingFavs = (user, channels) => {
    return channels.filter(ch => !user.favorites.includes(ch.login));
};

/**
 * Controller for all the channel stuff. Handles getting info from providers
 * and abstracts the {@link module:channel/list.ChannelList} complications away.
 * @extends external:EventTarget
 */
class ChannelController extends __WEBPACK_IMPORTED_MODULE_11_event_target_shim___default.a {

    /**
     * @fires module:channel/controller.ChannelController#channelsadded
     * @fires module:channel/controller.ChannelController#channeldeleted
     * @fires module:channel/controller.ChannelController#channelupdated
     */
    constructor() {
        super();
        /**
         * @type {Array.<function>}
         * @private
         */
        this._ready = false;
        this._queue = [];

        const managerError = (e, name, type, itemType, canceled = () => false) => {
            console.error("loading", itemType, ":", name, type, "an error occured");
            console.error(e);
            if (canceled()) {
                this._manager.onCancel(name, type, itemType);
            } else if (name && type in __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */]) {
                this._manager.onError(name, __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][type].name, itemType);
            } else {
                this._manager.onError();
            }
        },
              managerDoneLoading = () => {
            this._manager.loading = false;
        };
        /**
         * @type module:channel/manager.ChannelsManager
         * @private
         */
        this._manager = new __WEBPACK_IMPORTED_MODULE_1__manager__["a" /* default */]();
        this._manager.addEventListener("addchannel", ({ detail: [name, type, canceled] }) => this.addChannel(name, type, canceled).then(() => this._manager._deleteCancelingValue("channel", type, name), e => managerError(e, name, type, "channel", canceled)));
        this._manager.addEventListener("removechannel", ({ detail }) => this.removeChannel(detail));
        this._manager.addEventListener("updatechannel", ({ detail }) => this.updateChannel(detail).catch(managerDoneLoading));
        this._manager.addEventListener("adduser", ({ detail: [username, type, canceled] }) => this.addUser(username, type, canceled).then(() => this._manager._deleteCancelingValue("user", type, username), e => managerError(e, username, type, "user", canceled)));
        this._manager.addEventListener("removeuser", ({ detail }) => this.removeUser(detail));
        this._manager.addEventListener("updatefavorites", ({ detail }) => this.updateUser(detail).catch(managerDoneLoading));
        this._manager.addEventListener("autoadd", () => this.autoAddUsers().catch(managerDoneLoading));
        this._manager.addEventListener("getdata", () => {
            Promise.all([this.getChannelsByType().then(channels => channels.forEach(ch => this._manager.onChannelAdded(ch))), this.getUsersByType().then(users => users.forEach(usr => this._manager.onUserAdded(usr)))]).then(managerDoneLoading, managerDoneLoading);

            this._manager.addProviders(__WEBPACK_IMPORTED_MODULE_5__providers_serialized__["a" /* default */]);
        });
        this._manager.addEventListener("debugdump", () => {
            Promise.all([this.getChannelsByType(), this.getUsersByType()]).then(([channels, users]) => {
                return __WEBPACK_IMPORTED_MODULE_8__dump__["a" /* copy */](channels, users);
            });
        });
        this._manager.addEventListener("showoptions", () => {
            __WEBPACK_IMPORTED_MODULE_9__preferences__["a" /* default */].open();
        });

        /*
         * These are a bunch of helpers for onChanneldelted. The comment there
         * explains more or less what's going on.
         */
        const deletedTypes = new Map(),

        // We only want the afterchannelsdeleted event to fire after all channels are gone.
        debouncedEvent = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_underscore__["debounce"])(() => __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["a" /* emit */])(this, "afterchannelsdeleted"), 500),
              deleteCallback = type => {
            this._list.getChannelsByType(type).then(channels => {
                if (channels.length > 0 && __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][type].enabled) {
                    __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][type].updateRequest(channels);
                } else {
                    __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][type].removeRequest();
                }
                deletedTypes.delete(type);
                debouncedEvent();
            });
        };
        /**
         * @type module:channel/list.ChannelList
         * @private
         */
        this._list = new __WEBPACK_IMPORTED_MODULE_2__list__["a" /* default */]();
        this._list.addEventListener("ready", () => {
            this._ready = true;

            // Resolve all the queued up promises.
            this._queue.forEach(r => r());
            this._queue.length = 0;
        });
        this._list.addEventListener("channelsadded", ({ detail: channels }) => {
            // Assume we always only get an array of channels with the same type.
            if (__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][channels[0].type].enabled) {
                this._list.getChannelsByType(channels[0].type).then(chans => {
                    __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][chans[0].type].updateRequest(chans);
                });
            }

            channels.forEach(chan => this._manager.onChannelAdded(chan));

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["a" /* emit */])(this, "channelsadded", channels);
        });
        this._list.addEventListener("useradded", ({ detail: user }) => {
            if (__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][user.type].supports.favorites) {
                this._list.getUsersByType(user.type).then(users => {
                    __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][user.type].updateFavsRequest(users);
                });
            }

            this._manager.onUserAdded(user);
        });
        this._list.addEventListener("beforechanneldeleted", ({ detail }) => {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["a" /* emit */])(this, "beforechanneldeleted", detail);
        });
        this._list.addEventListener("channeldeleted", ({ detail: channel }) => {
            /*
             * Yeah, this is a bit confusing, but that's why there are
             * comments explaining it. So sometimes multiple channels get
             * deleted at once - the channels manager supports multi-selects
             * But they aren't of the same type. So what we want to do, is
             * call the unqueueRequest() for each provider exactly once.
             * To do so, we have to make sure, it only gets called for the
             * last deleted channel of a type. invokeOnce makes sure only
             * when the last "invoker" of invokeOnce is calling it, the
             * method gets executed. Since we have multiple types, there is
             * a map, storing the callback invokeOnce calls for each type.
             * And that's all there is to it. Just to reduce requeueing
             * stuff. Now why should only the last one get invoked?
             * Because getChannelsByType is async, and in the worst case,
             * the one without channels to return returns first, which means
             * an update requests with channels that were deleted would be
             * queued, which would lead to them being readded to the list.
             * So this is all totally needed, especially the length of this
             * very comment is crucial to the operation. For more long
             * comments, explaining stuff, check out the lib/utils module,
             * where invokeOnce is kind of explained.
             */
            if (!deletedTypes.has(channel.type)) {
                deletedTypes.set(channel.type, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_underscore__["partial"])(deleteCallback, channel.type));
            }
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["c" /* invokeOnce */])(channel.id, deletedTypes.get(channel.type));

            this._manager.onChannelRemoved(channel.id);

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["a" /* emit */])(this, "channeldeleted", channel.id);
        });
        this._list.addEventListener("userdeleted", ({ detail: user }) => {
            /* not doing the same mass deletion stuff as for channels, as I
               assume there are less users and it'd mess up the queue's pausing,
               if a user is removed because a channel was deleted.
             */
            if (__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][user.type].supports.favorites) {
                this._list.getUsersByType(user.type).then(users => {
                    if (users.length > 0) {
                        __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][user.type].updateFavsRequest(users);
                    } else {
                        __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][user.type].removeFavsRequest();
                    }
                });
            }

            this._manager.onUserRemoved(user.id);
        });
        this._list.addEventListener("channelupdated", ({ detail: channel }) => {
            this._manager.onChannelUpdated(channel);

            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["a" /* emit */])(this, "channelupdated", channel);
        });
        this._list.addEventListener("userupdated", ({ detail }) => {
            this._manager.onUserUpdated(detail);
        });
        /*this._list.addEventListener("clear", ({ detail: hard }) => {
            if(hard) {
                //TODO swap out the panel and warning state on the button
                showNotificationBox({
                    value: "jtvn-dberased",
                    label: _("lost_channels"),
                    priority: "WARNING_HIGH",
                    persistence: 10,
                    image: self.data.url("./icon18.png"),
                    buttons: [
                        {
                            label: _("manageChannels_label"),
                            onClick: () => this.showManager()
                        }
                    ]
                });
            }
        });
        this._list.addEventListener("unfixableerror", () => {
            //TODO swap out panel and add warning state to button
            showNotificationBox({
                value: "jtvn-restorefailed",
                label: _("restore_failed"),
                priority: "CRITICAL_LOW",
                persistence: 10,
                image: self.data.url("./offline18.png"),
                buttons: [
                    {
                        label: _("restore_action"),
                        onClick: () => tabs.open({ url: REFRESH_PROFILE_URL })
                    }
                ]
            });
        });*/
        // Provider update events

        /**
         * @type module:providers/events.EventSink
         * @private
         */
        this._eventSink = new __WEBPACK_IMPORTED_MODULE_3__providers_events__["a" /* default */]();
        this._eventSink.addEventListener("updateduser", ({ detail }) => {
            this._list.setUser(detail);
        });
        this._eventSink.addEventListener("newchannels", ({ detail: channels }) => {
            channels = filterInapropriateChannels(channels);
            if (channels.length > 0) {
                this._list.addChannels(channels);
            }
        });
        this._eventSink.addEventListener("updatedchannels", ({ detail: channels }) => {
            if (Array.isArray(channels)) {
                channels.forEach(channel => this._list.setChannel(channel).catch(() => this._list.addChannel(channel)));
            } else {
                this._list.setChannel(channels).catch(() => this._list.addChannel(channels));
            }
        });

        const channelsCb = channels => {
            if (channels.length) {
                __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][channels[0].type].updateRequest(channels);
            }
        },
              usersCb = users => {
            if (users.length) {
                __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][users[0].type].updateFavsRequest(users);
            }
        };

        for (const p in __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */]) {
            if (__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][p].enabled) {
                this.getChannelsByType(p).then(channelsCb);
                if (__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][p].supports.favorites) {
                    this.getUsersByType(p).then(usersCb);
                }
            }
        }
    }
    /**
     * Returns a promise that resolves as soon as the ChannelList is ready.
     * Another method in this module that makes magic happen...
     * The promise is resolved with all the arguments this method was called.
     *
     * @param {?} args - Arguments to the callback.
     * @async
     * @private
     * @returns {undefined}
     */

    /**
     * @type {boolean}
     * @private
     */
    _ensureQueueReady(...args) {
        if (!this._ready) {
            return new Promise(resolve => this._queue.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7_underscore__["partial"])(resolve, ...args)));
        } else {
            return Promise.resolve(args);
        }
    }
    /**
     * Get the details of a channel and store them in the ChannelList.
     *
     * @param {string} name - Username of the channel to add.
     * @param {string} type - Type/provider of the channel to add.
     * @param {Funtion} [canceled=() => false] - Canceling checker.
     * @returns {module:channel/core.Channel} Resulting channel object.
     * @throws If the provider is disabled.
     * @throws If parental controls are enabled and the channel is marked mature.
     * @throws If the action is canceled.
     */
    async addChannel(name, type, canceled = () => false) {
        if (type in __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */] && __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][type].enabled) {
            const channel = await __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][type].getChannelDetails(name);
            if (__WEBPACK_IMPORTED_MODULE_6__parental_controls__["a" /* default */].enabled && channel.mature) {
                throw "Not allowed to add this channel";
            }

            await this._ensureQueueReady();

            if (canceled()) {
                throw "Canceled";
            }

            return this._list.addChannel(channel);
        } else {
            throw "Provider is disabled";
        }
    }
    /**
     * Update a channel and store it in the ChannelList.
     *
     * @param {number} channelId - ID of the channel to update.
     * @returns {module:channel/core.Channel?} Updated channel object. May be
     *          null if the provider is disabled.
     */
    async updateChannel(channelId) {
        await this._ensureQueueReady();
        let channel = await this._list.getChannel(channelId);
        if (!__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][channel.type].enabled) {
            return null;
        }

        channel = await __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][channel.type].updateChannel(channel.login);
        return this._list.setChannel(channel);
    }
    /**
     * Update channels by provider. Doesn't update if the provider is disabled.
     *
     * @param {string} [provider=null] - Type of channels to update. All
     *                                   channels are updated if left out.
     * @returns {Array.<module:channel/core.Channel>|module:channel/core.Channel}
     *          List of updated channel objects, if multiple were updated, else
     *          object of the updated channel.
     */
    async updateChannels(provider = null) {
        if (provider === null || !(provider in __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */])) {
            return Promise.all(Object.keys(__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */]).filter(p => __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][p].enabled).map(this.updateChannels.bind(this)));
        } else if (__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][provider].enabled) {
            await this._ensureQueueReady();
            let channels = await this._list.getChannelsByType(provider);

            if (channels.length) {
                channels = await __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][provider].updateChannels(channels);
            }

            if (Array.isArray(channels)) {
                return Promise.all(channels.map(this._list.setChannel.bind(this._list)));
            } else {
                return this._list.setChannel(channels);
            }
        } else {
            return [];
        }
    }
    /**
     * Get a channel.
     *
     * @param {number} channelId - ID of the channel.
     * @returns {module:channel/core.Channel} Channel instance.
     * @async
     */
    getChannel(channelId) {
        return this._ensureQueueReady().then(() => this._list.getChannel(channelId));
    }
    /**
     * Get multiple channels by provider.
     *
     * @param {string} [provider=null] - Type of the channels to return. If
     *                                      left out, all channels are returned.
     * @returns {Array.<module:channel/core.Channel>} List of channels with for
     *          the given type/provider.
     * @async
     */
    getChannelsByType(provider = null) {
        return this._ensureQueueReady().then(() => this._list.getChannelsByType(provider));
    }
    /**
     * Remove a channel from the ChannelList.
     *
     * @param {number} channelId
     * @returns {module:channel/core.Channel} Removed channel.
     * @async
     */
    removeChannel(channelId) {
        return this._ensureQueueReady().then(() => this._list.removeChannel(channelId));
    }
    /**
     * Add a user and its favorites.
     *
     * @param {string} username - Username of the user to add.
     * @param {string} type - Type/provider of the user to add.
     * @param {Function} [canceled=() => false] - Canceling checker.
     * @returns {module:channel/core.User} An array with the added user and an array of added
     *          channels.
     * @throws Gets rejected if the provider doesn't support favorites.
     * @throws When the action is canceled.
     */
    async addUser(username, type, canceled = () => false) {
        if (type in __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */] && __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][type].supports.favorites) {
            let [user, channels] = await __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][type].getUserFavorites(username);
            await this._ensureQueueReady();

            if (canceled()) {
                throw "Canceled";
            }

            if (__WEBPACK_IMPORTED_MODULE_6__parental_controls__["a" /* default */].enabled) {
                channels = channels.filter(c => !c.mature);
            }

            const [u] = await Promise.all([this._list.addUser(user), this._list.addChannels(filterInapropriateChannels(channels))]);
            return u;
        } else {
            throw "Can't add users for provider " + type;
        }
    }
    /**
     * @private
     * @param {module:channel/core.User} user - User instance to update.
     * @async
     * @returns {module:channel/core.User} Updated user.
     */
    async _updateUser(user) {
        const [updatedUser, channels] = await __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][user.type].getUserFavorites(user.login),
              [finalUser] = await Promise.all([this._list.setUser(updatedUser),
        // Can't just call this.addUser(user.login, user.type) because of this.
        this._list.addChannels(filterInapropriateChannels(filterExistingFavs(user, channels)))]);
        return finalUser;
    }
    /**
     * Update a user or all users and add any new favorites.
     *
     * @param {number} [userId] - ID of the user, if not specified updates
     *                            all users.
     * @returns {Array.<module:channel/core.User>} Updated user instances.
     */
    async updateUser(userId) {
        await this._ensureQueueReady();
        let users;
        if (userId) {
            users = [await this._list.getUser(userId)];
        } else {
            users = await this.getUsersByType();
        }

        return Promise.all(users.filter(user => __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][user.type].supports.favorites).map(this._updateUser.bind(this)));
    }
    /**
     * Get all users of the given type.
     *
     * @param {string} [provider=null] - Type the users should be of. If
     *                                        omitted all users are returned.
     * @returns {Array.<module:channel/core.User>} User instances for the given
     *          type/provider.
     * @async
     */
    getUsersByType(provider = null) {
        return this._ensureQueueReady().then(() => this._list.getUsersByType(provider));
    }
    /**
     * Remove a user from the ChannelList and optionally remove the channels it
     * favorited.
     *
     * @param {number} userId - ID of the user to remove.
     * @param {boolean} [removeFavorites=false] - Also remove favorited channels
     *        of the user.
     * @returns {module:channel/core.User} Removed user instance.
     */
    async removeUser(userId, removeFavorites = false) {
        await this._ensureQueueReady();
        let p = Promise.resolve();
        if (removeFavorites) {
            p = this._list.removeChannelsByUserFavorites(userId);
        }
        const [u] = await Promise.all([this._list.removeUser(userId), p]);
        return u;
    }
    /**
     * @private
     * @async
     * @param {string} provider - Provider/type to add credentials for.
     * @param {Array} credentials - Resulting credentials from a search.
     * @returns {Array.<module:channel/core.User>} Added user instances.
     */
    _addFoundCredentials(provider, credentials) {
        return Promise.all(credentials.filter(credential => credential.username).map(credential => {
            console.log(`Found a credential for ${ provider } user ${ credential.username }`);
            return this.addUser(credential.username, provider);
        }));
    }
    /**
     * @private
     * @async
     * @param {string} provider - Provider to search for users.
     * @param {string} url - URL to search for credentials for.
     * @returns {Array.<module:channel/core.User>} Users found for the given url.
     */
    _findUsersByURL(provider, url) {
        return __WEBPACK_IMPORTED_MODULE_10__logins__["a" /* search */]({ url }).then(this._addFoundCredentials.bind(this, provider));
    }
    /**
     * Add users that have stored credentials.
     *
     * @param {string} [provider] - Provider to add users stored in the
     * credentials for. If not provided, all providers are searched.
     * @returns {Array.<module:channel/core.User} Users added based on saved
     *          credentials.
     * @throws If the provider does not support adding users based on credentials.
     * @async
     */
    autoAddUsers(provider) {
        if (!provider || !(provider in __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */])) {
            return Promise.all(Object.keys(__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */]).filter(p => __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][p].supports.credentials).map(this.autoAddUsers.bind(this)));
        } else if (__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][provider].supports.credentials) {
            console.log(`Searching login name for ${ provider }`);
            return Promise.all(__WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][provider].authURL.map(this._findUsersByURL.bind(this, provider))).then(__WEBPACK_IMPORTED_MODULE_7_underscore__["flatten"]);
        } else {
            return Promise.reject(`Provider ${ provider } does not support auto adding users`);
        }
    }
    /**
     * Opens or focueses a tab with the manager.
     *
     * @returns {undefined}
     * @async
     */
    showManager() {
        return this._manager.open();
    }

    /**
     * Set the theme of the channel manager.
     *
     * @param {number} theme - Theme ID to use.
     * @returns {undefined}
     */
    setTheme(theme) {
        this._ensureQueueReady().then(() => this._manager.setTheme(theme));
    }

    /**
     * Copies the stream URL of the given channel to the clipboard.
     *
     * @param {number|string} id - ID or login.
     * @param {string} [type] - Type if not an ID is given.
     * @returns {undefined}
     */
    async copyChannelURL(id, type) {
        let channel;
        if (type) {
            if (!(type in __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */])) {
                throw "Specified type is not known";
            }

            channel = await __WEBPACK_IMPORTED_MODULE_0__providers__["a" /* default */][type].updateChannel(id);
        } else {
            channel = await this._list.getChannel(id);
        }

        const url = channel.live.alternateURL ? channel.live.alternateURL : channel.url[0],
              p = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* when */])(document, "copy");
        document.execCommand("copy", false, null);
        const [e, pattern] = await Promise.all([p, __WEBPACK_IMPORTED_MODULE_9__preferences__["a" /* default */].get("copy_pattern")]);

        e.clipboardData.setData("text/plain", pattern.replace("{URL}", url));
        e.preventDefault();

        return channel;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ChannelController;


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = selectOrOpenTab;
/**
 * @author Martin Giger
 * @license MPL-2.0
 * @module channel/utils
 */

/**
 * Opens the given channel in a new tab, unless there is already a tab open for
 * it.
 *
 * @param {module:channel/core.Channel} channel - The channel to open.
 * @param {string} [what] - Specifies the action to take. "chat" opens the
 *         channel's chat, "archive" opens the archive.
 * @returns {number?} The channel should now be visible for the user.
 */
async function selectOrOpenTab(channel, what) {
    let toCheck = [];

    if (what === "chat") {
        toCheck.push(channel.chatUrl);
    } else if (what === "archive" || !channel.live.isLive()) {
        toCheck.push(channel.archiveUrl);
    } else {
        toCheck = channel.url;

        if (what === "livestreamer") {
            throw "Not supported";
        }
    }

    const tabs = await browser.tabs.query({
        url: toCheck
    });
    if (tabs.length) {
        return browser.tabs.update(tabs[0].id, {
            active: true
        });
    }
    // There's no tab open for the channel
    return browser.tabs.create({ url: toCheck[0] });
}

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__channel_live_state__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__providers__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_event_target_shim__);
/**
 * Model for the Panel.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module list
 * @requires module:channel/utils
 * @requires module:list/firefox
 * @todo coutner badge vs. live state handling change
 */
// setup event handling






/**
 * Should open the ChannelsManager.
 *
 * @event module:list.ListView#opencm
 */
/**
 * Passes two arguments: type and login of the channel to add.
 *
 * @event module:list.ListView#addchannel
 */
/**
 * The user triggered a manual refresh from the list. Optionally holds the ID of
 * the channel to update, else all channels are to be updated.
 *
 * @event module:list.ListView#refresh
 * @type {number?}
 */
/**
 * The user wishes to open the a channel by approriate means. The second
 * parameter specifies the means, like the "what" parameter of
 * {@link module:channel/utils.selectOrOpenTab}.
 *
 * @event module:list.ListView#open
 * @type {number}
 */
/**
 * The user wishes to pause the update queue.
 *
 * @event module:list.ListView#pause
 */
/**
 * The user wishes to resume the update queue.
 *
 * @event module:list.ListView#resume
 */
/**
 * The list is ready for modifications.
 *
 * @event module:list.ListView#ready
 */
/**
 * @typedef Style
 * @type {number}
 */
/**
 * @typedef {number} NonLiveDisplay
 */

const LIVE_ICONS = {
    "16": "assets/images/icon16.png",
    "18": "assets/images/icon18.png",
    "32": "assets/images/icon32.png",
    "36": "assets/images/icon36.png",
    "48": "assets/images/icon48.png",
    "64": "assets/images/icon64.png"
},
      OFFLINE_ICONS = {
    "16": "assets/images/offline16.png",
    "18": "assets/images/offline18.png",
    "32": "assets/images/offline32.png",
    "36": "assets/images/offline36.png",
    "48": "assets/images/offline48.png",
    "64": "assets/images/offline64.png"
},
      _ = browser.i18n.getMessage;

/**
 * @class module:list.ListView
 * @extends external:EventTarget
 */
class ListView extends __WEBPACK_IMPORTED_MODULE_4_event_target_shim___default.a {
    /**
     * @constructs
     * @fires module:list.ListView#opencm
     * @fires module:list.ListView#addchannel
     * @fires module:list.ListView#ready
     * @fires module:list.ListView#open
     * @fires module:list.ListView#refresh
     * @fires module:list.ListView#pause
     * @fires module:list.ListView#resume
     * @alias module:list.ListView
     */

    /**
     * Display non-live channels in their own category.
     * @const {module:list~NonLiveDisplay
     * @default 2
     */


    /**
     * Display non-live channels as live.
     *
     * @const {module:list~NonLiveDisplay}
     * @default 0
     */

    /**
     * @const {module:list~Style}
     * @default 1
     */
    constructor() {
        super();

        this.ready = false;
        this.port = null;
        this._liveState = false;
        this.live = new Set();
        this.nonlive = new Set();

        browser.runtime.onConnect.addListener(port => {
            if (port.name == "list") {
                this._setupPort(port);
            }
        });

        __WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].addEventListener("change", event => {
            if (event.pref == "panel_badge") {
                this.updateBadge();
            }
        }, { passive: false });
    }
    /**
     * Display non-live channels as offline (ignore their liveness). This is handled
     * directly in this module, so the channel gets passed as going offline.
     * @const {module:list~NonLiveDisplay}
     * @default 3
     */

    /**
     * Display non-live channels as live but sort them to the bottom if possible.
     * @const {module:list~NonLiveDisplay}
     * @default 1
     */

    /**
     * @const {module:list~Style}
     * @default 2
     */

    /**
     * @const {module:list~Style}
     * @default 0
     */


    _setupPort(port) {
        this.port = port;

        this.setNonLiveDisplay();
        this.port.onMessage.addListener(event => {
            if (event.target == "openUrl") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "open", event.channelId);
            } else if (event.target == "openChat") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "open", event.channelId, "chat");
            } else if (event.target == "openArchive") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "open", event.channelId, "archive");
            } else if (event.target == "refresh") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "refresh", event.channelId);
            } else if (event.target == "configure") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "opencm");
            } else if (event.target == "add") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "addchannel", event.type, event.login);
            } else if (event.target == "pause") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "pause");
            } else if (event.target == "resume") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "resume");
            } else if (event.target == "ready") {
                this.ready = true;
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "ready");
            } else if (event.target == "search") {
                __WEBPACK_IMPORTED_MODULE_3__providers__["a" /* default */][event.type].search(event.query).then(channels => this.setFeatured(channels.map(c => c.serialize()), event.type, event.query), () => this.setFeatured([], event.type, event.query));
            } else if (event.target == "explore") {
                if (event.type) {
                    __WEBPACK_IMPORTED_MODULE_3__providers__["a" /* default */][event.type].getFeaturedChannels().then(channels => this.setFeatured(channels.map(c => c.serialize()), event.type), () => this.setFeatured([], event.type));
                }
            } else if (event.target == "copy") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "copy", event.channelId);
            } else if (event.target == "copyexternal") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "copy", event.login, event.type);
            } else if (event.target == "removedLive") {
                this._unregisterChannel(event.channelId);
            }
        });

        this.port.onDisconnect.addListener(() => {
            this.port = null;
        });
    }

    _emitToList(event, data) {
        if (this.port) {
            this.port.postMessage({
                target: event,
                data
            });
        }
    }

    get countNonlive() {
        return this.nonLiveDisplay < ListView.DISTINCT;
    }

    async updateBadge() {
        const size = this.live.size + (this.countNonlive ? this.nonlive.size : 0);
        if (size > 0) {
            if (await __WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].get("panel_badge")) {
                browser.browserAction.setBadgeText({
                    text: size.toString()
                });
            } else {
                browser.browserAction.setBadgeText({
                    text: ""
                });
            }

            browser.browserAction.setIcon({
                path: LIVE_ICONS
            });
            browser.browserAction.setTitle({
                title: _("listTooltipLive")
            });
        } else {
            browser.browserAction.setBadgeText({
                text: ""
            });
            browser.browserAction.setIcon({
                path: OFFLINE_ICONS
            });
            browser.browserAction.setTitle({
                title: _("listTooltipOffline")
            });
        }
    }

    _updateChannel(channel) {
        if (channel.live.state == __WEBPACK_IMPORTED_MODULE_2__channel_live_state__["a" /* default */].OFFLINE) {
            this._unregisterChannel(channel.id);
        } else {
            this._registerChannel(channel);
        }
        this.updateBadge();
    }

    _registerChannel(channel) {
        if (channel.live.state == __WEBPACK_IMPORTED_MODULE_2__channel_live_state__["a" /* default */].LIVE) {
            if (this.nonlive.has(channel.id)) {
                this.nonlive.delete(channel.id);
            }
            this.live.add(channel.id);
        } else {
            if (this.live.has(channel.id)) {
                this.live.delete(channel.id);
            }
            this.nonlive.add(channel.id);
        }
    }

    _unregisterChannel(channelId) {
        if (this.live.has(channelId)) {
            this.live.delete(channelId);
        } else if (this.nonlive.has(channelId)) {
            this.nonlive.delete(channelId);
        }

        if (this.live.size === 0 && (!this.countNonlive || this.nonlive.size === 0)) {
            this.liveState = false;
        }
    }

    /**
     * Indicates the live state over all channels.
     *
     * @memberof module:list.ListView
     * @type {boolean}
     */
    get liveState() {
        return this._liveState;
    }
    set liveState(val) {
        this._liveState = val;
        if (!val) {
            this.live.clear();
            this.updateBadge();
        }
    }

    /**
     * Set the style of the list.
     *
     * @param {module:list~Style} style - Style to set.
     * @returns {undefined}
     */
    setStyle(style = this._style) {
        this._style = style;
        this._emitToList("setStyle", style);
    }

    /**
     * Set the visibility of the extras.
     *
     * @param {boolean} visible - Visibility of extras.
     * @returns {undefined}
     */
    setExtrasVisibility(visible = this._extras) {
        this._extras = visible;
        this._emitToList("setExtras", visible);
    }

    /**
     * Set the display type for non-live content.
     *
     * @param {module:list~NonLiveDisplay} style - Display mode of non-live content.
     * @returns {undefined}
     */
    setNonLiveDisplay(style = this.nonLiveDisplay) {
        this.nonLiveDisplay = style;
        this.updateBadge();
        if (this.nonlive.size > 0 && this.live.size === 0 && style < 2) {
            this.liveState = true;
        }

        this._emitToList("setNonLiveDisplay", style);
    }

    /**
     * Add channels to the list. Updates the live state.
     *
     * @param {Array.<module:channel/core.Channel>} channels - Channels to add.
     * @returns {undefined}
     */
    addChannels(channels) {
        if (channels.some(channel => channel.live.isLive())) {
            this.liveState = true;
        }
        channels.forEach(this._updateChannel, this);
        this.updateBadge();
        this._emitToList("addChannels", channels.map(c => c.serialize()));
    }
    /**
     * Remove a channel from the list. Updates the liveState if appropriate.
     *
     * @param {number} channelId - ID of the channel to remove.
     * @returns {undefined}
     */
    removeChannel(channelId) {
        this._unregisterChannel(channelId);
        this._emitToList("removeChannel", channelId);
    }
    /**
     * Mark a channel as live. Also updates the liveState. Can also be user to
     * update the info of a channel.
     *
     * @param {module:channel/core.Channel} channel - Channel to mark live.
     * @returns {undefined}
     */
    setChannelLive(channel) {
        this._updateChannel(channel);
        this._emitToList("setOnline", channel.serialize());
        this.liveState = true;
    }
    /**
     * Mark a channel as offline. Also updates liveState if appropriate.
     *
     * @param {module:channel/core.Channel} channel - Channel to mark offline.
     * @returns {undefined}
     */
    setChannelOffline(channel) {
        this._updateChannel(channel);
        this._emitToList("setOffline", channel.serialize());
    }

    /**
     * Mark a channel as in a distinct state that is not online or offline.
     *
     * @param {module:channel/core.Channel} channel - Channel to give a distinct
     *                                                state to.
     * @returns {undefined}
     */
    setChannelDistinct(channel) {
        this._updateChannel(channel);
        this._emitToList("setDistinct", channel.serialize());
    }

    /**
     * Set the available providers.
     *
     * @param {Object.<module:providers/generic-provider.GenericProvider>} serializedProviders
     *                                                    - Available providers.
     * @returns {undefined}
     */
    setProviders(serializedProviders) {
        this._emitToList("setProviders", serializedProviders);
    }

    /**
     * Indicate if the update queue is running in the background or not.
     *
     * @param {boolean} enabled - If queue is enabled.
     * @returns {undefined}
     */
    setQueueStatus(enabled) {
        this._emitToList("queueStatus", enabled);
    }

    /**
     * Indicate if the queue is temporarily paused.
     *
     * @param {boolean} paused - If queue is paused.
     * @returns {undefined}
     */
    setQueuePaused(paused) {
        this._emitToList("queuePaused", paused);
    }

    /**
     * Set the theme.
     *
     * @param {number} theme - Theme type.
     * @returns {undefined}
     */
    setTheme(theme) {
        this._emitToList("theme", theme);
    }

    /**
     * Something with the channel changed. Performs appropriate actions based on the
     * state of the channel. Updates liveState if appropriate.
     *
     * @param {module:channel/core.Channel} channel - Channel that changed.
     * @returns {undefined}
     */
    onChannelChanged(channel) {
        if (channel.live.state > 0 && this.nonLiveDisplay === ListView.LIVE_DISTINCT) {
            this.setChannelDistinct(channel);
        } else if (channel.live.isLive()) {
            this.setChannelLive(channel);
        } else {
            this.setChannelOffline(channel);
        }
    }

    setFeatured(channels, type, q = null) {
        this._emitToList("setFeatured", { channels, type, q });
    }
}

ListView.STYLE_COMPACT = 0;
ListView.STYLE_NORMAL = 1;
ListView.STYLE_THUMBNAIL = 2;
ListView.LIVE = 0;
ListView.LIVE_BOTTOM = 1;
ListView.DISTINCT = 2;
ListView.OFFLINE = 3;
/* harmony default export */ __webpack_exports__["a"] = ListView;

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_live_state__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__logic__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_event_target_shim__);
/**
 * Model for the Notifications
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module notifier
 */







const _ = browser.i18n.getMessage,


/**
 * Size of the image shown in the notification.
 * @const {number}
 * @default 100
 */
NOTIFICATION_ICON_SIZE = 100;

/**
 * @class module:notifier.Notifier
 * @extends external:EventTarget
 */
class Notifier extends __WEBPACK_IMPORTED_MODULE_4_event_target_shim___default.a {
    /**
     * @constructs
     */
    constructor() {
        super();
        /**
         * The last title of each channel by id the notifier last saw.
         *
         * @type {Map.<number, string>}
         */
        this.channelTitles = new Map();
        /**
         * Proprietary thing I'm too tired to explain, but it stores the relevant
         * info about a channel's current state.
         *
         * @type {Map.<number, object>}
         */
        this.channelStates = new Map();
        browser.notifications.onClicked.addListener(id => {
            if (id.startsWith("cn")) {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["a" /* emit */])(this, "click", id.substr(2));
            }
        });
    }

    /**
     * If online notifications should be shown.
     *
     * @returns {boolean} Show online notifications when true.
     * @async
     */
    onlineNotifications() {
        return __WEBPACK_IMPORTED_MODULE_0__preferences__["a" /* default */].get("onlineNotification");
    }
    /**
     * If title change notifications should be shown.
     *
     * @returns {boolean} Show title change notifications when true.
     * @async
     */
    titleNotifications() {
        return __WEBPACK_IMPORTED_MODULE_0__preferences__["a" /* default */].get("titleChangeNotification");
    }
    /**
     * If offline notifications should be shown.
     *
     * @returns {boolean} Show offline notifications when true.
     * @async
     */
    offlineNotifications() {
        return __WEBPACK_IMPORTED_MODULE_0__preferences__["a" /* default */].get("offlineNotification");
    }
    /**
     * If non-live types are handled like a non-binary state, they get custom
     * notifications when this is set.
     *
     * @returns {boolean} Show non-live notifications when true.
     * @async
     */
    nonliveNotifications() {
        return __WEBPACK_IMPORTED_MODULE_0__preferences__["a" /* default */].get("nonliveNotification");
    }
    /**
     * If any notifications are to be shown.
     *
     * @returns {boolean} Can show notifications when true.
     * @async
     */
    showNotifications() {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__logic__["b" /* or */])(this.onlineNotifications(), this.titleNotifications(), this.offlineNotifications(), this.nonliveNotifications());
    }
    /**
     * Store a channel's state.
     *
     * @param {module:channel/core.Channel} channel - The channel to store.
     * @returns {undefined}
     */
    _setChannelState(channel) {
        this.channelStates.set(channel.id, {
            state: channel.live.state,
            user: channel.live.alternateUsername
        });
    }
    /**
     * Determine if the state of a channel has changed.
     *
     * @param {module:channel/core.Channel} channel - The channel that might
     *                                                have changed.
     * @returns {boolean} When true the channel state changed.
     */
    _channelStateChanged(channel) {
        const oldState = this.channelStates.get(channel.id);
        return oldState === undefined || oldState.state != channel.live.state || channel.live.state > __WEBPACK_IMPORTED_MODULE_1__channel_live_state__["a" /* default */].LIVE && oldState.user != channel.live.alternateUsername;
    }
    async _getLiveInterpretation() {
        if (await this.nonliveNotifications()) {
            return __WEBPACK_IMPORTED_MODULE_1__channel_live_state__["a" /* default */].TOWARD_LIVE;
        } else {
            return __WEBPACK_IMPORTED_MODULE_1__channel_live_state__["a" /* default */].TOWARD_OFFLINE;
        }
    }
    /**
     * Show a notification to the user, if the channel isn't in the currently
     * active tab, the channel changed accordingly and the respective
     * notification is activated.
     * This also manages the {@link module:notifier.Notifier~channelTitles} Map.
     *
     * @param {module:channel/core.Channel} channel - The channel to show a
     *                                                notification for.
     * @returns {undefined}
     */
    async sendNotification(channel) {
        // Mute notifications for the current tab
        const [tab, showNotifications] = await Promise.all([browser.tabs.query({
            active: true,
            currentWindow: true,
            url: channel.url
        }), this.showNotifications()]);

        if (showNotifications && !tab.length) {
            const liveInterpretation = await this._getLiveInterpretation();
            let title = null;
            if ((await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__logic__["c" /* and */])(channel.live.isLive(__WEBPACK_IMPORTED_MODULE_1__channel_live_state__["a" /* default */].TOWARD_OFFLINE), this.onlineNotifications())) && this._channelStateChanged(channel)) {
                title = _("onlineNotification", channel.toString());
            } else if ((await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__logic__["c" /* and */])(channel.live.isLive(liveInterpretation), this.titleNotifications(), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__logic__["b" /* or */])(channel.live.state === __WEBPACK_IMPORTED_MODULE_1__channel_live_state__["a" /* default */].LIVE, this.nonliveNotifications()))) && !this._channelStateChanged(channel) && this.channelTitles.get(channel.id) != channel.title) {
                title = _("updateNotification", channel.toString());
            } else if ((await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__logic__["c" /* and */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__logic__["a" /* not */])(channel.live.isLive(liveInterpretation)), this.offlineNotifications())) && this.channelTitles.has(channel.id)) {
                title = _("offlineNotification", channel.toString());
            } else if (channel.live.state > __WEBPACK_IMPORTED_MODULE_1__channel_live_state__["a" /* default */].LIVE && (await this.nonliveNotifications()) && this._channelStateChanged(channel)) {
                const stateName = __WEBPACK_IMPORTED_MODULE_1__channel_live_state__["a" /* default */].REDIRECT === channel.live.state ? "Redirect" : "Rebroadcast";
                title = _("nonliveNotification", [channel.toString(), _("nonliveNotificationState" + stateName, channel.live.alternateUsername)]);
            }

            if (title !== null) {
                const opts = {
                    type: "basic",
                    title,
                    message: channel.title,
                    iconUrl: channel.getBestImageForSize(NOTIFICATION_ICON_SIZE)
                };

                browser.notifications.create(`cn${ channel.id }`, opts);
            }
        }

        if (await channel.live.isLive()) {
            this.channelTitles.set(channel.id, channel.title);
        } else {
            this.channelTitles.delete(channel.id);
        }

        this._setChannelState(channel);
    }
    /**
     * Callback to call, whenever an event gets removed. This removes the
     * channel from the internal map.
     *
     * @param {number} channelId - ID of the channel that was removed.
     * @returns {undefined}
     */
    onChannelRemoved(channelId) {
        if (this.channelTitles.has(channelId)) {
            this.channelTitles.delete(channelId);
        }
        if (this.channelStates.has(channelId)) {
            this.channelStates.delete(channelId);
        }
    }

    /**
     * Notify the user, that the string has been copied to the clipboard.
     *
     * @param {string} channelName - Name of the channel that was copied.
     * @returns {undefined}
     */
    notifyCopied(channelName) {
        browser.notifications.create("copy", {
            type: "basic",
            title: _("copyNotification", channelName),
            iconURL: "../images/icon64.png"
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Notifier;


/***/ }),
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(0);
/**
 * Creates a dump of the whole channel list and other relevant settings and
 * can copy it to the clipboard.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module channel/dump
 */




const PREFS_MAPPING = Object.freeze({
    queue: Object.freeze({
        interval: "updateInterval",
        ratio: "queue_ratio",
        maxAmount: "queue_maxRequestBatchSize",
        maxRetries: "queueservice_maxRetries"
    }),
    panel: Object.freeze({
        style: "panel_style",
        extras: "panel_extras",
        width: "panel_minWidth",
        height: "panel_maxHeight",
        badge: "panel_badge"
    }),
    misc: Object.freeze({
        cacheTime: "channellist_cacheTime",
        findMature: "find_mature"
    })
});
/* unused harmony export PREFS_MAPPING */


/**
 * Frozen
 *
 * @typedef {Object} DataDump
 * @property {Array.<Object>} channels - Serialized channels
 * @property {Array.<Object>} users - Serialized users
 * @property {Object} prefs - Collection of important preferences
 * @property {Object} meta - System information
 */

/**
 * Creates a JSON serialized dump of all importand extension data.
 *
 * @param {Array.<module:channel/core.Channel>} channels - Channels to dump.
 * @param {Array.<module:channel/core.User>} users - Users to dump.
 * @returns {module:channel/dump~DataDump} Serialized data dump.
 * @async
 */
const create = async (channels, users) => {
    const p = {};
    const promises = [];
    for (let branch in PREFS_MAPPING) {
        p[branch] = {};
        for (let name in PREFS_MAPPING[branch]) {
            promises.push(__WEBPACK_IMPORTED_MODULE_0__preferences__["a" /* default */].get(PREFS_MAPPING[branch][name]).then(value => {
                p[branch][name] = value;
            }));
        }
    }

    await Promise.all(promises);

    for (let branch in p) {
        Object.freeze(p[branch]);
    }

    const platform = await browser.runtime.getPlatformInfo();
    const manifest = browser.runtime.getManifest();

    const debugDump = {
        channels: channels.map(c => c.serialize()),
        users: users.map(u => u.serialize()),
        prefs: Object.freeze(p),
        meta: Object.freeze({
            version: manifest.version,
            platform: platform.os,
            platformArch: platform.arch,
            language: browser.i18n.getUILanguage(),
            lastError: browser.runtime.lastError
        })
    };
    Object.freeze(debugDump);

    return debugDump;
};
/* unused harmony export create */


/**
 * Creates and copies the data dump to the clipboard.
 *
 * @param {Array.<module:channel/core.Channel>} channels - Channels to dump.
 * @param {Array.<module:channel/core.User>} users - Users to dump.
 */
const copy = async (channels, users) => {
    const data = await exports.create(channels, users),
          p = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils__["d" /* when */])(document, "copy");
    document.execCommand("copy", false, null);
    const e = await p;

    e.clipboardData.setData("application/json", JSON.stringify(data, null, 2));
    e.preventDefault();
    console.log("Data dump copied to clipboard");
};
/* harmony export (immutable) */ __webpack_exports__["a"] = copy;


/**
 * @typedef {Object} ChannelsAndUsers
 * @property {Array.<module:channel/core.Channel>} channels
 * @property {Array.<module:channel/core.User>} users
 */

/**
 * Loads a data dump's data into the extension. Applies dumped settings
 * directly.
 *
 * @param {module:channel/dump~DataDump} debugDump - Dump to decode.
 * @returns {module:channel/dump~ChannelsAndUsers} Deserialized channels and
 *          users.
 * @async
 */
const load = debugDump => {
    const promises = [];
    for (let branch in debugDump.prefs) {
        for (let name in debugDump.prefs[branch]) {
            promises.push(__WEBPACK_IMPORTED_MODULE_0__preferences__["a" /* default */].set(PREFS_MAPPING[branch][name], debugDump.prefs[branch][name]));
        }
    }

    return {
        channels: debugDump.channels.map(c => __WEBPACK_IMPORTED_MODULE_1__core__["b" /* Channel */].deserialize(c)),
        users: debugDump.users.map(u => __WEBPACK_IMPORTED_MODULE_1__core__["a" /* User */].deserialize(u))
    };
};
/* unused harmony export load */


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__live_state__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_event_target_shim__);
/**
 * Channel list Object.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module channel/list
 * @requires module:channel/core
 */
// setup event handling






/**
 * IndexedDB version.
 *
 * @const {number}
 * @default 2
 */
const VERSION = 2,


/**
 * Database name.
 *
 * @const {string}
 * @default "channellist"
 */
NAME = "channellist";

/**
 * The ChannelList is ready to be used.
 *
 * @event module:channel/list.ChannelList#ready
 */
/**
 * Whenever one or more channels are added to the ChannelList this event is
 * fired.
 *
 * @event module:channel/list.ChannelList#channelsadded
 * @type {Array.<module:channel/core.Channel>}
 */
/**
 * Whenever a user is added to the ChannelList this event is fired.
 *
 * @event module:channel/list.ChannelList#useradded
 * @type {module:channel/core.User}
 */
/**
 * @event module:channel/list.ChannelList#channelupdated
 * @type {module:channel/core.Channel}
 */
/**
 * @event module:channel/list.ChannelList#userupdated
 * @type {module:channel/core.User}
 */
/**
 * Gets fired before a channel is deleted.
 *
 * @event module:channel/list.ChannelList#beforechanneldeleted
 * @type {number}
 */
/**
 * Gets fired after a channel was deleted.
 *
 * @event module:channel/list.ChannelList#channeldeleted
 * @type {module:channel/core.Channel}
 */
/**
 * @event module:channel/list.ChannelList#userdeleted
 * @type {module:channel/core.User}
 */
/**
 * Fired when all content of the ChannelList is removed. If the first argument
 * is true, the whole DB has been deleted and recreated, most likely to fix it.
 *
 * @event module:channel/list.ChannelList#clear
 * @type {boolean}
 */
/**
 * The database could not be repaired.
 *
 * @event module:channel/list.ChannelList#unfixableerror
 */
/**
 * The datbase was fixed, but all the content was list in the process. User
 * might want to re-add content.
 *
 * @event module:channel/list.ChannelList#fixdb
 */

/**
 * @class module:channel/list.ChannelList
 * @extends external:EventTarget
 */
class ChannelList extends __WEBPACK_IMPORTED_MODULE_4_event_target_shim___default.a {
    /**
     * @constructs
     * @fires module:channel/list.ChannelList#ready
     */

    /**
     * Reference to the DB
     *
     * @type {IndexedDB?}
     */
    constructor() {
        super();

        this.db = null;
        this._openingDB = null;
        this.idCache = new Map();

        this.openDB(NAME);
    }

    /**
     * Opens the DB, initializes the schema if it's a new DB or sets channels
     * offline that were online and have last been updated a certain time ago.
     *
     * @param {string} name - Name of the DB to open.
     * @param {boolean} [dontTry=false] - Don't try to fix the DB.
     * @async
     * @fires module:channel/list.ChannelList#ready
     * @fires module:channel/list.ChannelList#fixdb
     * @returns {undefined} The DB is ready.
     * @throws Could not open the DB.
     */

    /**
     * Holds a promise until the DB is being opened.
     *
     * @type {Promise?}
     */
    openDB(name, dontTry = false) {
        console.log(`ChannelList.openDB(${ name },${ dontTry })`);
        // Quick path if DB is already opened.
        if (this.db) {
            return Promise.resolve();
        } else if (this._openingDB !== null) {
            return this._openingDB;
        }

        this._openingDB = new Promise((resolve, reject) => {
            // Try to open the DB
            const request = window.indexedDB.open(name, VERSION);
            request.onupgradeneeded = e => {
                this.db = e.target.result;

                const users = this.db.createObjectStore("users", { keyPath: "id", autoIncrement: true });
                users.createIndex("typename", ["type", "login"], { unique: true });
                users.createIndex("type", "type", { unique: false });
                //users.createIndex("id", "id", { unique: true });
                const channels = this.db.createObjectStore("channels", { keyPath: "id", autoIncrement: true });
                channels.createIndex("typename", ["type", "login"], { unique: true });
                channels.createIndex("type", "type", { unique: false });
                //channels.createIndex("id", "id", { unique: true });
            };

            // DB is ready
            request.onsuccess = e => {
                this.db = e.target.result;

                __WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].get("channellist_cacheTime").then(cacheTime => {
                    // Set all channels to offline, that haven't been updated in a certain time.
                    const transaction = this.db.transaction("channels", "readwrite"),
                          store = transaction.objectStore("channels"),
                          minDate = Date.now() - cacheTime,
                          //now - 10 min
                    req = store.index("typename").openCursor();

                    req.onsuccess = event => {
                        const cursor = event.target.result;

                        if (cursor) {
                            this.idCache.set(cursor.value.type + cursor.value.login, cursor.value.id);
                            if (cursor.value.lastModified < minDate) {
                                cursor.value.live.state = __WEBPACK_IMPORTED_MODULE_3__live_state__["a" /* default */].OFFLINE;
                                cursor.update(cursor.value);
                            }
                            cursor.continue();
                        } else {
                            resolve();
                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "ready");
                        }
                    };
                });
            };

            /* istanbul ignore next */
            request.onerror = () => {
                if (!dontTry) {
                    if (this.db) {
                        this.db.close();
                        delete this.db;
                    }
                    resolve(this.clear().catch(e => {
                        console.error("Couldn't delete the DB");
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "unfixableerror");
                        throw e;
                    }));
                } else {
                    console.error(request.error);
                    reject();
                }
            };
        });
        // Clear it once the promise is done.
        this._openingDB.then(() => {
            this._openingDB = null;
        }, () => {
            this._openingDB = null;
        });
        return this._openingDB;
    }

    /**
     * Gets the ID of a channel, if it is in the ChannelList.
     *
     * @param {string} name - Login of the channel.
     * @param {string} type - Type of the channel.
     * @async
     * @returns {number} The ID of the channel if it exists.
     */
    getChannelId(name, type) {
        console.info("ChannelList.getChannelId(" + name + "," + type + ")");
        return new Promise((resolve, reject) => {
            if (this.idCache.has(type + name)) {
                console.warn("HIT ID CACHE");
                resolve(this.idCache.get(type + name));
            } else {
                const transaction = this.db.transaction("channels"),
                      index = transaction.objectStore("channels").index("typename"),
                      req = index.get([type, name]);
                req.onsuccess = () => {
                    if (req.result) {
                        this.idCache.set(type + name, req.result.id);
                        resolve(req.result.id);
                    } else {
                        reject();
                    }
                };
                req.onerror = reject;
            }
        });
    }

    /**
     * Gets the ID of a user, if it is in the ChannelList.
     *
     * @param {string} name - Login of the user.
     * @param {string} type - Type of the user.
     * @async
     * @returns {number} The ID of the user (if it exsits).
     */
    getUserId(name, type) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("users"),
                  index = transaction.objectStore("users").index("typename"),
                  req = index.get([type, name]);
            req.onsuccess = () => {
                if (req.result) {
                    resolve(req.result.id);
                } else {
                    reject();
                }
            };
            req.onerror = reject;
        });
    }

    /**
     * Get the specified channel.
     *
     * @param {(number|string)} id - ID of login of the channel.
     * @param {string} [type] - Type of the channel if a login was passed as
     *                             first argument.
     * @returns {module:channel/core.Channel}
     * @throws The channel doesn't exist or no arguments passed.
     */
    async getChannel(id, type) {
        console.info("ChannelList.getChannel(" + id + ")");
        if (type) {
            id = await this.getChannelId(id, type);
        }
        if (!id) {
            throw "No ID specified";
        }

        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("channels"),
                  store = transaction.objectStore("channels"),
                  req = store.get(id);

            req.onsuccess = () => {
                if (req.result) {
                    resolve(__WEBPACK_IMPORTED_MODULE_2__core__["b" /* Channel */].deserialize(req.result));
                } else {
                    reject();
                }
            };
            req.onerror = reject;
        });
    }

    /**
     * Get the specified user.
     *
     * @param {(number|string)} id - ID of login of the user.
     * @param {string} [type] - Type of the user if a login was passed as first
     *                             argument.
     * @returns {module:channel/core.User}
     * @throws The user doesn't exist or no arguments passed.
     */
    async getUser(id, type) {
        if (type) {
            id = await this.getUserId(id, type);
        }

        if (!id) {
            throw "No ID specified";
        }

        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("users"),
                  store = transaction.objectStore("users"),
                  req = store.get(id);

            req.onsuccess = () => {
                if (req.result) {
                    resolve(__WEBPACK_IMPORTED_MODULE_2__core__["a" /* User */].deserialize(req.result));
                } else {
                    reject();
                }
            };
            req.onerror = reject;
        });
    }

    /**
     * Add a channel to the list.
     *
     * @param {module:channel/core.Channel} channel - The channel to add.
     * @throws {string} If the channel is already in the list.
     * @fires module:channel/list.ChannelList#channelsadded
     * @returns {module:channel/core.Channel} Added channel with the ID set.
     */
    async addChannel(channel) {
        console.info("ChannelList.addChannel(" + channel.login + ")");
        channel.lastModified = Date.now();

        if (await this.channelExists(channel.login, channel.type)) {
            throw "Channel already exists";
        }

        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("channels", "readwrite"),
                  store = transaction.objectStore("channels"),
                  req = store.add(channel.serialize());

            req.onsuccess = () => {
                channel.id = req.result;
                this.idCache.set(channel.type + channel.login, channel.id);
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "channelsadded", [channel]);
                resolve(channel);
            };
            req.onerror = reject;
        });
    }

    /**
     * Add multiple channels to the list.
     *
     * @param {Array.<module:channel/core.Channel>} channels - The channels to add.
     * @fires module:channel/list.ChannelList#channelsadded
     * @async
     * @returns {Array.<module:channel/core.Channel>} Added channels with their ID set.
     */
    addChannels(channels) {
        console.info("ChannelList.addChannels(channels)");
        if (channels instanceof __WEBPACK_IMPORTED_MODULE_2__core__["b" /* Channel */]) {
            return this.addChannel(channels).then(channel => [channel]);
        } else if (Array.isArray(channels)) {
            if (channels.length == 1) {
                return this.addChannel(channels[0]).then(channel => [channel]);
            } else if (channels.length > 1) {
                return new Promise(resolve => {
                    const transaction = this.db.transaction("channels", "readwrite"),
                          store = transaction.objectStore("channels"),
                          index = store.index("typename"),
                          addedChannels = [];
                    channels.forEach((channel, i) => {
                        const ireq = index.get([channel.type, channel.login]);
                        ireq.onsuccess = () => {
                            if (!ireq.result) {
                                console.log("Adding channel " + channel.login);
                                channel.lastModified = Date.now();
                                const req = store.add(channel.serialize());
                                req.onsuccess = () => {
                                    channels[i].id = req.result;
                                    this.idCache.set(channel.type + channel.login, req.result);
                                    addedChannels.push(channels[i]);
                                };
                                /* istanbul ignore next */
                                req.onerror = () => {
                                    console.error(req.error);
                                };
                            } else {
                                console.log("Channel " + channel.login + " has already been added");
                            }
                        };
                    }, this);
                    transaction.oncomplete = () => {
                        if (addedChannels.length > 0) {
                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "channelsadded", addedChannels);
                        }
                        resolve(addedChannels);
                    };
                });
            }
        }
        return Promise.resolve([]);
    }

    /**
     * Add a user to the list.
     *
     * @param {module:channel/core.User} user - The channel to add.
     * @fires module:channel/list.ChannelList#useradded
     * @returns {module:channel/core.User} The newly added User with ID.
     */
    async addUser(user) {
        if (await this.userExists(user.login, user.type)) {
            throw "User already exists";
        }

        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("users", "readwrite"),
                  store = transaction.objectStore("users"),
                  req = store.add(user.serialize());

            req.onsuccess = () => {
                user.id = req.result;
                resolve(user);
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "useradded", user);
            };
            req.onerror = reject;
        });
    }

    /**
     * Change the data of a channel.
     *
     * @param {module:channel/core.Channel} channel - The new data for the channel.
     * @fires module:channel/list.ChannelList#channelupdated
     * @returns {module:channel/core.Channel} The new version of the channel.
     */
    async setChannel(channel) {
        console.info("ChannelList.setChannel(" + channel.id + ")");
        if (!("id" in channel)) {
            channel.id = await this.getChannelId(channel.login, channel.type);
        }

        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("channels", "readwrite"),
                  store = transaction.objectStore("channels");

            channel.lastModified = Date.now();

            const req = store.put(channel.serialize());

            req.onsuccess = () => {
                this.idCache.set(channel.type + channel.login, req.result);
                channel.id = req.result; //TODO was there a reason to fetch the channel here?
                resolve(channel);
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "channelupdated", channel);
            };
            req.onerror = reject;
        });
    }

    /**
     * Change the data of a user.
     *
     * @param {module:channel/core.User} user - The new data for the user.
     * @fires module:channel/list.ChannelList#userupdated
     * @returns {module:channel/core.User} The new version of the user stored
     *                                      in the ChannelList.
     */
    async setUser(user) {
        if (!("id" in user)) {
            user.id = await this.getUserId(user.login, user.type);
        }
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("users", "readwrite"),
                  store = transaction.objectStore("users"),
                  req = store.put(user.serialize());

            req.onsuccess = () => {
                user.id = req.result;
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "userupdated", user);
                resolve(user);
            };
            req.onerror = reject;
        });
    }

    /**
     * Remove a channel from the list. Also removes all users that have this channel
     * as favorite.
     *
     * @param {(number|string)} id - ID or login of the channel to remove.
     * @param {string} [type] - Type of the channel if no ID was passed.
     * @fires module:channel/list.ChannelList#beforechanneldeleted
     * @fires module:channel/list.ChannelList#channeldeleted
     * @returns {module:channel/core.Channel} Resolves to the removed channel.
     */
    async removeChannel(id, type) {
        console.info("ChannelList.removeChannel(" + id + ")");
        if (type) {
            id = await this.getChannelId(id, type);
        }

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "beforechanneldeleted", id);
        const channel = await this.getChannel(id);
        await Promise.all([this.removeUsersWithFavorite(id), new Promise((resolve, reject) => {
            const transaction = this.db.transaction("channels", "readwrite"),
                  store = transaction.objectStore("channels"),
                  req = store.delete(id);
            console.log("queued deletion");

            req.onsuccess = () => {
                this.idCache.delete(channel.type + channel.login);
                resolve(channel);
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "channeldeleted", channel);
            };
            req.onerror = reject;
        })]);

        return channel;
    }

    /**
     * Remove a user from the list.
     *
     * @param {(number|string)} id - ID or login of the user to remove.
     * @param {string} [type] - Type of the user if no ID was passed.
     * @fires module:channel/list.ChannelList#userdeleted
     * @returns {module:channel/core.User} Resolves to the removed user.
     */
    async removeUser(id, type) {
        const user = await this.getUser(id, type);
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("users", "readwrite"),
                  store = transaction.objectStore("users"),
                  req = store.delete(user.id);

            req.onsuccess = () => {
                resolve(user);
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "userdeleted", user);
            };
            req.onerror = reject;
        });
    }

    /**
     * Check if a channel is in the ChannelList.
     *
     * @param {(number|string)} id - ID or login of the channel.
     * @param {string} [type] - Type of the channel if no ID was passed.
     * @async
     * @returns {boolean} Resolves to a boolean indicating if the channel exists.
     */
    channelExists(id, type) {
        console.info("ChannelList.channelExists(", id, ",", type, ")");
        return this.getChannel(id, type).then(channel => !!channel, () => false);
    }

    /**
     * Check if a user is in the ChannelList.
     *
     * @param {(number|string)} id - ID or login of the user.
     * @param {string} [type] - Type of the user if no ID was passed.
     * @async
     * @returns {boolean} Resolves to a boolean indicating if the user exists.
     */
    userExists(id, type) {
        console.info("ChannelList.userExists(", id, ",", type, ")");

        return this.getUser(id, type).then(channel => !!channel, () => false);
    }

    /**
     * Get the live status of the ChannelList as a whole.
     *
     * @param {string} [type] - Check the live state of just the channels of the
     *                             specified type.
     * @todo make live an index and then get all the channels that are live and
     *       count those. That should be slightly faster than this O(n)
     *       operation on the array of all channels.
     * @returns {boolean} Resolves to a boolean indicating, if there are any live
     *                   channels.
     */
    async liveStatus(type) {
        const channels = await this.getChannelsByType(type);
        return channels.some(channel => channel.live.isLive());
    }

    /**
     * Get all channels with the specified type.
     *
     * @param {string} [type] - Type all the channels should have. If left out,
     *                             all channels are returned.
     * @async
     * @returns {Array.<module:channel/core.Channel>}
     */
    getChannelsByType(type) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("channels"),
                  store = transaction.objectStore("channels"),
                  retchans = [];

            transaction.onerror = reject;

            if (!type) {
                store.index("typename").openCursor().onsuccess = event => {
                    const cursor = event.target.result;

                    if (cursor) {
                        retchans.push(__WEBPACK_IMPORTED_MODULE_2__core__["b" /* Channel */].deserialize(cursor.value));
                        cursor.continue();
                    } else {
                        resolve(retchans);
                    }
                };
            } else {
                const keyRange = IDBKeyRange.only(type),
                      index = store.index("type");

                index.openCursor(keyRange).onsuccess = event => {
                    const cursor = event.target.result;

                    if (cursor) {
                        retchans.push(__WEBPACK_IMPORTED_MODULE_2__core__["b" /* Channel */].deserialize(cursor.value));
                        cursor.continue();
                    } else {
                        resolve(retchans);
                    }
                };
            }
        });
    }

    /**
     * Get all users in the ChannelList with a certain type.
     *
     * @param {string} [type] - The type all returned users should have. If left
     *                             out all users are returned.
     * @async
     * @returns {Array.<module:channel/core.User>}
     */
    getUsersByType(type) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction("users"),
                  store = transaction.objectStore("users"),
                  retusrs = [];

            transaction.onerror = reject;

            if (!type) {
                store.index("typename").openCursor().onsuccess = event => {
                    const cursor = event.target.result;

                    if (cursor) {
                        retusrs.push(__WEBPACK_IMPORTED_MODULE_2__core__["a" /* User */].deserialize(cursor.value));
                        cursor.continue();
                    } else {
                        resolve(retusrs);
                    }
                };
            } else {
                const keyRange = IDBKeyRange.only(type),
                      index = store.index("type");

                index.openCursor(keyRange).onsuccess = event => {
                    const cursor = event.target.result;

                    if (cursor) {
                        retusrs.push(__WEBPACK_IMPORTED_MODULE_2__core__["a" /* User */].deserialize(cursor.value));
                        cursor.continue();
                    } else {
                        resolve(retusrs);
                    }
                };
            }
        });
    }

    /**
     * Get all users that have the given channel as a favorite.
     *
     * @param {module:channel/core.Channel} channel - Channel to search users's
     *                                                  favorites for.
     * @returns {Array.<module:channel/core.User>}
     */
    async getUsersByFavorite(channel) {
        const users = await this.getUsersByType(channel.type);
        return users.filter(user => {
            console.log("Scanning user " + user.login + " with the favorites " + user.favorites);
            return user.favorites.indexOf(channel.login) !== -1;
        });
    }

    /**
     * Remove all users that have the given channel as favorite.
     *
     * @param {number} channelId - ID of the channel that users have favorited.
     * @fires module:channel/list.ChannelList#userdeleted
     * @returns {Array.<module:channel/core.User>}
     */
    async removeUsersWithFavorite(channelId) {
        const channel = await this.getChannel(channelId);
        const users = await this.getUsersByFavorite(channel);
        return Promise.all(users.map(user => {
            console.log("Removing user " + user.login + " because he follows " + channel.login);
            return this.removeUser(user.id);
        }));
    }

    /**
     * Get all channels that are favorited by a user.
     *
     * @param {module:channel/core.User} user - User to get the favorites of.
     * @returns {Array.<module:channel/core.Channel>}
     */
    async getChannelsByUserFavorites(user) {
        const channels = await this.getChannelsByType(user.type);
        return channels.filter(channel => {
            return user.favorites.some(channame => channame == channel.login);
        });
    }

    /**
     * Remove all channels that are favorited by a user.
     *
     * @param {number} userId - ID of the user whose favorites should be removed.
     * @fires module:channel/list.ChannelList#channeldeleted
     * @fires module:channel/list.ChannelList#beforechanneldeleted
     * @returns {Array.<module:channel/core.Channel>}
     */
    async removeChannelsByUserFavorites(userId) {
        const user = await this.getUser(userId),
              channels = await this.getChannelsByUserFavorites(user);
        return Promise.all(channels.map(channel => {
            return this.removeChannel(channel.id);
        }));
    }

    /**
     * Clear all contents of the ChannelList. Sometimes reinitializes the DB from
     * scratch.
     *
     * @fires module:channel/list.ChannelList#clear
     * @fires module:channel/list.ChannelList#ready
     * @async
     * @returns {boolean} If true the DB was deleted.
     */
    clear() {
        console.info("ChannelList.clear");

        const done = (hard = false) => {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "clear", hard);
            return Promise.resolve(hard);
        };

        if (this.db) {
            console.info("Clearing object stores");
            const transaction = this.db.transaction(["channels", "users"], "readwrite"),
                  channels = transaction.objectStore("channels"),
                  users = transaction.objectStore("users"),
                  chanPromise = new Promise((resolve, reject) => {
                const chanReq = channels.clear();
                chanReq.onerror = reject;
                chanReq.onsuccess = resolve;
            }),
                  usrPromise = new Promise((resolve, reject) => {
                const usrReq = users.clear();
                usrReq.onerror = reject;
                usrReq.onsuccess = resolve;
            });
            return Promise.all([chanPromise, usrPromise]).then(() => done(false));
        } else {
            console.log("Deleting and reinitializing the DB");
            /*
             * This is the slower path, so we avoid it. It needs all transactions
             * to be done in order to slowly erase the whole DB from the disk, just
             * to reinitialize it afterward.
             */
            const promise = new Promise((resolve, reject) => {
                const request = indexedDB.deleteDatabase(NAME);

                request.onerror = reject;
                request.onsuccess = () => resolve();
                /* istanbul ignore next */
                request.onblocked = () => console.log("Deleting database was blocked");
            });

            // Reopen the DB after it's been cleared. Don't try to fix it, if it
            // doesn't want to open.
            return promise.then(() => done(true)).then(() => this.openDB(NAME, true)).then(() => true);
        }
    }

    /**
     * Close the DB.
     *
     * @async
     * @returns {undefined} DB is being deleted, or may already be deleted.
     */
    close() {
        return new Promise(resolve => {
            if (this.db) {
                this.db.close();
                this.db = null;
                resolve();
            } else {
                resolve();
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ChannelList;


/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_event_target_shim__);
/**
 * Model for the channels manager component.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module channel/manager
 */



/**
 * Store a channel. Listeners should call
 * {@link module:channel/manager.ChannelsManager#onChannelAdded} once the
 * channel was added.
 *
 * @event module:channel/manager.ChannelsManager#addchannel
 * @type {string}
 */
/**
 * Remove a channel (given by its ID) and all users that have it as favorite.
 * Listeners should call
 * {@link module:channel/manager.ChannelsManager#onChannelRemoved} once the
 * channel has been removed.
 *
 * @event module:channel/manager.ChannelsManager#removechannel
 * @type {number}
 */
/**
 * Update a channel (given by its ID). Listeners shoudl call
 * {@link module:channel/manager.ChannelsManager#onChannelUpdated} once the
 * channels has been updated.
 *
 * @event module:channel/manager.ChannelsManager#updatechannel
 * @type {number}
 */
/**
 * Store a user. Listeners should call
 * {@link module:channel/manager.ChannelsManager#onUserAdded} once the user has
 * been added.
 *
 * @event module:channel/manager.ChannelsManager#adduser
 * @type {string}
 */
/**
 * Remove a user (given by it ID). If the second argument is true, delete all
 * its favorited channels, too. Listeners should call
 * {@link module:channel/manager.ChannelsManager#onUserRemoved} once the user
 * was removed.
 *
 * @event module:channel/manager.ChannelsManager#removeuser
 * @type {number}
 */
/**
 * Update the favorites of the given user (by ID) or all users, if no ID was
 * specified. Should call the approriate update callbacks on the ChannelsManager
 * once done.
 *
 * @event module:channel/manager.ChannelsManager#updatefavorites
 * @type {number}
 */
/**
 * Search for accounts of the user on supported sites.
 *
 * @event module:channel/manager.ChannelsManager#autoadd
 *
 */
/**
 * Add all existing channels and users via the on callbacks.
 *
 * @event module:channel/manager.ChannelsManager#getdata
 */
/**
 * Shift clicked help button to export debug info.
 *
 * @event module:channel/manager.ChannelsManager#debugdump
 */
/**
 * Show add-on options.
 *
 * @event module:channel/manager.ChannelsManager#showoptions
 */

/**
 * @class
 * @extends external:EventTarget
 */
class ChannelsManager extends __WEBPACK_IMPORTED_MODULE_1_event_target_shim___default.a {
    /**
     * @constructs
     * @fires module:channel/manager.ChannelsManager#addchannel
     * @fires module:channel/manager.ChannelsManager#removechannel
     * @fires module:channel/manager.ChannelsManager#updatechannel
     * @fires module:channel/manager.ChannelsManager#adduser
     * @fires module:channel/manager.ChannelsManager#removeuser
     * @fires module:channel/manager.ChannelsManager#updatefavorites
     * @fires module:channel/manager.ChannelsManager#autoadd
     * @fires module:channel/manager.ChannelsManager#getdata
     * @fires module:channel/manager.ChannelsManager#debugdump
     * @fires module:channel/manager.ChannelsManager#showoptions
     */
    constructor() {
        super();

        this._loading = true;
        this.port = null;
        this.tabID = null;
        this.cancelingValues = new Map();

        browser.runtime.onConnect.addListener(port => {
            if (port.name == "manager") {
                this._setupPort(port);
            }
        });
    }
    /**
     * @type {boolean}
     * @private
     */
    get loading() {
        return this._loading;
    }
    set loading(val) {
        if (this._loading != val) {
            this._loading = val;
            if (val) {
                this._emitToWorker("isloading");
            } else {
                this._emitToWorker("doneloading");
            }
        }
    }
    _setupPort(port) {
        console.log("[Manager]> Attached");
        const isSecondary = this.port !== null;

        if (!isSecondary) {
            this.port = port;
            this.tabID = port.sender.tab.id;
            this.loading = true;
        }

        port.onDisconnect.addListener(() => {
            this.port = null;
            this.tabID = null;
        });

        port.onMessage.addListener(message => {
            if (message.target == "ready") {
                if (isSecondary) {
                    this._emitToWorker("secondary");
                } else {
                    console.log("[Manager]> Page ready");
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "getdata");
                }
            } else if (isSecondary && message.target == "focus") {
                if (this.tabID !== null) {
                    this.open();
                } else {
                    this._emitToWorker("reload");
                }
            } else if (message.target == "adduser") {
                if (message.username !== null) {
                    this.loading = true;
                    this.cancelingValues.set("user" + message.type + message.username, false);
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "adduser", message.username, message.type, () => this.cancelingValues.get("user" + message.type + message.username));
                }
            } else if (message.target == "autoadd") {
                this.loading = true;
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "autoadd");
            } else if (message.target == "addchannel") {
                if (message.username !== null) {
                    this.loading = true;
                    this.cancelingValues.set("channel" + message.type + message.username, false);
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "addchannel", message.username, message.type, () => this.cancelingValues.get("channel" + message.type + message.username));
                }
            } else if (message.target == "cancel") {
                this.loading = false;
                this.cancelingValues.set(message.values.join(""), true);
            } else if (message.target == "removechannel") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "removechannel", message.channelId);
            }
            if (message.target == "removeuser") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "removeuser", message.userId, message.removeFavorites);
            }
            if (message.target == "updatechannel") {
                this.loading = true;
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatechannel", message.channelId);
            } else if (message.target == "updatefavorites") {
                this.loading = true;
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatefavorites", message.userId);
            } else if (message.target == "debugdump" || message.target == "showoptions") {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, message.target);
            }
        });
    }
    /**
     * Cleans up the canceling value for a request.
     *
     * @param {string} type - Object type (user or channel).
     * @param {string} provider - Object provider name.
     * @param {string} name - Object login.
     * @returns {undefined}
     */
    _deleteCancelingValue(type, provider, name) {
        this.cancelingValues.delete(type + provider + name);
    }
    /**
     * Only emits to the worker if it actually exists (isn't null).
     *
     * @param {string} target - Name of the event to emit.
     * @param {?} data - Data to send.
     * @returns {undefined}
     */
    _emitToWorker(target, ...data) {
        if (this.port !== null) {
            if (data.length == 1) {
                data = data[0];
            }
            this.port.postMessage({
                target,
                data
            });
        }
    }
    /**
     * Selects a manager tab, if one's already opened, else opens one.
     *
     * @async
     * @returns {?} The tab with the channels manager.
     */
    open() {
        if (this.tabID === null) {
            return browser.tabs.create({
                url: "./manager/index.html"
            }).then(tab => {
                this.tabID = tab.id;
                return tab;
            });
        } else {
            return browser.tabs.update(this.tabID, {
                active: true
            });
        }
    }
    /**
     * Add providers to the list of available providers in the manager.
     *
     * @param {Object.<module:providers/generic-provider.GenericProvider>} providers
     *                                  - Availabe providers in serialized form.
     * @returns {undefined}
     */
    addProviders(providers) {
        this._emitToWorker("addproviders", providers);
    }
    /**
     * Event callback if a channel was added. Callers should call
     * _deleteCancelingValue if invoked from the manager.
     *
     * @param {module:channel/core.Channel} channelObj - The added channel.
     * @returns {undefined}
     */
    onChannelAdded(channelObj) {
        this.loading = false;
        this._emitToWorker("add", channelObj.serialize());
    }
    /**
     * Callback when a channel was removed.
     *
     * @param {number} channelId - ID of the removed channel.
     * @returns {undefined}
     */
    onChannelRemoved(channelId) {
        this._emitToWorker("remove", channelId);
    }
    /**
     * Callback when a channel was updated.
     *
     * @param {module:channel/core.Channel} channelObj - The updated channel.
     * @returns {undefined}
     */
    onChannelUpdated(channelObj) {
        this.loading = false;
        this._emitToWorker("update", channelObj.serialize());
    }
    /**
     * Callback when a user was added. Callers should call _deleteCancelingValue
     * if invoked from the manager.
     *
     * @param {module:channel/core.User} user - The added user.
     * @returns {undefined}
     */
    onUserAdded(user) {
        this.loading = false;
        this._emitToWorker("adduser", user.serialize());
    }
    /**
     * Callback when a user was removed.
     *
     * @param {number} userId - The ID of the removed user.
     * @returns {undefined}
     */
    onUserRemoved(userId) {
        this._emitToWorker("removeuser", userId);
    }
    /**
     * Callback when a user was updated.
     *
     * @param {module:channel/core.User} user - The user that was updated.
     * @returns {undefined}
     */
    onUserUpdated(user) {
        this.loading = false;
        this._emitToWorker("updateuser", user.serialize());
    }
    /**
     * Callback when an error occurs while adding something.
     *
     * @param {string} [name] - Name of the object that was to be added.
     * @param {string} [type] - Type of the object that was to be added.
     * @param {string} [itemType] - Type of the object that had an error
     *                            (user/channel).
     * @returns {undefined}
     */
    onError(name, type, itemType) {
        this.loading = false;
        if (name) {
            this._deleteCancelingValue(itemType, type, name);
            //TODO move i18n to content
            this._emitToWorker("error", name, type);
        } else {
            this._emitToWorker("error");
        }
    }
    /**
     * Listener to be called when an action is canceled.
     *
     * @param {string} [name] - Name of the object whose action was canceled.
     * @param {string} [type] - Type/provider of the object whose action was
     *        canceled.
     * @param {string} [itemType] - Type of the object whoese action was cacneled.
     * @returns {undefined}
     */
    onCancel(name, type, itemType) {
        this.loading = false;
        this._deleteCancelingValue(itemType, type, name);
    }

    /**
     * Set the theme of the channel manager.
     *
     * @param {string} theme - Theme ID of the theme to use.
     * @returns {undefined}
     */
    setTheme(theme) {
        this._emitToWorker("theme", theme);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ChannelsManager;


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sdk__ = __webpack_require__(10);
/**
 * Credentials search wrapper.
 *
 * @author Martin Giger
 * @license MPL-2.0
 */



const search = ({ url }) => {
    return __WEBPACK_IMPORTED_MODULE_0__sdk__["a" /* default */].doAction({
        target: "passwords-search",
        url
    });
};
/* harmony export (immutable) */ __webpack_exports__["a"] = search;


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__querystring__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pagination_helper__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__generic_provider__ = __webpack_require__(3);
/*
 * Created by Martin Giger
 * Licensed under MPL 2.0
 */






const type = "azubu",
      baseURL = 'https://api.azubu.tv/public/',
      pageSize = 100;

function getChannelFromJSON(jsonChannel) {
    console.info("Azubu:getChannelFromJSON");
    const ret = new __WEBPACK_IMPORTED_MODULE_2__channel_core__["b" /* Channel */](jsonChannel.user.username, type),
          channelUrl = jsonChannel.url_channel || "http://www.azubu.tv/" + ret.login;
    if ("display_name" in jsonChannel.user) {
        ret.uname = jsonChannel.user.display_name;
    }
    ret.url.push(channelUrl);
    ret.archiveUrl = channelUrl;
    ret.chatUrl = jsonChannel.url_chat;
    ret.image = {
        50: jsonChannel.user.profile.url_photo_small,
        260: jsonChannel.user.profile.url_photo_large
    };
    ret.live.setLive(jsonChannel.is_live);
    ret.thumbnail = jsonChannel.url_thumbnail;
    ret.viewers = jsonChannel.view_count;
    if (ret.title !== null) {
        ret.title = jsonChannel.title;
    }
    ret.category = jsonChannel.category.title;
    return ret;
}

class Azubu extends __WEBPACK_IMPORTED_MODULE_4__generic_provider__["a" /* default */] {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this.authURL = ["http://www.azubu.tv"], this._supportsFavorites = true, this._supportsCredentials = true, this._supportsFeatured = true, _temp;
    }

    async getUserFavorites(username) {
        const [follows, userdata] = await Promise.all([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__pagination_helper__["a" /* promisedPaginationHelper */])({
            url: baseURL + "user/" + username + "/followings/list?limit=" + pageSize + "&offset=",
            pageSize,
            request: url => {
                return this._qs.queueRequest(url);
            },
            fetchNextPage(data) {
                return data.parsedJSON && "data" in data.parsedJSON && data.parsedJSON.data.length == data.parsedJSON.limit;
            },
            getItems(data) {
                if (data.parsedJSON && "data" in data.parsedJSON) {
                    return data.parsedJSON.data;
                } else {
                    return [];
                }
            }
        }), this._qs.queueRequest(baseURL + "user/" + username + "/profile")]);
        if (userdata.parsedJSON && "data" in userdata.parsedJSON) {
            const user = new __WEBPACK_IMPORTED_MODULE_2__channel_core__["a" /* User */](userdata.parsedJSON.data.user.username, this._type);
            if ("display_name" in userdata.parsedJSON.data.user) {
                user.uname = userdata.parsedJSON.data.user.display_name;
            }
            user.image = {
                50: userdata.parsedJSON.data.url_photo_small,
                260: userdata.parsedJSON.data.url_photo_large
            };
            user.favorites = follows.map(follow => follow.follow.username);

            const channels = await this.updateChannels(follows.map(follow => {
                return { login: follow.follow.username };
            }));

            return [user, channels];
        } else {
            throw "Couldn't fetch the details for the azubu user " + username;
        }
    }

    getChannelDetails(channelname) {
        return this._qs.queueRequest(baseURL + "channel/" + channelname).then(data => {
            if (data.status == 200 && data.parsedJSON && data.parsedJSON.data) {
                return getChannelFromJSON(data.parsedJSON.data);
            } else {
                throw "Error getting channel details for channel " + channelname;
            }
        });
    }
    updateFavsRequest(users) {
        const urls = users.map(user => baseURL + "user/" + user.login + "/profile");
        this._qs.queueUpdateRequest(urls, this._qs.LOW_PRIORITY, data => {
            if (data.parsedJSON && data.parsedJSON.data) {
                const user = new __WEBPACK_IMPORTED_MODULE_2__channel_core__["a" /* User */](data.parsedJSON.data.user.username, this._type);
                if ("display_name" in data.parsedJSON.data.user) {
                    user.uname = data.parsedJSON.data.user.display_name;
                }
                user.image = {
                    50: data.parsedJSON.data.url_photo_small,
                    260: data.parsedJSON.data.url_photo_large
                };

                const oldUser = users.find(u => u.login === user.login);
                user.id = oldUser.id;

                new __WEBPACK_IMPORTED_MODULE_3__pagination_helper__["b" /* PaginationHelper */]({
                    url: baseURL + "user/" + user.login + "/followings/list?limit=" + pageSize + "&offset=",
                    pageSize,
                    request: url => {
                        return this._qs.queueRequest(url);
                    },
                    fetchNextPage(data) {
                        return data.parsedJSON && "data" in data.parsedJSON && data.parsedJSON.data.length == data.parsedJSON.limit;
                    },
                    getItems(data) {
                        if (data.parsedJSON && "data" in data.parsedJSON) {
                            return data.parsedJSON.data;
                        } else {
                            return [];
                        }
                    },
                    onComplete: follows => {
                        user.favorites = follows.map(follow => follow.follow.username);
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updateduser", user);

                        // only add the channels the user wasn't following already.
                        this.updateChannels(follows.filter(follow => oldUser.favorites.every(fav => fav !== follow.follow.username)).map(follow => ({ login: follow.follow.username }))).then(channels => {
                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "newchannels", channels);
                        });

                        oldUser.favorites = user.favorites;
                    }
                });
            }
        });
    }
    updateRequest(channels) {
        const channelnames = channels.map(ch => ch.login).join(",");

        new __WEBPACK_IMPORTED_MODULE_3__pagination_helper__["b" /* PaginationHelper */]({
            url: baseURL + "channel/list?channels=" + channelnames + "&limit=" + pageSize + "&offset=",
            pageSize,
            request: (url, callback, initial) => {
                if (initial) {
                    this._qs.queueUpdateRequest([url], this._qs.HIGH_PRIORITY, callback);
                } else {
                    return this._qs.queueRequest(url);
                }
            },
            fetchNextPage(data) {
                return data.parsedJSON && "data" in data.parsedJSON && data.parsedJSON.data.length === data.parsedJSON.limit;
            },
            onComplete: chans => {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", chans.map(getChannelFromJSON));
            },
            getItems(data) {
                if (data.parsedJSON && data.parsedJSON.data) {
                    return data.parsedJSON.data;
                } else {
                    return [];
                }
            }
        });
    }
    updateChannels(channels) {
        console.info("Azubu.updateChannels");
        if (channels.length === 0) {
            return Promise.resolve([]);
        }

        const channelnames = channels.map(ch => ch.login).join(",");

        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__pagination_helper__["a" /* promisedPaginationHelper */])({
            url: baseURL + "channel/list?channels=" + channelnames + "&limit=" + pageSize + "&offset=",
            pageSize,
            request: url => {
                return this._qs.queueRequest(url);
            },
            fetchNextPage(data) {
                return data.parsedJSON && "data" in data.parsedJSON && data.parsedJSON.data.length === data.parsedJSON.limit;
            },
            getItems(data) {
                if (data.parsedJSON && data.parsedJSON.data) {
                    return data.parsedJSON.data;
                } else {
                    return [];
                }
            }
        }).then(chans => chans.map(getChannelFromJSON));
    }
    getFeaturedChannels() {
        return this._qs.queueRequest(baseURL + "channel/live/list?limit=60").then(data => {
            if (data.parsedJSON && "data" in data.parsedJSON && data.parsedJSON.data.length) {
                return data.parsedJSON.data.map(getChannelFromJSON);
            } else {
                throw "No featured channels found for " + this.name;
            }
        });
    }
    search(query) {
        return this._qs.queueRequest(baseURL + 'modules/search/channel?' + __WEBPACK_IMPORTED_MODULE_1__querystring__["a" /* default */].stringify({
            orderBy: '{"channel.updatedAt":"desc"}',
            "access_token": '',
            _format: "json",
            q: query
        })).then(data => {
            if (data.parsedJSON && "data" in data.parsedJSON && data.parsedJSON.data.length) {
                return data.parsedJSON.data.map(getChannelFromJSON);
            } else {
                throw "No results found for " + query + " on " + this.name;
            }
        });
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new Azubu(type));

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pagination_helper__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__generic_provider__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__logic__ = __webpack_require__(15);
/**
 * Beam provider.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/beam
 * @todo checkout socket based events
 */







const type = "beam",
      chatURL = "https://beam.pro/embed/chat/",
      baseURL = 'https://beam.pro/api/v1/',
      pageSize = 50,
      DEFAULT_AVATAR_URL = "https://beam.pro/_latest/img/media/profile.jpg",
      SIZES = ['50', '70', '150', '300'],
      getImageFromUserID = id => {
    const image = {};
    SIZES.forEach(s => {
        image[s] = `${ baseURL }users/${ id }/avatar?w=${ s }&h=${ s }`;
    });
    return image;
};

function getChannelFromJSON(jsonChannel) {
    const ret = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["b" /* Channel */](jsonChannel.token, type);
    ret.live.setLive(jsonChannel.online);
    ret.title = jsonChannel.name;
    ret.viewers = jsonChannel.viewersCurrent;
    // this is the actual thumbnail and not just the default channel thumbnail thing.
    ret.thumbnail = "https://thumbs.beam.pro/channel/" + jsonChannel.id + ".big.jpg";
    ret.url.push("https://beam.pro/" + jsonChannel.token);
    ret.archiveUrl = "https://beam.pro/" + jsonChannel.token;
    ret.chatUrl = chatURL + jsonChannel.token;
    ret.mature = jsonChannel.audience === "18+";
    ret.image = getImageFromUserID(jsonChannel.user.id);
    if (jsonChannel.type !== null) {
        ret.category = jsonChannel.type.name;
    }
    return ret;
}

function getImageFromAvatars(avatars) {
    const image = {};
    if (Array.isArray(avatars) && avatars.length) {
        avatars.forEach(avatar => {
            /*
             * The URL given by the API doesn't work at this point. Reconstruct
             * the one used on the site.
             */
            image[avatar.meta.size.split("x")[0]] = `https://images.beam.pro/${ avatar.meta.size }/https://uploads.beam.pro/avatar/${ avatar.relid }.jpg`;
        });
    } else {
        image["220"] = DEFAULT_AVATAR_URL;
    }
    return image;
}

class Beam extends __WEBPACK_IMPORTED_MODULE_4__generic_provider__["a" /* default */] {

    constructor(type) {
        super(type);
        this.authURL = ["https://beam.pro"];
        this._supportsFavorites = true;
        this._supportsCredentials = true;
        this._supportsFeatured = true;
        this._getUserIdFromUsername = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_underscore__["memoize"])(username => {
            return this._qs.queueRequest(baseURL + "users/search?query=" + username).then(response => {
                if (response.ok && response.parsedJSON) {
                    return response.parsedJSON.find(val => val.username == username).id;
                }
                throw `Could not find user for ${ username }`;
            });
        });
    }
    async getUserFavorites(username) {
        const userid = await this._getUserIdFromUsername(username),
              user = await this._qs.queueRequest(baseURL + "users/" + userid);

        if (user.parsedJSON) {
            const ch = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["a" /* User */](user.parsedJSON.username, this._type);
            if ("avatars" in user.parsedJSON) {
                ch.image = getImageFromAvatars(user.parsedJSON.avatars);
            } else {
                ch.image = getImageFromUserID(user.parsedJSON.id);
            }

            const subscriptions = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__pagination_helper__["a" /* promisedPaginationHelper */])({
                url: baseURL + "users/" + userid + "/follows?limit=" + pageSize + "&page=",
                pageSize,
                initialPage: 0,
                request: url => this._qs.queueRequest(url),
                getPageNumber(page) {
                    return ++page;
                },
                fetchNextPage(data, pageSize) {
                    return data.parsedJSON && data.parsedJSON.length == pageSize;
                },
                getItems(data) {
                    return data.parsedJSON || [];
                }
            });

            ch.favorites = subscriptions.map(sub => sub.token);

            const channels = await Promise.all(subscriptions.map(sub => this.getChannelDetails(sub.token)));

            return [ch, channels];
        } else {
            throw `Could not get favorites for user ${ username } on ${ this.name }`;
        }
    }
    async updateFavsRequest(users) {
        const urls = await Promise.all(users.map(user => this._getUserIdFromUsername(user.login).then(id => baseURL + "users/" + id)));

        this._qs.queueUpdateRequest(urls, this._qs.LOW_PRIORITY, (data, url) => {
            if (data.parsedJSON) {
                const ch = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["a" /* User */](data.parsedJSON.username, this._type);
                if ("avatars" in data.parsedJSON) {
                    ch.image = getImageFromAvatars(data.parsedJSON.avatars);
                } else {
                    ch.image = getImageFromUserID(data.parsedJSON.id);
                }

                const oldUser = users.find(usr => usr.login === ch.login);
                ch.id = oldUser.id;

                new __WEBPACK_IMPORTED_MODULE_3__pagination_helper__["b" /* PaginationHelper */]({
                    url: url + "/follows?limit=" + pageSize + "&page=",
                    pageSize,
                    initialPage: 0,
                    request: url => this._qs.queueRequest(url),
                    getPageNumber: page => page + 1,
                    fetchNextPage(data, pageSize) {
                        return data.parsedJSON && data.parsedJSON.length == pageSize;
                    },
                    getItems: data => data.parsedJSON || [],
                    onComplete: follows => {
                        ch.favorites = follows.map(sub => sub.token);
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updateduser", ch);

                        Promise.all(follows.filter(sub => {
                            return oldUser.favorites.every(fav => fav !== sub.token);
                        }).map(sub => this.getChannelDetails(sub.token))).then(channels => {
                            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "newchannels", channels);
                            oldUser.favorites = ch.favorites;
                        });
                    }
                });
            }
        });
    }
    getChannelDetails(channelname) {
        return this._qs.queueRequest(baseURL + "channels/" + channelname).then(response => {
            if (response.parsedJSON) {
                return getChannelFromJSON(response.parsedJSON);
            } else {
                throw "Error getting the details for the beam channel " + channelname;
            }
        });
    }
    updateRequest(channels) {
        const urls = channels.map(channel => `${ baseURL }channels/${ channel.login }`);
        this._qs.queueUpdateRequest(urls, this._qs.HIGH_PRIORITY, data => {
            if (data.parsedJSON) {
                const channel = getChannelFromJSON(data.parsedJSON);
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", channel);
            }
        });
    }
    async getFeaturedChannels() {
        const data = await this._qs.queueRequest(baseURL + "channels?limit=8&page=0&order=online%3Adesc%2CviewersCurrent%3Adesc%2CviewersTotal%3Adesc&where=suspended.eq.0%2Conline.eq.1");
        if (data.parsedJSON && data.parsedJSON.length) {
            let chans = data.parsedJSON;
            if (await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__logic__["a" /* not */])(this._mature())) {
                chans = chans.filter(ch => ch.audience !== "18+");
            }

            return chans.map(chan => getChannelFromJSON(chan));
        } else {
            throw "Didn't find any featured channels for " + this.name;
        }
    }
    async search(query) {
        const data = await this._qs.queueRequest(baseURL + "channels?where=online.eq.1%2Ctoken.eq." + query);
        if (data.parsedJSON && data.parsedJSON.length) {
            let chans = data.parsedJSON;
            if (await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__logic__["a" /* not */])(this._mature())) {
                chans = chans.filter(ch => ch.audience !== "18+");
            }

            return chans.map(chan => getChannelFromJSON(chan));
        } else {
            throw "No results for " + query + " on " + this.name;
        }
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new Beam(type));

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__generic_provider__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pagination_helper__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__querystring__ = __webpack_require__(8);
/**
 * Dailymotion provider.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/dailymotion
 */






const type = "dailymotion",
      baseUrl = "https://api.dailymotion.com/",
      AVATAR_SIZES = [25, 60, 80, 120, 190, 240, 360, 480, 720],
      USER_FIELDS = "screenname,url,id," + AVATAR_SIZES.map(s => "avatar_" + s + "_url").join(","),
      getChannelFromJSON = (json, doUser = false) => {
    let ch;
    if (doUser) {
        ch = new __WEBPACK_IMPORTED_MODULE_2__channel_core__["a" /* User */](json.id, type);
    } else {
        ch = new __WEBPACK_IMPORTED_MODULE_2__channel_core__["b" /* Channel */](json.id, type);
        ch.url.push(json.url);
        ch.archiveUrl = json.url;
    }
    ch.uname = json.screenname;
    ch.image = AVATAR_SIZES.reduce((p, c) => {
        p[c] = json['avatar_' + c + '_url'];
        return p;
    }, {});

    return ch;
};

class Dailymotion extends __WEBPACK_IMPORTED_MODULE_1__generic_provider__["a" /* default */] {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this._supportsFavorites = true, this._supportsFeatured = true, _temp;
    }

    _getChannelByID(id, doUser = false) {
        return this._qs.queueRequest(baseUrl + "user/" + id + "?" + __WEBPACK_IMPORTED_MODULE_4__querystring__["a" /* default */].stringify({
            fields: USER_FIELDS
        })).then(result => {
            if (result.ok && result.parsedJSON) {
                if ("list" in result.parsedJSON) {
                    return getChannelFromJSON(result.parsedJSON.list[0], doUser);
                } else {
                    return getChannelFromJSON(result.parsedJSON, doUser);
                }
            } else {
                throw `Could not get details for ${ id } on ${ this._type }`;
            }
        });
    }
    _getStreamDetailsForChannel(channel) {
        return this._qs.queueRequest(baseUrl + "user/" + channel.login + "/videos?" + __WEBPACK_IMPORTED_MODULE_4__querystring__["a" /* default */].stringify({
            id: channel.login,
            fields: "chat_embed_url,title,url,channel.name,onair,thumbnail_240_url",
            sort: "live-audience",
            limit: 1
        })).then(response => {
            if (response.ok && response.parsedJSON) {
                if (response.parsedJSON.list.length) {
                    const item = response.parsedJSON.list[0];
                    channel.chatUrl = item.chat_embed_url;
                    channel.thumbnail = item.thumbnail_url;
                    channel.url = [item.url];
                    channel.category = item['channel.name'];
                    channel.live.setLive(item.onair);
                    channel.title = item.title;
                } else {
                    channel.live.setLive(false);
                }
                return channel;
            } else {
                throw `Could not update ${ channel.login } on ${ this._type }`;
            }
        });
    }
    _getFavs(userId) {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__pagination_helper__["a" /* promisedPaginationHelper */])({
            url: baseUrl + "user/" + userId + "/following?" + __WEBPACK_IMPORTED_MODULE_4__querystring__["a" /* default */].stringify({
                fields: USER_FIELDS,
                limit: 100
            }) + "&page=",
            pageSize: 1,
            initialPage: 1,
            request: url => this._qs.queueRequest(url),
            fetchNextPage(data) {
                return data.json && data.parsedJSON.has_more;
            },
            getItems(data) {
                if (data.ok && data.parsedJSON && data.parsedJSON.list) {
                    return data.parsedJSON.list.map(getChannelFromJSON);
                } else {
                    return [];
                }
            }
        });
    }
    getUserFavorites(username) {
        return this.getChannelDetails(username, true).then(user => {
            return this._getFavs(user.login).then(channels => {
                user.favorites = channels.map(ch => ch.login);

                return [user, channels];
            });
        });
    }
    getChannelDetails(username, doUser = false) {
        return this._qs.queueRequest(baseUrl + "users?" + __WEBPACK_IMPORTED_MODULE_4__querystring__["a" /* default */].stringify({
            usernames: username,
            fields: USER_FIELDS
        }), {}).then(result => {
            if (result.ok && result.parsedJSON && result.parsedJSON.list && result.parsedJSON.list.length) {
                return getChannelFromJSON(result.parsedJSON.list[0], doUser);
            } else {
                return this._getChannelByID(username, doUser);
            }
        });
    }
    updateFavsRequest(users) {
        new __WEBPACK_IMPORTED_MODULE_3__pagination_helper__["b" /* PaginationHelper */]({
            url: baseUrl + "users?" + __WEBPACK_IMPORTED_MODULE_4__querystring__["a" /* default */].stringify({
                ids: users.map(ch => ch.login).join(","),
                fields: USER_FIELDS,
                limit: 100
            }) + "&page=",
            initialPage: 1,
            pageSize: 1,
            request: (url, callback, initial) => {
                if (initial) {
                    this._qs.queueUpdateRequest([url], this._qs.LOW_PRIORITY, callback);
                } else {
                    return this._qs.queueRequest(url);
                }
            },
            fetchNextPage(data) {
                return data.parsedJSON && data.parsedJSON.has_more;
            },
            getItems(data) {
                if (data.ok && data.parsedJSON && data.parsedJSON.list) {
                    return data.parsedJSON.list;
                } else {
                    return [];
                }
            },
            onComplete: data => {
                data = data.map(d => getChannelFromJSON(d, true));

                data.forEach(user => {
                    const oldUser = users.find(u => u.login == user.login);
                    this._getFavs(user.login).then(channels => {
                        user.favorites = channels.map(ch => ch.login);
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updateduser", user);

                        channels = channels.filter(ch => !oldUser.favorites.some(c => c == ch.login));
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "newchannels", channels);

                        oldUser.favorites = user.favorites;
                    });
                });
            }
        });
    }
    updateRequest(channels) {
        new __WEBPACK_IMPORTED_MODULE_3__pagination_helper__["b" /* PaginationHelper */]({
            url: baseUrl + "users?" + __WEBPACK_IMPORTED_MODULE_4__querystring__["a" /* default */].stringify({
                ids: channels.map(ch => ch.login).join(","),
                fields: USER_FIELDS,
                limit: 100
            }) + "&page=",
            initialPage: 1,
            pageSize: 1,
            request: (url, callback, initial) => {
                if (initial) {
                    this._qs.queueUpdateRequest([url], this._qs.HIGH_PRIORITY, callback);
                } else {
                    return this._qs.queueRequest(url);
                }
            },
            fetchNextPage(data) {
                return data.parsedJSON && data.parsedJSON.has_more;
            },
            getItems(data) {
                if (data.ok && data.parsedJSON && data.parsedJSON.list) {
                    return data.parsedJSON.list;
                } else {
                    return [];
                }
            },
            onComplete: data => {
                data = data.map(v => getChannelFromJSON(v));

                Promise.all(data.map(ch => this._getStreamDetailsForChannel(ch))).then(channels => __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", channels));
            }
        });
    }
    updateChannel(username) {
        return this.getChannelDetails(username).then(channel => {
            return this._getStreamDetailsForChannel(channel);
        });
    }
    async updateChannels(channels) {
        const response = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__pagination_helper__["a" /* promisedPaginationHelper */])({
            url: baseUrl + "users?" + __WEBPACK_IMPORTED_MODULE_4__querystring__["a" /* default */].stringify({
                ids: channels.map(ch => ch.login).join(","),
                fields: USER_FIELDS,
                limit: 100
            }) + "&page=",
            pageSize: 1,
            initialPage: 1,
            request: url => this._qs.queueRequest(url),
            fetchNextPage(data) {
                return data.parsedJSON && data.parsedJSON.has_more;
            },
            getItems(data) {
                if (data.parsedJSON && data.parsedJSON.list) {
                    return data.parsedJSON.list;
                } else {
                    return [];
                }
            }
        });

        return Promise.all(response.map(ch => this._getStreamDetailsForChannel(getChannelFromJSON(ch))));
    }
    search(query) {
        const q = {
            fields: "owner.id,owner.screenname,owner.url,chat_embed_url,title,url,channel.name,thumbnail_240_url," + AVATAR_SIZES.map(s => "owner.avatar_" + s + "_url").join(","),
            sort: "live-audience",
            "live_onair": 1
        };
        if (query) {
            q.search = query;
        }
        return this._qs.queueRequest(baseUrl + "videos?" + __WEBPACK_IMPORTED_MODULE_4__querystring__["a" /* default */].stringify(q)).then(data => {
            if (data.ok && data.parsedJSON && data.parsedJSON.list && data.parsedJSON.list.length) {
                return data.parsedJSON.list.map(json => {
                    const ch = new __WEBPACK_IMPORTED_MODULE_2__channel_core__["b" /* Channel */](json['owner.id'], this._type);
                    ch.live.setLive(true);
                    ch.title = json.title;
                    ch.uname = json['owner.screenname'];
                    ch.url.push(json.url, json['owner.url']);
                    ch.archiveUrl = json['owner.url'];
                    ch.chatUrl = json.chat_embed_url;
                    ch.category = json['channel.name'];
                    ch.thumbnail = json.thumbnail_240_url;
                    ch.image = AVATAR_SIZES.reduce((p, s) => {
                        p[s] = json['owner.avatar_' + s + '_url'];
                        return p;
                    }, {});

                    return ch;
                });
            } else {
                throw "Didn't find any search results channels with " + query + " for " + this._type;
            }
        });
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new Dailymotion(type));

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__generic_provider__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_md5__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_md5___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_md5__);
/**
 * Douyutv provider. API reverseengineering is in #125.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/douyutv
 * @todo support adding by url slug name
 */





const type = "douyutv",
      baseURL = "http://www.douyutv.com/api/v1/",
      roomURL = "http://www.douyutv.com",
      getChannelFromJSON = json => {
    const chan = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["b" /* Channel */](json.room_id, type);
    chan.uname = json.room_name;
    chan.title = json.subject;
    chan.url.push(roomURL + json.url);
    chan.image = {
        200: json.owner_avatar
    };
    chan.archiveUrl = roomURL + json.url;
    chan.live.setLive(json.show_status == "1");
    chan.thumbnail = json.room_src;
    chan.category = json.game_name;
    chan.viewers = json.online;
    return chan;
},
      signAPI = (endpoint, id) => {
    const argument = endpoint + id + "?aid=android&client_sys=android&time=" + Date.now(),
          sign = __WEBPACK_IMPORTED_MODULE_3_md5___default()(argument + '1231');
    return argument + "&auth=" + sign;
};

class Douyutv extends __WEBPACK_IMPORTED_MODULE_2__generic_provider__["a" /* default */] {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this.authURL = ["http://www.douyutv.com"], _temp;
    }

    getChannelDetails(username) {
        return this._qs.queueRequest(baseURL + signAPI("room/", username)).then(data => {
            if (data.parsedJSON && data.parsedJSON.error === 0) {
                return getChannelFromJSON(data.parsedJSON.data);
            } else {
                throw "Couldn't get room info for douyutv channel with ID " + username;
            }
        });
    }
    updateRequest(channels) {
        const urls = channels.map(ch => baseURL + signAPI("room/", ch.login));
        this._qs.queueUpdateRequest(urls, this._qs.HIGH_PRIORITY, data => {
            if (data.parsedJSON && data.parsedJSON.error === 0) {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", getChannelFromJSON(data.parsedJSON.data));
            }
        });
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new Douyutv(type));

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_event_target_shim__);
/**
 * Re-emits events from all providers.
 *
 * @author Martin Giger
 * @license MPL-2.0
 */




const USER_EVENTS = ["updateduser", "newchannels"],
      BASE_EVENTS = ["updatedchannels"];

class EventSink extends __WEBPACK_IMPORTED_MODULE_2_event_target_shim___default.a {
    constructor() {
        super();

        for (const p in __WEBPACK_IMPORTED_MODULE_0__index__["a" /* default */]) {
            const provider = __WEBPACK_IMPORTED_MODULE_0__index__["a" /* default */][p];
            for (const e of BASE_EVENTS) {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["e" /* pipe */])(provider, e, this);
            }

            if (provider.supports.favorites) {
                for (const e of USER_EVENTS) {
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["e" /* pipe */])(provider, e, this);
                }
            }
        }
    }
}

/* harmony default export */ __webpack_exports__["a"] = EventSink;

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__generic_provider__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pagination_helper__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__querystring__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__logic__ = __webpack_require__(15);
/*
 * Created by Martin Giger
 * Licensed under MPL 2.0
 *
 * Hitbox provider
 */







const type = "hitbox",
      archiveURL = "/videos",
      chatURL = "https://hitbox.tv/embedchat/",
      pageSize = 100,
      baseURL = "https://api.hitbox.tv",
      cdnURL = "http://edge.sf.hitbox.tv";

function getChannelFromJson(json) {
    const cho = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["b" /* Channel */](json.channel.user_name, type);
    cho.uname = json.media_display_name;
    cho.url.push(json.channel.channel_link);
    cho.archiveUrl = json.channel.channel_link + archiveURL;
    cho.chatUrl = chatURL + json.channel.user_name;
    cho.image = {
        "200": cdnURL + json.channel.user_logo,
        "50": cdnURL + json.channel.user_logo_small
    };
    cho.title = json.media_status;
    cho.category = json.category_name;
    cho.viewers = json.media_views;
    cho.thumbnail = cdnURL + json.media_thumbnail;
    cho.live.setLive(json.media_is_live != "0");
    cho.mature = json.media_mature === "1";
    return cho;
}

class Hitbox extends __WEBPACK_IMPORTED_MODULE_2__generic_provider__["a" /* default */] {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this.authURL = ["http://www.hitbox.tv"], this._supportsFavorites = true, this._supportsCredentials = true, this._supportsFeatured = true, _temp;
    }

    _getChannels(channels) {
        return Promise.all(channels.map(channel => {
            return this._qs.queueRequest(baseURL + '/media/live/' + channel).then(data => {
                if (data.ok && data.parsedJSON && "livestream" in data.parsedJSON) {
                    return getChannelFromJson(data.parsedJSON.livestream[0]);
                } else {
                    return null;
                }
            });
        })).then(channels => channels.filter(channel => channel !== null));
    }
    async getUserFavorites(username) {
        const [follows, user] = await Promise.all([__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__pagination_helper__["a" /* promisedPaginationHelper */])({
            url: baseURL + '/following/user?user_name=' + username + '&limit=' + pageSize + '&offset=',
            pageSize,
            request: url => this._qs.queueRequest(url),
            fetchNextPage(data, pageSize) {
                return data.parsedJSON && "following" in data.parsedJSON && data.parsedJSON.following.length == pageSize;
            },
            getItems(data) {
                if (data.parsedJSON && "following" in data.parsedJSON) {
                    return data.parsedJSON.following;
                } else {
                    return [];
                }
            }
        }), this._qs.queueRequest(baseURL + '/user/' + username)]);

        if (user.ok && user.parsedJSON && user.parsedJSON.user_name !== null) {
            const usr = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["a" /* User */](user.parsedJSON.user_name, this._type);
            usr.image = {
                "200": cdnURL + user.parsedJSON.user_logo,
                "50": cdnURL + user.parsedJSON.user_logo_small
            };
            usr.favorites = follows.map(follow => follow.user_name);

            const channels = await this._getChannels(usr.favorites);
            return [usr, channels];
        } else {
            throw "Error getting info for Hitbox user " + username;
        }
    }
    getChannelDetails(channelname) {
        return this._qs.queueRequest(baseURL + '/media/live/' + channelname).then(data => {
            if (data.ok && data.parsedJSON && data.parsedJSON.livestream) {
                return getChannelFromJson(data.parsedJSON.livestream[0]);
            } else {
                throw "Error getting details for Hitbox channel " + channelname;
            }
        });
    }
    updateFavsRequest(users) {
        const urls = users.map(user => baseURL + '/user/' + user.login);
        this._qs.queueUpdateRequest(urls, this._qs.LOW_PRIORITY, data => {
            if (data.ok && data.parsedJSON) {
                const user = users.find(user => user.login == data.parsedJSON.user_name);
                user.image = {
                    "200": cdnURL + data.parsedJSON.user_logo,
                    "50": cdnURL + data.parsedJSON.user_logo_small
                };

                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__pagination_helper__["a" /* promisedPaginationHelper */])({
                    url: baseURL + '/following/user?user_name=' + user.login + '&limit=' + pageSize + '&offset=',
                    pageSize,
                    request: url => this._qs.queueRequest(url),
                    fetchNextPage(data, pageSize) {
                        return data.parsedJSON && "following" in data.parsedJSON && data.parsedJSON.following.length == pageSize;
                    },
                    getItems(data) {
                        if (data.parsedJSON && "following" in data.parsedJSON) {
                            return data.parsedJSON.following;
                        } else {
                            return [];
                        }
                    }
                }).then(follows => {
                    const newChannels = follows.filter(follow => user.favorites.every(fav => fav != follow.user_name));
                    user.favorites = follows.map(follow => follow.user_name);
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updateduser", user);
                    return this._getChannels(newChannels.map(follow => follow.user_name));
                }).then(channels => {
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "newchannels", channels);
                });
            }
        });
    }
    updateRequest(channels) {
        const urls = channels.map(channel => baseURL + '/media/live/' + channel.login);
        this._qs.queueUpdateRequest(urls, this._qs.HIGH_PRIORITY, data => {
            if (data.ok && data.parsedJSON && data.parsedJSON.livestream) {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", getChannelFromJson(data.parsedJSON.livestream[0]));
            }
        });
    }
    async search(query) {
        const data = await this._qs.queueRequest(baseURL + "/media/live/list?" + __WEBPACK_IMPORTED_MODULE_4__querystring__["a" /* default */].stringify({
            publicOnly: true,
            filter: "popular",
            search: query
        }));
        if (data.ok && data.parsedJSON && data.parsedJSON.livestream && data.parsedJSON.livestream.length) {
            let chans = data.parsedJSON.livestream;
            if (await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__logic__["a" /* not */])(this._mature())) {
                chans = chans.filter(m => m.media_mature !== "1");
            }

            return chans.map(chan => getChannelFromJson(chan));
        } else {
            throw "Couldn't find any channels for the search on " + this.name + " that match " + query;
        }
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new Hitbox(type));

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__generic_provider__ = __webpack_require__(3);
/**
 * @todo implement favorites stuff
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/livestream
 */




const type = "livestream",
      baseURL = ".api.channel.livestream.com/2.0/";

function getChannelAPIUrl(channellogin) {
    return "http://x" + channellogin.replace(/_/g, "-") + "x" + baseURL;
}

class Livestream extends __WEBPACK_IMPORTED_MODULE_2__generic_provider__["a" /* default */] {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this.authURL = ["http://new.livestream.com", "https://secure.livestream.com"], _temp;
    }

    async getChannelDetails(username) {
        const ch = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["b" /* Channel */](username.toLowerCase(), this._type),
              [data, response] = await Promise.all([this._qs.queueRequest(getChannelAPIUrl(ch.login) + "info.json"), this._qs.queueRequest(getChannelAPIUrl(ch.login) + "latestclips.json?maxresults=1")]);

        if (data.parsedJSON && data.parsedJSON.channel) {
            console.info("Creating livestream channel");
            ch.uname = data.parsedJSON.channel.title;
            ch.title = "";
            ch.url.push(data.parsedJSON.channel.link);
            ch.image = { "100": data.parsedJSON.channel.image.url };
            ch.category = data.parsedJSON.channel.category;
            ch.live.setLive(data.parsedJSON.channel.isLive);
            ch.viewers = data.parsedJSON.channel.currentViewerCount;
            ch.archiveUrl = data.parsedJSON.channel.link;
            ch.chatUrl = data.parsedJSON.channel.link + "/chat";

            if (response.parsedJSON && response.parsedJSON.channel.item && response.parsedJSON.channel.item.length > 0) {
                ch.thumbnail = response.parsedJSON.channel.item[0].thumbnail["@url"];
            }

            return ch;
        } else {
            throw "Error getting details for the Livestream channel " + username;
        }
    }
    updateRequest(channels) {
        const urls = channels.map(channel => getChannelAPIUrl(channel.login) + "livestatus.json");
        this._qs.queueUpdateRequest(urls, this._qs.HIGH_PRIORITY, (data, url) => {
            if (data.parsedJSON && data.parsedJSON.channel) {
                const requestLogin = url.match(/http:\/\/x([a-zA-Z0-9-]+)x\./)[1].replace("-", "_"),
                      channel = channels.find(channel => requestLogin == channel.login);
                channel.live.setLive(data.parsedJSON.channel.isLive);
                channel.viewers = data.parsedJSON.channel.currentViewerCount;
                this._qs.queueRequest(getChannelAPIUrl(channel.login) + "latestclips.json?maxresults=1").then(data => {
                    if (data.parsedJSON && "channel" in data.parsedJSON && data.parsedJSON.channel.item.length) {
                        channel.thumbnail = data.parsedJSON.channel.item[0].thumbnail["@url"];
                    }
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", channel);
                });
            }
        });
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new Livestream(type));

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__generic_provider__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__channel_live_state__ = __webpack_require__(6);
/**
 * MLG.tv Provider
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/mlg
 */
/*
Inofficial MLG.tv (major league gaming streams) API doc:

Username: cleartext username used in the channel URL
stream_name: mlg[0-9]+, which seems to be the stream ID
channel_id: [0-9]+, which seems to be the ID for the channel (used in image URLs and chat)


http://tv.majorleaguegaming.com/channel/{username}
http://chat.majorleaguegaming.com/{channel_id}


all of these seem to also support JSONP with the callback= parameter.
http://www.majorleaguegaming.com/player/config.json?id={username} username -> media[0].channel
http://streamapi.majorleaguegaming.com/service/streams/all status of all streams with stream_name and channel_id
http://streamapi.majorleaguegaming.com/service/streams/status/{stream_name} status and viewer count of just the specified stream
    status: -1 for offline, 1 for live, 2 for rebroadcast
http://www.majorleaguegaming.com/api/channels/all.js All the info about all the channels
    field parameter can limit the fields. You'll find the available fields if you don't specify any
http://www.majorleaguegaming.com/api/games/all.js All names and images for all game_id values
http://streamapi.majorleaguegaming.com/service/streams/playback/{stream name}?format=all playback URL + name & id

https://accounts.majorleaguegaming.com/follows/retrieve returns all the channel ids the currently logged in user (cookie mlg_login for username, mlg_id for the id) follows
There are also the actions to follow and unfollow a channel, but I am not sure how they work, as I don't care.

*/






const type = "mlg",
      chatURL = "https://chat.majorleaguegaming.com/",
      baseURL = 'https://streamapi.majorleaguegaming.com/service/streams/',
      infoURL = 'https://www.majorleaguegaming.com/api/channels/all.js',
      gameURL = 'https://www.majorleaguegaming.com/api/games/all.js',
      infoArgs = "?fields=id,slug,name,stream_name,subtitle,image_1_1,image_16_9_medium,url,bracket_url,game_id";

/**
 * @enum {number}
 * @name Status
 * @readonly
 * @property {number} Offline=-1
 * @property {number} Live=1
 * @property {number} Rebroadcast=2
 */
/**
 * @param {module:providers/mlg~Status} status - State of the channel.
 * @returns {boolean} If the channel should be considered live.
 * @async
 */
function isLive(status) {
    return __WEBPACK_IMPORTED_MODULE_2__preferences__["a" /* default */].get("mlg_showRebroadcasts").then(showRebroadcasts => status != -1 && (showRebroadcasts || status != 2));
}

// Takes a game_id
let games = [];

class MLG extends __WEBPACK_IMPORTED_MODULE_3__generic_provider__["a" /* default */] {
    async _getGame(id) {
        const game = games.find(g => g.id == id);
        if (!game) {
            const data = await this._qs.queueRequest(gameURL);
            if (data.parsedJSON && data.parsedJSON.data.items && data.parsedJSON.data.items.length) {
                games = data.parsedJSON.data.items;
                return data.parsedJSON.data.items.find(g => g.id == id).name;
            } else {
                throw data.parsedJSON ? data.parsedJSON.errors : "Could not fetch games for " + this.name;
            }
        } else {
            return game.name;
        }
    }
    async _getChannelFromJSON(jsonChannel) {
        console.info("MLG:getChannelFromJSON");
        const ret = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["b" /* Channel */](jsonChannel.stream_name, this._type);
        ret.uname = jsonChannel.name;
        ret.url.push(jsonChannel.url);
        ret.archiveUrl = jsonChannel.bracket_url ? jsonChannel.bracket_url : jsonChannel.url;
        ret.chatUrl = chatURL + jsonChannel.id;
        ret.image = { "200": jsonChannel.image_1_1 };
        ret.title = jsonChannel.subtitle;
        ret.thumbnail = jsonChannel.image_16_9_medium;
        try {
            const game = await this._getGame(jsonChannel.game_id);
            ret.category = game;
        } catch (e) {
            // ingore
        }

        return ret;
    }
    async getChannelDetails(channelname) {
        const data = await this._qs.queueRequest(infoURL + infoArgs);
        if (data.ok && data.parsedJSON.status_code == 200) {
            const cho = data.parsedJSON.data.items.find(ch => ch.slug.toLowerCase() == channelname.toLowerCase());
            if (cho) {
                return this._getChannelFromJSON(cho);
            }
        }
        throw "Couldn't get the channel details for " + channelname + " for " + this.name;
    }
    updateRequest(channels) {
        this._qs.queueUpdateRequest([baseURL + "all"], this._qs.HIGH_PRIORITY, async data => {
            const info = await this._qs.queueRequest(infoURL + infoArgs);

            if (data.parsedJSON && data.parsedJSON.status_code == 200 && info.parsedJSON && info.parsedJSON.status_code == 200) {
                let chans = data.parsedJSON.data.items.filter(status => {
                    return channels.some(channel => status.stream_name == channel.login);
                });

                chans = await Promise.all(chans.map(async status => {
                    const channel = await this._getChannelFromJSON(info.parsedJSON.data.items.find(ch => ch.id == status.channel_id));
                    if (status.status == 2) {
                        channel.live = new __WEBPACK_IMPORTED_MODULE_4__channel_live_state__["a" /* default */](__WEBPACK_IMPORTED_MODULE_4__channel_live_state__["a" /* default */].REBROADCAST);
                    } else {
                        channel.live.setLive((await isLive(status.status)));
                    }
                    return channel;
                }));
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", chans);
            }
        });
    }
    async updateChannel(channelname) {
        console.info("MLG.updateChannel");
        const [data, info] = await Promise.all([this._qs.queueRequest(baseURL + 'status/' + channelname), this._qs.queueRequest(infoURL + infoArgs)]);
        console.info("MLG.updateChannel.requestCallback");
        if (data.parsedJSON && data.parsedJSON.status_code == 200 && info.parsedJSON && info.parsedJSON.status_code == 200) {
            const id = info.parsedJSON.data.items.find(ch => ch.id == data.parsedJSON.data.channel_id),
                  channel = await this._getChannelFromJSON(id);
            if (data.parsedJSON.data.status == 2) {
                channel.live = new __WEBPACK_IMPORTED_MODULE_4__channel_live_state__["a" /* default */](__WEBPACK_IMPORTED_MODULE_4__channel_live_state__["a" /* default */].REBROADCAST);
            } else {
                channel.live.setLive((await isLive(data.parsedJSON.data.status)));
            }
            channel.viewers = data.parsedJSON.data.viewers;

            return channel;
        } else {
            throw "Something went wrong when updating " + channelname;
        }
    }
    async updateChannels(channels) {
        console.info("MLG.updateChannels");
        const [data, info] = await Promise.all([this._qs.queueRequest(baseURL + "all"), this._qs.queueRequest(infoURL + infoArgs)]);

        if (data.parsedJSON && data.parsedJSON.status_code == 200 && info.parsedJSON && info.parsedJSON.status_code == 200) {
            const followedChannels = data.parsedJSON.data.items.filter(status => {
                return channels.some(channel => status.stream_name == channel.login);
            });
            return Promise.all(followedChannels.map(async status => {
                const id = info.parsedJSON.data.items.find(ch => ch.id == status.channel_id);
                const channel = await this._getChannelFromJSON(id);
                if (status.status == 2) {
                    channel.live = new __WEBPACK_IMPORTED_MODULE_4__channel_live_state__["a" /* default */](__WEBPACK_IMPORTED_MODULE_4__channel_live_state__["a" /* default */].REBROADCAST);
                } else {
                    channel.live.setLive((await isLive(status.status)));
                }
                return channel;
            }));
        }
        throw "Could not update channels";
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new MLG(type));

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__generic_provider__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pagination_helper__ = __webpack_require__(7);
/**
 * New livestream provider. For API reverseenigneering see Issue #99
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/new-livestream
 */





const type = "newlivestream",
      baseURL = "http://livestream.com/api/accounts/",
      getChannelFromJSON = json => {
    const chan = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["b" /* Channel */](json.short_name || json.id, type);
    chan.uname = json.full_name;
    chan.image = {
        [json.picture.width]: json.picture.url,
        "170": json.picture.small_url,
        "50": json.picture.thumb_url
    };
    chan.category = json.category_name;
    chan.archiveUrl = "http://livestream.com/" + chan.login;
    chan.chatUrl = "http://livestream.com/" + chan.login;
    return chan;
};

class NewLivestream extends __WEBPACK_IMPORTED_MODULE_2__generic_provider__["a" /* default */] {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this.authURL = ["http://livestream.com"], this.supportsFavorites = true, _temp;
    }

    async _getChannelStatus(json, channel) {
        // Checks if there are any upcoming or past events and if yes, if one is currently being broadcast.
        const event = Array.isArray(json.upcoming_events.data) && json.upcoming_events.data.find(event => event.broadcast_id != -1) || Array.isArray(json.past_events.data) && json.past_events.data.find(event => event.broadcast_id != -1);

        if (event) {
            channel.title = event.full_name;
            channel.viewers = event.viewer_count;
            channel.url.push("http://livestream.com/" + channel.login + "/events/" + event.id);
            const info = await this._qs.queueRequest(baseURL + json.id + "/events/" + event.id + "/stream_info");

            if (info.parsedJSON && !("message" in info.parsedJSON)) {
                channel.live.setLive(info.parsedJSON.is_live);
                channel.thumbnail = info.parsedJSON.thumbnail_url;
            }
        }
        return channel;
    }
    async getUserFavorites(username) {
        const user = await this._qs.queueRequest(baseURL + username);

        if (user.parsedJSON && "id" in user.parsedJSON) {
            const usr = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["a" /* User */](user.parsedJSON.short_name || user.parsedJSON.id, this._type);
            usr.uname = user.parsedJSON.full_name;
            usr.image = {
                [user.parsedJSON.picture.width]: user.parsedJSON.picture.url,
                "170": user.parsedJSON.picture.small_url,
                "50": user.parsedJSON.picture.thumb_url
            };
            const follows = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__pagination_helper__["a" /* promisedPaginationHelper */])({
                url: baseURL + user.parsedJSON.id + "/following?maxItems=50&page=",
                pageSize: 50,
                request: url => {
                    return this._qs.queueRequest(url);
                },
                fetchNextPage(data) {
                    return data.parsedJSON && data.parsedJSON.total > this.result.length;
                },
                getItems(data) {
                    if (data.parsedJSON && "data" in data.parsedJSON) {
                        return data.parsedJSON.data;
                    } else {
                        return [];
                    }
                },
                getPageNumber(page) {
                    return page + 1;
                }
            }),
                  channels = follows.map(follow => getChannelFromJSON(follow));

            usr.favorites = channels.map(channel => channel.login);
            return [usr, channels];
        } else {
            throw "Couldn't get favorites for the channel " + username + " on " + this.name;
        }
    }
    getChannelDetails(channelname) {
        return this._qs.queueRequest(baseURL + channelname).then(data => {
            if (data.parsedJSON && "id" in data.parsedJSON) {
                return getChannelFromJSON(data.parsedJSON);
            } else {
                throw "Couldn't get details for the " + this.name + " channel " + channelname;
            }
        });
    }
    updateFavsRequest(users) {
        const urls = users.map(user => baseURL + user.login);
        this._qs.queueUpdateRequest(urls, this._qs.LOW_PRIORITY, user => {
            if (user.parsedJSON && "id" in user.parsedJSON) {
                const usr = users.find(u => u.login == user.parsedJSON.id || u.login == user.parsedJSON.short_name);
                usr.uname = user.parsedJSON.full_name;
                usr.image = {
                    [user.parsedJSON.picture.width]: user.parsedJSON.picture.url,
                    "170": user.parsedJSON.picture.small_url,
                    "50": user.parsedJSON.picture.thumb_url
                };
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__pagination_helper__["a" /* promisedPaginationHelper */])({
                    url: baseURL + user.parsedJSON.id + "/following?maxItems=50&page=",
                    pageSize: 50,
                    request: url => {
                        return this._qs.queueRequest(url);
                    },
                    fetchNextPage(data) {
                        return data.parsedJSON && data.parsedJSON.total > this.result.length;
                    },
                    getItems(data) {
                        if (data.parsedJSON && "data" in data.parsedJSON) {
                            return data.parsedJSON.data;
                        } else {
                            return [];
                        }
                    },
                    getPageNumber(page) {
                        return page + 1;
                    }
                }).then(follows => {
                    const channels = follows.map(follow => getChannelFromJSON(follow)),
                          newChannels = channels.filter(channel => usr.favorites.some(ch => ch.login == channel.login));
                    if (newChannels.length > 0) {
                        usr.favorites = channels.map(channel => channel.login);
                    }
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updateduser", usr);
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "newchannels", newChannels);
                });
            }
        });
    }
    updateRequest(channels) {
        const urls = channels.map(channel => baseURL + channel.login);
        this._qs.queueUpdateRequest(urls, this._qs.HIGH_PRIORITY, data => {
            if (data.parsedJSON && "id" in data.parsedJSON) {
                const channel = getChannelFromJSON(data.parsedJSON);

                this._getChannelStatus(data.parsedJSON, channel).then(channel => {
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", channel);
                });
            }
        });
    }
    async updateChannel(channelname) {
        const data = await this._qs.queueRequest(baseURL + channelname);

        if (data.parsedJSON && "id" in data.parsedJSON) {
            const channel = getChannelFromJSON(data.parsedJSON);

            return this._getChannelStatus(data.parsedJSON, channel);
        } else {
            throw "Couldn't get details for the new livestream channel " + channelname;
        }
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new NewLivestream(type));

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__generic_provider__ = __webpack_require__(3);
/**
 * Provider for picarto.
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/picarto
 * @todo Fix live status detection. Probably not possible before picarto gets an API.
 */




const type = "picarto",
      baseURL = 'https://ptvappapi.picarto.tv',
      apiKey = '03e26294-b793-11e5-9a41-005056984bd4';

function getChannelFromJSON(jsonChan) {
    const ret = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["b" /* Channel */](jsonChan.channel.toLowerCase(), type);
    ret.uname = jsonChan.channel;
    ret.image = { 101: jsonChan.avatar_url };
    ret.thumbnail = jsonChan.thumbnail_url;
    ret.url.push("https://picarto.tv/" + ret.login);
    ret.archiveUrl = "https://picarto.tv/" + ret.login;
    ret.chatUrl = "https://picarto.tv/chatpopout/" + ret.login;
    ret.live.setLive(jsonChan.is_online);
    ret.mature = jsonChan.is_nsfw;
    ret.viewers = jsonChan.current_viewers;
    ret.title = jsonChan.channel_title;
    ret.category = jsonChan.is_multistream ? browser.i18n.getMessage("providerPicartoMultistream") : jsonChan.content_type;
    return ret;
}

class Picarto extends __WEBPACK_IMPORTED_MODULE_2__generic_provider__["a" /* default */] {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this.authURL = ["https://picarto.tv"], _temp;
    }

    getChannelDetails(channelname) {
        return this._qs.queueRequest(`${ baseURL }/channel/${ channelname.toLowerCase() }?key=${ apiKey }`).then(resp => {
            if (resp.ok) {
                return getChannelFromJSON(resp.parseJSON);
            } else {
                throw `Channel ${ channelname } does not exist for ${ this.name }`;
            }
        });
    }
    updateRequest(channels) {
        const urls = channels.map(channel => `${ baseURL }/channel/${ channel.login }?key=${ apiKey }`);
        this._qs.queueUpdateRequest(urls, this._qs.HIGH_PRIORITY, page => {
            if (page.ok) {
                const channel = getChannelFromJSON(page.parseJSON);
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", channel);
            }
        });
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new Picarto(type));

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__querystring__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__channel_live_state__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pagination_helper__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__generic_provider__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__logic__ = __webpack_require__(15);
/**
 * Twitch Provider.
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/twitch
 * @todo investigate delayed title updates
 */
//TODO properly wait for clientID









const type = "twitch",
      archiveURL = "/videos/all",
      chatURL = "/chat",
      baseURL = 'https://api.twitch.tv/kraken',
      headers = { 'Client-ID': '', 'Accept': 'application/vnd.twitchtv.v3+json' },
      defaultAvatar = "https://static-cdn.jtvnw.net/jtv_user_pictures/xarth/404_user_300x300.png",
      itemsPerPage = 100,
      idOfChannel = new Map(),
      SIZES = ['50', '70', '150', '300'],
      urlForSize = (imgURL, size) => imgURL.replace("300x300", size + "x" + size),
      getImageObj = (imgURL = defaultAvatar) => {
    const ret = {};
    SIZES.forEach(s => {
        ret[s] = urlForSize(imgURL, s);
    });
    return ret;
},
      dedupe = (a, b) => {
    return a.filter(c => b.every(d => c.id !== d.id));
};
__WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].get('twitch_clientId').then(id => {
    headers['Client-ID'] = id;
});

function getChannelFromJSON(jsonChannel) {
    const ret = new __WEBPACK_IMPORTED_MODULE_4__channel_core__["b" /* Channel */](jsonChannel.name, type);
    ret.uname = jsonChannel.display_name;
    ret.url.push(jsonChannel.url);
    ret.archiveUrl = jsonChannel.url + archiveURL;
    ret.chatUrl = jsonChannel.url + chatURL;
    ret.image = getImageObj(jsonChannel.logo ? jsonChannel.logo : defaultAvatar);
    ret.title = jsonChannel.status;
    ret.category = jsonChannel.game;
    ret.mature = jsonChannel.mature;

    return ret;
}

function getStreamTypeParam(delim = "&") {
    return __WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].get('twitch_showPlaylist').then(showPlaylist => {
        if (showPlaylist) {
            return delim + "stream_type=all";
        } else {
            return delim + "&stream_type=live";
        }
    });
}

class Twitch extends __WEBPACK_IMPORTED_MODULE_6__generic_provider__["a" /* default */] {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this.authURL = ["http://www.twitch.tv", "https://secure.twitch.tv", "https://passport.twitch.tv"], this._supportsFavorites = true, this._supportsCredentials = true, this._supportsFeatured = true, _temp;
    }

    async getUserFavorites(username) {
        const data = await this._qs.queueRequest(baseURL + '/users/' + username, headers);

        if (data.json && !data.json.error) {
            const channels = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__pagination_helper__["a" /* promisedPaginationHelper */])({
                url: baseURL + '/users/' + username + '/follows/channels?limit=' + itemsPerPage + '&offset=',
                pageSize: itemsPerPage,
                request: url => {
                    return this._qs.queueRequest(url, headers);
                },
                fetchNextPage(data) {
                    return data.parsedJSON && "follows" in data.parsedJSON && data.parsedJSON.follows.length == itemsPerPage;
                },
                getItems(data) {
                    if (data.parsedJSON && "follows" in data.parsedJSON) {
                        return data.parsedJSON.follows.map(c => getChannelFromJSON(c.channel));
                    } else {
                        return [];
                    }
                }
            }),
                  user = new __WEBPACK_IMPORTED_MODULE_4__channel_core__["a" /* User */](data.parsedJSON.name, this._type);
            user.uname = data.parsedJSON.display_name;
            user.image = getImageObj(data.parsedJSON.logo ? data.parsedJSON.logo : defaultAvatar);
            user.favorites = channels.map(channel => channel.login);

            return [user, channels];
        } else {
            throw "Couldn't fetch twitch user " + username;
        }
    }
    getChannelDetails(channelname) {
        console.info("twitch.getChannelDetails");
        return this._qs.queueRequest(baseURL + '/channels/' + channelname, headers).then(data => {
            if (data.parsedJSON && !data.parsedJSON.error) {
                idOfChannel.set(data.parsedJSON.name, data.parsedJSON._id);
                return getChannelFromJSON(data.parsedJSON);
            } else {
                throw data.parsedJSON ? data.parsedJSON.error : "Could not fetch details for " + this.name + " channel " + channelname;
            }
        });
    }
    updateFavsRequest(users) {
        const urls = users.map(user => baseURL + '/users/' + user.login);

        this._qs.queueUpdateRequest(urls, this._qs.LOW_PRIORITY, data => {
            if (data.parsedJSON && !data.parsedJSON.error) {
                const user = users.find(user => user.login == data.parsedJSON.name);
                user.uname = data.parsedJSON.display_name;
                user.image = getImageObj(data.parsedJSON.logo ? data.parsedJSON.logo : defaultAvatar);

                new __WEBPACK_IMPORTED_MODULE_5__pagination_helper__["b" /* PaginationHelper */]({
                    url: baseURL + '/users/' + user.login + '/follows/channels?limit=' + itemsPerPage + '&offset=',
                    pageSize: itemsPerPage,
                    request: url => {
                        return this._qs.queueRequest(url, headers);
                    },
                    fetchNextPage(data) {
                        return data.parsedJSON && "follows" in data.parsedJSON && data.parsedJSON.follows.length == itemsPerPage;
                    },
                    getItems(data) {
                        if (data.parsedJSON && "follows" in data.parsedJSON) {
                            return data.parsedJSON.follows.map(c => getChannelFromJSON(c.channel));
                        } else {
                            return [];
                        }
                    },
                    onComplete: follows => {
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "newchannels", follows.filter(c => user.favorites.every(name => name !== c.login)));

                        user.favorites = follows.map(c => c.login);
                        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updateduser", user);
                    }
                });
            }
        }, headers);
    }
    updateRequest(channels) {
        const channelsString = channels.map(c => c.login).join(",");
        new __WEBPACK_IMPORTED_MODULE_5__pagination_helper__["b" /* PaginationHelper */]({
            url: baseURL + "/streams?channel=" + channelsString + "&stream_type=all&limit=" + itemsPerPage + "&offset=",
            pageSize: itemsPerPage,
            request: (url, callback, initial) => {
                if (initial) {
                    this._qs.queueUpdateRequest([url], this._qs.HIGH_PRIORITY, callback, headers);
                } else {
                    return this._qs.queueRequest(url, headers);
                }
            },
            fetchNextPage(data, pageSize) {
                return data.parsedJSON && "streams" in data.parsedJSON && data.parsedJSON.streams.length == pageSize;
            },
            getItems: data => {
                if (data.parsedJSON && "streams" in data.parsedJSON) {
                    let streams = data.parsedJSON.streams;
                    if (!__WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].twitch_showPlaylist) {
                        streams = streams.filter(s => !s.is_playlist);
                    }
                    return streams.map(obj => {
                        const cho = getChannelFromJSON(obj.channel);
                        cho.viewers = obj.viewers;
                        cho.thumbnail = obj.preview.medium;
                        if (obj.is_playlist) {
                            cho.live = new __WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */](__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].REBROADCAST);
                        } else {
                            cho.live.setLive(true);
                        }

                        let oldChan = channels.find(ch => cho.login == ch.login);
                        if (oldChan === undefined) {
                            const findChan = (chan, ch) => ch.login == chan;
                            for (const i of idOfChannel.entries()) {
                                if (i[1] == obj.channel._id) {
                                    oldChan = channels.find(findChan.bind(null, i[0]));
                                    if (oldChan !== undefined) {
                                        break;
                                    }
                                }
                            }
                        }
                        if (oldChan !== undefined) {
                            cho.id = oldChan.id;
                            oldChan.live = cho.live;
                        }
                        return cho;
                    });
                } else {
                    return [];
                }
            },
            onComplete: async data => {
                const liveChans = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* filterAsync */])(data, cho => cho.live.isLive(__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].TOWARD_OFFLINE));
                if (liveChans.length) {
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", liveChans);
                }
                if (liveChans.length != channels.length) {
                    let offlineChans = dedupe(channels, data);
                    const playlistChans = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* filterAsync */])(data, cho => __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__logic__["a" /* not */])(cho.live.isLive(__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].TOWARD_OFFLINE)));
                    offlineChans = offlineChans.concat(playlistChans);
                    let chans = await this._getHostedChannels(offlineChans, liveChans);
                    chans = await Promise.all(chans.map(chan => {
                        if (chan.live.state == __WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].REBROADCAST) {
                            return this._getActivePlaylistInfo(chan).then(meta => {
                                chan.title = meta.title;
                                chan.category = meta.game;
                                chan.thumbnail = meta.thumbnail;
                                return chan;
                            }, () => chan);
                        } else {
                            return chan;
                        }
                    }));
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", chans);
                }
            }
        });
    }
    async updateChannel(channelname, ignoreHosted = false) {
        const [data, channel] = await Promise.all([getStreamTypeParam("?").then(p => this._qs.queueRequest(baseURL + '/streams/' + channelname + p, headers)), this.getChannelDetails(channelname)]);

        if (data.parsedJSON && data.parsedJSON.stream !== null && (!ignoreHosted || !data.parsedJSON.stream.is_playlist)) {
            channel.viewers = data.parsedJSON.stream.viewers;
            channel.thumbnail = data.parsedJSON.stream.preview.medium;
            if (data.parsedJSON.stream.is_playlist) {
                channel.live = new __WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */](__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].REBROADCAST);
                try {
                    const meta = await this._getActivePlaylistInfo(channel);
                    channel.title = meta.title;
                    channel.category = meta.game;
                    channel.thumbnail = meta.thumbnail;
                } catch (e) {
                    // empty
                }
            } else {
                channel.live.setLive(true);
            }
        }

        if (await channel.live.isLive(__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].TOWARD_OFFLINE)) {
            return channel;
        } else {
            if (!ignoreHosted) {
                return this._getHostedChannel(channel);
            } else {
                return channel;
            }
        }
    }
    async updateChannels(channels) {
        const logins = channels.map(c => c.login),
              channelsString = logins.join(","),
              streamTypeParam = await getStreamTypeParam(),
              liveChannels = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__pagination_helper__["a" /* promisedPaginationHelper */])({
            url: baseURL + '/streams?channel=' + channelsString + streamTypeParam + '&limit=' + itemsPerPage + '&offset=',
            pageSize: itemsPerPage,
            request: url => {
                return this._qs.queueRequest(url, headers);
            },
            fetchNextPage(data) {
                return data.parsedJSON && !data.parsedJSON.error && data.parsedJSON.streams.length == itemsPerPage;
            },
            getItems(data) {
                if (data.parsedJSON && !data.parsedJSON.error) {
                    return data.parsedJSON.streams;
                } else {
                    return [];
                }
            }
        });

        let cho,
            ret = await Promise.all(liveChannels.map(obj => {
            cho = getChannelFromJSON(obj.channel);
            cho.viewers = obj.viewers;
            cho.thumbnail = obj.preview.medium;
            if (obj.is_playlist) {
                cho.live = new __WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */](__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].REBROADCAST);
            } else {
                cho.live.setLive(true);
            }

            if (logins.includes(cho.login)) {
                cho.id = channels[logins.indexOf(cho.login)].id;
                return Promise.resolve(cho);
            } else {
                return Promise.all(channels.map(c => this._getChannelId(c))).then(ids => {
                    ids.some((id, i) => {
                        if (id === obj.channel._id) {
                            cho.id = channels[i].id;
                            return true;
                        }
                        return false;
                    });
                    return cho;
                });
            }
        }));

        const liveChans = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* filterAsync */])(ret, cho => cho.live.isLive(__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].TOWARD_OFFLINE));

        if (liveChans.length != channels.length) {
            const playlistChans = (await Promise.all(ret.map(async cho => {
                if (await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__logic__["a" /* not */])(cho.live.isLive(__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].TOWARD_OFFLINE))) {
                    try {
                        const meta = await this._getActivePlaylistInfo(cho);
                        cho.title = meta.title;
                        cho.category = meta.game;
                        cho.thumbnail = meta.thumbnail;
                    } catch (e) {/* emtpy */}
                    return cho;
                }
                return null;
            }))).filter(c => c !== null);
            let offlineChans = dedupe(channels, ret);
            offlineChans = offlineChans.concat(playlistChans);
            const offChans = await this._getHostedChannels(offlineChans, liveChans);
            ret = liveChans.concat(offChans);
        }

        return ret;
    }
    async getFeaturedChannels() {
        const data = await this._qs.queueRequest(baseURL + "/streams/featured", headers);
        if (data.parsedJSON && "featured" in data.parsedJSON && data.parsedJSON.featured.length) {
            let chans = data.parsedJSON.featured;
            if (await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__logic__["a" /* not */])(this._mature())) {
                chans = chans.filter(chan => !chan.stream.channel.mature);
            }

            return chans.map(chan => {
                const channel = getChannelFromJSON(chan.stream.channel);
                channel.viewers = chan.stream.viewers;
                channel.thumbnail = chan.stream.preview.medium;
                channel.live.setLive(true);
                return channel;
            });
        } else {
            throw "Could not get any featured channel for " + this.name;
        }
    }
    async search(query) {
        const data = await this._qs.queueRequest(baseURL + "/search/streams?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({ q: query }), headers);
        if (data.parsedJSON && "streams" in data.parsedJSON && data.parsedJSON.streams.length) {
            let chans = data.parsedJSON.streams;
            if (await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__logic__["a" /* not */])(this._mature())) {
                chans = chans.filter(chan => !chan.channel.mature);
            }

            return chans.map(chan => {
                const channel = getChannelFromJSON(chan.channel);
                channel.viewers = chan.viewers;
                channel.thumbnail = chan.preview.medium;
                channel.live.setLive(true);
                return channel;
            });
        } else {
            throw "No results for the search " + query + " on " + this.name;
        }
    }
    _getChannelId(channel) {
        // get the internal id for each channel.
        if (idOfChannel.has(channel.login)) {
            return Promise.resolve(idOfChannel.get(channel.login));
        } else {
            return this._qs.queueRequest(baseURL + "/channels/" + channel.login, headers).then(resp => {
                if (resp.parsedJSON && "_id" in resp.parsedJSON) {
                    idOfChannel.set(channel.login, resp.parsedJSON._id);
                    if (channel.login != resp.parsedJSON.name) {
                        idOfChannel.set(resp.parsedJSON.name, resp.parsedJSON._id);
                    }
                    return resp.parsedJSON._id;
                } else {
                    return null;
                }
            }, () => null);
        }
    }
    async _getHostedChannels(channels, liveChans) {
        if (await __WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].get("twitch_showHosting")) {
            let channelIds = await Promise.all(channels.map(channel => this._getChannelId(channel)));
            channelIds = channelIds.filter(id => id !== null);

            const existingChans = Array.isArray(liveChans) ? channels.concat(liveChans) : channels,
                  data = await this._qs.queueRequest("https://tmi.twitch.tv/hosts?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
                "include_logins": 1,
                host: channelIds.join(",")
            }), headers);

            if (data.parsedJSON && "hosts" in data.parsedJSON && data.parsedJSON.hosts.length) {
                // Check each hosted channel for his status
                return Promise.all(data.parsedJSON.hosts.map(async hosting => {
                    let chan = channels.find(ch => ch.login === hosting.host_login);
                    if (chan === undefined) {
                        chan = await this.updateChannel(hosting.host_login, true);
                        chan.id = await Promise.all(channels.map(c => this._getChannelId(c))).then(ids => {
                            let chid;
                            ids.some((id, i) => {
                                if (id === hosting.host_login) {
                                    chid = channels[i].id;
                                    return true;
                                }
                                return false;
                            });
                            return chid;
                        });
                    }

                    if (hosting.target_login && existingChans.every(ch => ch.login !== hosting.target_login)) {

                        // Check the hosted channel's status, since he isn't a channel we already have in our lists.
                        try {
                            const hostedChannel = await this.updateChannel(hosting.target_login, true);
                            if (await hostedChannel.live.isLive(__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].TOWARD_OFFLINE)) {
                                chan.title = hostedChannel.title;
                                chan.thumbnail = hostedChannel.thumbnail;
                                chan.viewers = hostedChannel.viewers;
                                chan.category = hostedChannel.category;
                                chan.live = new __WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */](__WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].REDIRECT);
                                chan.live.alternateUsername = hostedChannel.uname;
                                chan.live.alternateURL = hostedChannel.url[0];
                            } else {
                                chan.live.setLive(false);
                            }

                            return chan;
                        } catch (e) {
                            if (chan.live.state != __WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].REBROADCAST) {
                                chan.live.setLive(false);
                            }
                            return chan;
                        }
                    } else {
                        if (chan.live.state != __WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].REBROADCAST) {
                            chan.live.setLive(false);
                        }

                        return chan;
                    }
                }));
            }
        }
        channels.forEach(chan => {
            if (chan.live.state != __WEBPACK_IMPORTED_MODULE_3__channel_live_state__["a" /* default */].REBROADCAST) {
                chan.live.setLive(false);
            }
        });
        return channels;
    }
    _getHostedChannel(channel) {
        return this._getHostedChannels([channel]).then(chs => chs[0]);
    }
    async _getActivePlaylistInfo(channel) {
        const id = await this._getChannelId(channel),
              playlist = await this._qs.queueRequest("https://api.twitch.tv/api/playlists/channels/" + id, headers);

        if (playlist.parsedJSON && playlist.parsedJSON.enabled && playlist.parsedJSON.active && playlist.parsedJSON.playhead) {
            const playhead = playlist.parsedJSON.playhead,
                  vod = await this._qs.queueRequest(baseURL + "/videos/v" + playhead.vods[playhead.active_vod_index].id, headers);
            if (vod.parsedJSON) {
                return {
                    title: vod.parsedJSON.title,
                    game: vod.parsedJSON.game,
                    thumbnail: vod.parsedJSON.preview
                };
            } else {
                throw "VOD not found";
            }
        } else {
            throw "Not a channel with an active playlist";
        }
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new Twitch(type));

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__generic_provider__ = __webpack_require__(3);
/*
 * Created by Martin Giger
 * Licensed under MPL 2.0
 */




const type = "ustream",
      chatURL = "http://ustream.tv/socialstream/",
      baseURL = 'https://api.ustream.tv/';

function getChannelFromJSON(jsonChannel) {
    console.info("ustream:getChannelFromJSON");
    const ret = new __WEBPACK_IMPORTED_MODULE_1__channel_core__["b" /* Channel */](jsonChannel.id, type);
    ret.uname = jsonChannel.title;

    // Url stuff. It's pretty fun.
    if ("originalUrl" in jsonChannel) {
        ret.url.push(jsonChannel.originalUrl);
        ret.archiveUrl = jsonChannel.originalUrl;
    }
    if ("url" in jsonChannel) {
        ret.url.push("http://www.ustream.tv/channel/" + jsonChannel.url);
        if (!ret.archiveUrl) {
            ret.archiveUrl = "http://www.ustream.tv/channel/" + jsonChannel.url;
        }
    }
    if ("tinyurl" in jsonChannel) {
        ret.url.push(jsonChannel.tinyurl);
        if (!ret.archiveUrl) {
            ret.archiveUrl = "http://www.ustream.tv/channel/" + jsonChannel.url;
        }
    }
    ret.chatUrl = chatURL + jsonChannel.id;

    if ("picture" in jsonChannel) {
        ret.image = {};
        let size;
        Object.keys(jsonChannel.picture).forEach(s => {
            size = s.split("x")[0];
            ret.image[size] = jsonChannel.picture[s];
        });
    } else {
        ret.image = { "48": jsonChannel.owner.picture };
    }
    if ("tags" in jsonChannel && jsonChannel.tags.length > 0) {
        ret.category = jsonChannel.tags[0];
    }
    ret.live.setLive(jsonChannel.status == "live");
    if ("thumbnail" in jsonChannel) {
        ret.thumbnail = jsonChannel.thumbnail.live;
    }
    if ("stats" in jsonChannel) {
        ret.viewers = jsonChannel.status == "live" ? jsonChannel.stats.viewer : jsonChannel.stats.viewer_total;
    }
    return ret;
}

class Ustream extends __WEBPACK_IMPORTED_MODULE_2__generic_provider__["a" /* default */] {
    constructor(...args) {
        var _temp;

        return _temp = super(...args), this.authURL = ["http://ustream.tv"], _temp;
    }

    async getChannelDetails(channelname) {
        let data = await this._qs.queueRequest("http://www.ustream.tv/" + channelname),
            retried = false;

        if (!data.ok) {
            data = await this._qs.queueRequest("http://www.ustream.tv/channel/" + channelname);
            if (!data.ok) {
                throw "Error getting channel details for channel " + channelname;
            }
            retried = true;
        }

        const page = await data.text(),
              channelId = page.match(/<meta name="ustream:channel_id" content="([0-9]+)">/)[1],
              response = await this._qs.queueRequest(baseURL + "channels/" + channelId + ".json");

        if (response.parsedJSON && "channel" in response.parsedJSON) {
            const jsonChannel = response.parsedJSON.channel;

            if (!retried) {
                jsonChannel.originalUrl = "http://ustream.tv/" + channelname;
            }

            return getChannelFromJSON(jsonChannel);
        } else {
            throw "Error getting channel details for channel " + channelname;
        }
    }
    updateRequest(channels) {
        const urls = channels.map(channel => baseURL + "channels/" + channel.login + ".json");
        this._qs.queueUpdateRequest(urls, this._qs.HIGH_PRIORITY, data => {
            if (data.parsedJSON && data.parsedJSON.channel) {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", getChannelFromJSON(data.parsedJSON.channel));
            }
        });
    }
    updateChannel(channelname) {
        console.info("Ustream.updateChannel");
        return this._qs.queueRequest(baseURL + 'channels/' + channelname + ".json").then(data => {
            console.info("Ustream.updateChannel.requestCallback");
            if (data.parsedJSON && data.parsedJSON.channel) {
                return getChannelFromJSON(data.parsedJSON.channel);
            } else {
                throw "Could not update channel " + channelname + " for " + this.name;
            }
        });
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new Ustream(type));

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__querystring__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_underscore__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_underscore__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__channel_core__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pagination_helper__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__generic_provider__ = __webpack_require__(3);
/**
 * YouTube provider
 * @author Martin Giger
 * @license MPL-2.0
 * @module providers/youtube
 */








const type = "youtube",
      apiKey = __WEBPACK_IMPORTED_MODULE_1__preferences__["a" /* default */].get('youtube_apiKey'),
      baseURL = "https://www.googleapis.com/youtube/v3/",
      getLocale = () => {
    return browser.i18n.getUILanguage();
};

class YouTube extends __WEBPACK_IMPORTED_MODULE_6__generic_provider__["a" /* default */] {
    constructor(type) {
        super(type);
        /**
         * Get the name for a category. Does caching.
         *
         * @argument {string} categoryId
         * @return {string}
         * @async
         * @todo Handle locale changes -> use memoize and make lang an argument?
         * @method
         */
        this.authURL = ["https://accounts.google.com"];
        this._supportsFavorites = true;
        this._supportsFeatured = true;
        this._getCategory = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_underscore__["memoize"])(async categoryId => {
            console.info(this.name + "._getCategory(", categoryId, ")");
            const data = await this._qs.queueRequest(baseURL + "videoCategories?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
                "part": "snippet",
                "id": categoryId,
                "hl": getLocale(),
                "key": await apiKey
            }));

            if (data.parsedJSON && "items" in data.parsedJSON && data.parsedJSON.items.length) {
                return data.parsedJSON.items[0].snippet.title;
            } else {
                return '';
            }
        }, id => id + "|" + getLocale());
    }

    async _getChannelById(channelId) {
        const data = await this._qs.queueRequest(baseURL + "channels?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
            part: "snippet",
            id: channelId,
            fields: "items(snippet/title,snippet/thumbnails)",
            key: await apiKey
        }));
        if (data.parsedJSON && data.parsedJSON.items && data.parsedJSON.items.length) {
            const ch = new __WEBPACK_IMPORTED_MODULE_4__channel_core__["b" /* Channel */](channelId, this._type);
            ch.url.push("https://youtube.com/channel/" + ch.login + "/live");
            ch.url.push("https://gaming.youtube.com/channel/" + ch.login + "/live");
            ch.archiveUrl = "https://youtube.com/channel/" + ch.login + "/videos";
            ch.chatUrl = "https://youtube.com/channel/" + ch.login + "/discussion";
            ch.image = {
                "88": data.parsedJSON.items[0].snippet.thumbnails.default.url,
                "240": data.parsedJSON.items[0].snippet.thumbnails.high.url
            };
            ch.uname = data.parsedJSON.items[0].snippet.title;
            return ch;
        } else {
            throw "Getting channel details failed: " + data.status;
        }
    }

    async getUserFavorites(username) {
        const data = await this._qs.queueRequest(baseURL + "channels?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
            part: "id,snippet",
            forUsername: username,
            fields: "items(id,snippet/title,snippet/thumbnails)",
            key: await apiKey
        }));

        if (data.parsedJSON && data.parsedJSON.items && data.parsedJSON.items.length) {
            const ch = new __WEBPACK_IMPORTED_MODULE_4__channel_core__["a" /* User */](data.parsedJSON.items[0].id, this._type),
                  subsOptions = {
                part: "snippet",
                channelId: data.parsedJSON.items[0].id,
                maxResults: 50,
                key: await apiKey
            };
            let page = 0;
            ch.image = {
                "88": data.parsedJSON.items[0].snippet.thumbnails.default.url,
                "240": data.parsedJSON.items[0].snippet.thumbnails.high.url
            };
            ch.uname = data.parsedJSON.items[0].snippet.title;

            const subscriptions = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__pagination_helper__["a" /* promisedPaginationHelper */])({
                url: baseURL + "subscriptions?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify(subsOptions),
                pageSize: subsOptions.maxResults,
                initialPage: "",
                request: url => {
                    return this._qs.queueRequest(url);
                },
                getPageNumber(page, pageSize, data) {
                    return data.parsedJSON.nextPageToken;
                },
                fetchNextPage(data) {
                    return data.parsedJSON && data.parsedJSON.items && data.parsedJSON.pageInfo.totalResults > data.parsedJSON.pageInfo.resultsPerPage * ++page;
                },
                getItems(data) {
                    if (data.parsedJSON && data.parsedJSON.items) {
                        return data.parsedJSON.items;
                    } else {
                        return [];
                    }
                }
            });

            if (subscriptions.length) {
                ch.favorites = subscriptions.map(sub => sub.snippet.resourceId.channelId);

                const channels = subscriptions.map(sub => {
                    const ret = new __WEBPACK_IMPORTED_MODULE_4__channel_core__["b" /* Channel */](sub.snippet.resourceId.channelId, this._type);
                    ret.archiveUrl = "https://youtube.com/channel/" + ret.login + "/videos";
                    ret.chatUrl = "https://youtube.com/channel/" + ret.login + "/discussion";
                    ret.image = {
                        "88": sub.snippet.thumbnails.default.url,
                        "240": sub.snippet.thumbnails.high.url
                    };
                    ret.uname = sub.snippet.title;
                    return ret;
                });

                return [ch, channels];
            } else {
                /** @todo Sometimes needs oAuth for some reason, I guess privacy
                  * settings. This also triggers when the user follows noone. */
                throw "Can't get favorites for youtube user " + username + " without oAuth as somebody with reading rights of this user's subs.";
            }
        } else {
            throw "Error getting details for youtube user " + username;
        }
    }
    async getChannelDetails(username) {
        const data = await this._qs.queueRequest(baseURL + "channels?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
            part: "id,snippet",
            forUsername: username,
            fields: "items(id,snippet/title,snippet/thumbnails)",
            key: await apiKey
        }));
        if (data.parsedJSON && data.parsedJSON.items && data.parsedJSON.items.length) {
            const ch = new __WEBPACK_IMPORTED_MODULE_4__channel_core__["b" /* Channel */](data.parsedJSON.items[0].id, this._type);
            ch.url.push("https://youtube.com/channel/" + ch.login);
            ch.archiveUrl = "https://youtube.com/channel/" + ch.login + "/videos";
            ch.chatUrl = "https://youtube.com/channel/" + ch.login + "/discussion";
            ch.image = {
                "88": data.parsedJSON.items[0].snippet.thumbnails.default.url,
                "240": data.parsedJSON.items[0].snippet.thumbnails.high.url
            };
            ch.uname = data.parsedJSON.items[0].snippet.title;
            return ch;
        } else {
            // Try to get the channel by ID if we can't get it by username.
            return this._getChannelById(username);
        }
    }
    async updateFavsRequest(users) {
        const urls = await Promise.all(users.map(async user => {
            return baseURL + "channels?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
                part: "id,snippet",
                id: user.login,
                fields: "items(id,snippet/title,snippet/thumbnails)",
                key: await apiKey
            });
        }));
        this._qs.queueUpdateRequest(urls, this._qs.LOW_PRIORITY, async data => {
            if (data.parsedJSON && data.parsedJSON.items && data.parsedJSON.items.length) {
                const ch = new __WEBPACK_IMPORTED_MODULE_4__channel_core__["a" /* User */](data.parsedJSON.items[0].id, this._type),
                      subsOptions = {
                    part: "snippet",
                    channelId: data.parsedJSON.items[0].id,
                    maxResults: 50,
                    key: await apiKey
                };
                let page = 0;
                ch.image = {
                    "88": data.parsedJSON.items[0].snippet.thumbnails.default.url,
                    "240": data.parsedJSON.items[0].snippet.thumbnails.high.url
                };
                ch.uname = data.parsedJSON.items[0].snippet.title;
                const subscriptions = await __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__pagination_helper__["a" /* promisedPaginationHelper */])({
                    url: baseURL + "subscriptions?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify(subsOptions),
                    pageSize: subsOptions.maxResults,
                    initialPage: "",
                    request: url => {
                        return this._qs.queueRequest(url);
                    },
                    getPageNumber(page, pageSize, data) {
                        return data.parsedJSON.nextPageToken;
                    },
                    fetchNextPage(data) {
                        return data.parsedJSON && data.parsedJSON.items && data.parsedJSON.pageInfo.totalResults > data.parsedJSON.pageInfo.resultsPerPage * ++page;
                    },
                    getItems(data) {
                        if (data.parsedJSON && data.parsedJSON.items) {
                            return data.parsedJSON.items;
                        } else {
                            return [];
                        }
                    }
                });
                if (subscriptions.length) {
                    const oldUser = users.find(usr => usr.login === ch.login);
                    ch.id = oldUser.id;
                    ch.favorites = subscriptions.map(sub => sub.snippet.resourceId.channelId);
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updateduser", ch);
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "newchannels", subscriptions.filter(follow => {
                        return !oldUser.favorites.some(fav => fav === follow.snippet.resourceId.channelId);
                    }).map(sub => {
                        const ret = new __WEBPACK_IMPORTED_MODULE_4__channel_core__["b" /* Channel */](sub.snippet.resourceId.channelId, this._type);
                        ret.archiveUrl = "https://youtube.com/channel/" + ch.login + "/videos";
                        ret.chatUrl = "https://youtube.com/channel/" + ch.login + "/discussion";
                        ret.image = {
                            "88": sub.snippet.thumbnails.default.url,
                            "240": sub.snippet.thumbnails.high.url
                        };
                        ret.uname = sub.snippet.title;
                        return ret;
                    }));

                    oldUser.favorites = ch.favorites;
                } else {
                    /** @todo Sometimes needs oAuth for some reason, I guess privacy settings. */
                    console.warn("Can't get favorites for youtube user " + ch.uname + " without oAuth as somebody with reading rights of this user's subs.");
                }
            }
        });
    }
    async updateRequest(channels) {
        let offlineCount = 0;
        const ids = [],
              urls = await Promise.all(channels.map(async channel => {
            return baseURL + "search?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
                part: "id",
                channelId: channel.login,
                fields: "items(id/videoId)",
                maxResults: 1,
                eventType: "live",
                type: "video",
                key: await apiKey
            });
        })),
              getLiveStreams = async ids => {
            const videos = await this._qs.queueRequest(baseURL + "videos?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
                part: "id, snippet, liveStreamingDetails",
                id: ids,
                fields: "items(id,snippet(channelId,title,thumbnails/medium/url,categoryId),liveStreamingDetails/concurrentViewers)",
                key: await apiKey,
                hl: getLocale()
            }));
            if (videos.parsedJSON && videos.parsedJSON.items) {
                return Promise.all(videos.parsedJSON.items.map(video => {
                    return this._getCategory(video.snippet.categoryId).then(category => {
                        const channel = channels.find(channel => channel.login == video.snippet.channelId);
                        channel.live.setLive(true);
                        channel.url = ["https://youtube.com/watch?v=" + video.id, "https://gaming.youtube.com/watch?v=" + video.id, "https://youtube.com/channel/" + channel.login + "/live", "https://gaming.youtube.com/channel/" + channel.login + "/live"];
                        channel.title = video.snippet.title;
                        channel.thumbnail = video.snippet.thumbnails.medium.url;
                        channel.viewers = video.liveStreamingDetails.concurrentViewers;
                        channel.category = category;
                        return channel;
                    });
                }));
            } else {
                throw "Could not find the given stream";
            }
        },
              done = id => {
            if (id) {
                ids.push(id);
            } else {
                offlineCount++;
            }
            if (ids.length + offlineCount == channels.length) {
                getLiveStreams(ids.join(",")).then(chans => {
                    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", chans);
                });
                ids.length = 0;
                offlineCount = 0;
            }
        };

        //TODO there should be a way to do this with a generator.

        this._qs.queueUpdateRequest(urls, this._qs.HIGH_PRIORITY, (data, url) => {
            const channelLogin = url.match(/channelId=([\w-]+)?&/)[1],
                  channel = channels.find(channel => channelLogin == channel.login);
            if (data.parsedJSON && data.parsedJSON.items && data.parsedJSON.items.length) {
                done(data.parsedJSON.items[0].id.videoId);
            } else {
                channel.live.setLive(false);
                channel.url = ["https://youtube.com/channel/" + channel.login];
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "updatedchannels", channel);
                done();
            }
        });
    }
    async updateChannel(channellogin) {
        const [ch, response] = await Promise.all([this._getChannelById(channellogin), apiKey.then(key => this._qs.queueRequest(baseURL + "search?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
            part: "id",
            channelId: channellogin,
            fields: "items(id/videoId)",
            maxResults: 1,
            eventType: "live",
            type: "video",
            key
        })))]);

        if (response.parsedJSON && response.parsedJSON.items) {
            if (response.parsedJSON.items.length) {
                ch.live.setLive(true);
                ch.url.push("https://youtube.com/watch?v=" + response.parsedJSON.items[0].id.videoId);
                ch.url.push("https://gaming.youtube.com/watch?v=" + response.parsedJSON.items[0].id.videoId);

                const video = await this._qs.queueRequest(baseURL + "videos?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
                    part: "snippet, liveStreamingDetails",
                    id: response.parsedJSON.items[0].id.videoId,
                    fields: "items(snippet(categoryId,title,thumbnails/medium/url),liveStreamingDetails/concurrentViewers)",
                    key: await apiKey,
                    hl: getLocale()
                }));
                if (video.parsedJSON && video.parsedJSON.items) {
                    ch.title = video.parsedJSON.items[0].snippet.title;
                    ch.thumbnail = video.parsedJSON.items[0].snippet.thumbnails.medium.url;
                    ch.viewers = video.parsedJSON.items[0].liveStreamingDetails.concurrentViewers;
                    ch.category = await this._getCategory(video.parsedJSON.items[0].snippet.categoryId);
                }
            } else {
                ch.live.setLive(false);
                ch.url.push("https://youtube.com/channel/" + ch.login);
            }

            return ch;
        }
    }
    async updateChannels(channels) {
        let streamIds = await Promise.all(channels.map(async channel => {
            const response = await this._qs.queueRequest(baseURL + "search?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
                part: "id",
                channelId: channel.login,
                fields: "items(id/videoId)",
                maxResults: 1,
                eventType: "live",
                type: "video",
                key: await apiKey
            }));
            if (!response.parsedJSON || !response.parsedJSON.items || !response.parsedJSON.items.length) {
                channel.live.setLive(false);
                channel.url = ["https://youtube.com/channel/" + channel.login];
                return null;
            }
            return response.parsedJSON.items[0].id.videoId;
        }));

        streamIds = streamIds.filter(id => id !== null);

        const videos = await this._qs.queueRequest(baseURL + "videos?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
            part: "id, snippet, liveStreamingDetails",
            id: streamIds.join(","),
            fields: "items(id,snippet(channelId,title,thumbnails/medium/url,categoryId),liveStreamingDetails/concurrentViewers)",
            key: await apiKey,
            hl: getLocale()
        }));

        if (videos.parsedJSON && videos.parsedJSON.items) {
            await Promise.all(videos.parsedJSON.items.map(video => {
                return this._getCategory(video.snippet.categoryId).then(category => {
                    const channel = channels.find(channel => channel.login == video.snippet.channelId);
                    channel.live.setLive(true);
                    channel.url = ["https://youtube.com/watch?v=" + video.id, "https://gaming.youtube.com/watch?v=" + video.id, "https://youtube.com/channel/" + channel.login + "/live", "https://gaming.youtube.com/channel/" + channel.login + "/live"];
                    channel.title = video.snippet.title;
                    channel.thumbnail = video.snippet.thumbnails.medium.url;
                    channel.viewers = video.liveStreamingDetails.concurrentViewers;
                    channel.category = category;
                    return channel;
                });
            }));
        }

        return channels;
    }
    async search(query) {
        const response = await this._qs.queueRequest(baseURL + "search?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
            part: "id",
            fields: "items(id/videoId)",
            eventType: "live",
            type: "video",
            order: "relevance",
            relevanceLanguage: browser.i18n.getUILanguage().substr(0, 2),
            safeSearch: await this._mature() ? "moderate" : "strict",
            q: query,
            key: await apiKey
        }));

        let streamIds;
        if (response.parsedJSON && response.parsedJSON.items && response.parsedJSON.items.length) {
            streamIds = response.parsedJSON.items.map(entry => entry.id.videoId);
        } else {
            throw "No search results found for " + this.name + " with " + query;
        }

        const videos = await this._qs.queueRequest(baseURL + "videos?" + __WEBPACK_IMPORTED_MODULE_2__querystring__["a" /* default */].stringify({
            part: "id,snippet,liveStreamingDetails",
            id: streamIds.join(","),
            fields: "items(id,snippet(channelId,title,thumbnails/medium/url,categoryId),liveStreamingDetails/concurrentViewers)",
            key: await apiKey,
            hl: getLocale()
        }));

        if (videos.parsedJSON && videos.parsedJSON.items) {
            return Promise.all(videos.parsedJSON.items.map(async video => {
                const channel = await this._getChannelById(video.snippet.channelId);
                channel.live.setLive(true);
                channel.url = ["https://youtube.com/watch?v=" + video.id, "https://gaming.youtube.com/watch?v=" + video.id];
                channel.title = video.snippet.title;
                channel.thumbnail = video.snippet.thumbnails.medium.url;
                if ("liveStreamingDetails" in video) {
                    channel.viewers = video.liveStreamingDetails.concurrentViewers;
                }
                channel.category = await this._getCategory(video.snippet.categoryId);

                return channel;
            }));
        }

        throw "None of the searchresults exist for " + this.name;
    }
}

/* harmony default export */ __webpack_exports__["a"] = Object.freeze(new YouTube(type));

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_event_target_shim__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_event_target_shim___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_event_target_shim__);
/**
 * Queue infrastructure for updating info
 * @author Martin Giger
 * @license MPL-2.0
 * @module queue
 */


/**
 * @typedef {Object} external:sdk/request.RequestOptions
 * @see {@link https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/request#Request%28options%29}
 */

/**
 * @typedef {external:sdk/request.RequestOptions} RequestInfo
 * @property {number} id
 */
/**
 * @class module:queue.RequestQueue
 * @extends external:EventTarget
 */
class RequestQueue extends __WEBPACK_IMPORTED_MODULE_0_event_target_shim___default.a {
    /**
     * RequestQueue Object.
     *
     * @constructs
     */

    /**
     * Last ID assigned to a request.
     *
     * @type {number}
     * @default -1
     * @protected
     */
    constructor() {
        super();
        /**
         * @type {array.<module:queue~RequestInfo>}
         * @protected
         */
        this._alarmName = "main-queue";
        this.lastID = -1;
        this.interval = 0;
        this.amount = 0.5;
        this.maxSize = 10;
        this.queue = [];

        browser.alarms.onAlarm.addListener(alarm => {
            if (alarm.name == this._alarmName) {
                const size = Math.max(1, Math.min(this.queue.length * this.amount, this.maxSize));
                this.getRequestBatch(size);
            }
        });
    }
    /**
     * Add a request to the queue.
     *
     * @param {external:sdk/request.RequestOptions} requestOptions - Options for
     *                                                              the request.
     * @returns {number} ID of the added request.
     */

    /**
     * Time interval between fetched requests.
     *
     * @type {number}
     * @default 0
     * @readonly
     */

    /**
     * ID of the queue interval.
     *
     * @type {number?}
     * @private
     */
    addRequest(requestOptions) {
        this.queue.push(Object.assign({ id: ++this.lastID, method: "GET" }, requestOptions));
        return this.lastID;
    }
    /**
     * Fetch the request with the given index in the queue.
     *
     * @param {number} index - Index of the request to fetch.
     * @returns {undefined}
     */
    getRequest(index) {
        const spec = this.queue.splice(index, 1)[0];
        fetch(spec.url, {
            headers: spec.headers,
            redirect: "follow"
        }).then(response => {
            const jsonClone = response.clone();
            return jsonClone.json().then(json => {
                response.parsedJSON = json;
                spec.onComplete(response);
            }, () => {
                spec.onComplete(response);
            });
        }, error => {
            console.error(error);
            if (spec.onError) {
                spec.onError(error);
            } else {
                throw error;
            }
        });
        return spec;
    }
    /**
     * Fetch the request with the given ID.
     *
     * @param {number|string} query - ID or URL of the request to fetch.
     * @returns {undefined}
     */
    getRequestById(query) {
        return this.getRequest(this.getRequestIndex(query));
    }
    /**
     * Fetch multiple requests from the top of the queue.
     *
     * @param {number} [batchSize=this.queue.length] - Number of requests to get.
     * @returns {undefined}
     */
    getRequestBatch(batchSize = this.queue.length) {
        if (batchSize > this.queue.length) {
            batchSize = this.queue.length;
        }

        for (let i = 0; i < batchSize; i++) {
            this.getRequest(0);
        }
    }
    /**
     * Set up an interval to fetch a certain amount of requests periodically.
     * Can also be used to change the interval.
     *
     * @param {number} interval - Interval in milliseconds.
     * @param {number} amount - A percentage of requests to get per batch.
     * @param {number} maxSize - The max number of requests to get per batch.
     * @returns {undefined}
     */
    async autoFetch(interval, amount, maxSize) {
        this.interval = interval;
        this.amount = amount;
        this.maxSize = maxSize;
        if (this.workingOnQueue()) {
            await browser.alarms.clear(this._alarmName);
        }
        if (interval > 0) {
            browser.alarms.create(this._alarmName, {
                periodInMinutes: interval / 60000
            });
        }
    }
    /**
     * Remove all requests and ongoing intervals.
     *
     * @returns {undefined}
     */
    clear() {
        if (this.workingOnQueue()) {
            browser.alarms.clear(this._alarmName);
        }
        this.interval = 0;
        if (this.queue.length > 0) {
            this.queue.length = 0;
        }
    }
    /**
     * Check if a request is still in the queue.
     *
     * @param {number|string} query - ID or URL of the request.
     * @returns {boolean} Wether the request is still queued.
     */
    requestQueued(query) {
        return this.getRequestIndex(query) > -1;
    }
    /**
     * Get the index of a request.
     *
     * @param {number|string} query - ID or URL of the request.
     * @returns {number} Index of the request. -1 if the request couldn't be
     * found.
     */
    getRequestIndex(query) {
        if (typeof query === 'string') {
            return this.queue.findIndex(req => req.url === query);
        } else if (typeof query === 'number') {
            return this.queue.findIndex(req => req.id === query);
        }
        return -1;
    }
    /**
     * Check if the queue is currently peridoically fetching requests.
     *
     * @returns {boolean} Whether there is an interval set up.
     */
    workingOnQueue() {
        return this.interval !== 0;
    }
    /**
     * Remove a request from the queue.
     *
     * @param {number|string} query - ID or URL of the request.
     * @returns {boolean} Whether or not the request has been removed.
     */
    removeRequest(query) {
        if (this.requestQueued(query)) {
            console.log("[Queue]> removing request");
            this.queue.splice(this.getRequestIndex(query), 1);
            return true;
        }
        return false;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = RequestQueue;


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(0);
/* eslint-disable jsdoc/require-param */
/**
 * @author Martin Giger
 * @license MPL-2.0
 * @module queue/pauseable
 * @requires module:queue
 */



/**
 * @typedef {Object} QueueOptions
 * @property {number} interval - Interval to fetch batches in.
 * @property {number} amount - Percentage of the queue to fetch per batch.
 * @property {number} maxSize - Maximum number of requests per batch.
 */

/**
 * @event module:queue/pauseable.PauseableQueue#pause
 */
/**
 * @event module:queue/pauseable.PauseableQueue#resume
 */

/**
 * @class
 * @extends module:queue.RequestQueue
 */
class PauseableQueue extends __WEBPACK_IMPORTED_MODULE_0__index__["a" /* default */] {
  /**
   * Pauseable queue, pauses based on the network status.
   *
   * @constructs
   * @extends module:queue.RequestQueue
   */
  constructor() {
    super();

    /**
     * @type {module:queue/pauseable~QueueOptions?}
     * @private
     */
    this._configured = false;
    this._queueState = {};

    window.addEventListener("offline", () => this.pause(), { passive: true });
    window.addEventListener("online", () => this.resume(), { passive: true });
  }
  /**
   * @type {boolean}
   * @default false
   * @readonly
   */

  /**
   * @type {boolean}
   * @default false
   */
  get paused() {
    return this.interval === 0;
  }
  /**
   * @override
   */
  autoFetch(interval, amount = this._queueState.amount, maxSize = this._queueState.maxSize) {
    if (interval > 0) {
      this._queueState = {
        interval,
        amount,
        maxSize
      };
      this._configured = true;
    }
    if (navigator.onLine || interval === 0) {
      super.autoFetch(interval, amount, maxSize);
    } else {
      this.pause();
    }
  }
  /**
   * Temporarily halt execution of the queue.
   *
   * @fires module:queue/pauseable.PauseableQueue#pause
   * @returns {undefined}
   */
  pause() {
    if (this._configured && this.interval !== 0) {
      this.autoFetch(0);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["a" /* emit */])(this, "pause");
    }
  }
  /**
   * Resume the queue.
   *
   * @fires module:queue/pauseable.PauseableQueue#resume
   * @returns {undefined}
   */
  resume() {
    if (this._configured) {
      this.autoFetch(this._queueState.interval);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["a" /* emit */])(this, "resume");
    }
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = PauseableQueue;


/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__pauseable__ = __webpack_require__(48);
/**
 * Queue with priorized, persistant and less often fetched requests.
 *
 * @author Martin Giger
 * @license MPL-2.0
 * @module queue/update
 * @requires module:queue/pauseable
 */



/**
 * Fired when there is a new priorized item added to the queue.
 *
 * @event module:queue/update.UpdateQueue#queuepriorized
 */
/**
 * Fired when all priorized items in the queue were fetched.
 *
 * @event module:queue/update.UpdateQueue#allpriorizedloaded
 */

/**
 * @class module:queue/update.UpdateQueue
 * @extends module:queue/pauseable.PauseableQueue
 */
class UpdateQueue extends __WEBPACK_IMPORTED_MODULE_1__pauseable__["a" /* default */] {
    /**
     * A queue with priorized, persistent and less often fetched requests.
     *
     * @constructs
     */
    constructor() {
        super();
    }
    /**
     * Add a request to the queue.
     *
     * @param {external:sdk/request.RequestOptions} requestArgs - Requst Arguments.
     * @param {boolean} [persistent=false] - If the request should be readded
     *                                         to the queue whenever it was
     *                                         fetched.
     * @param {boolean} [priorized=false] - If the request should be priorized
     *                                        over other requests in the queue.
     *                                        Can not be true when the request
     *                                        is persistent and not skipping.
     * @param {number} [skip=0] - Number of times to skip this request before
     *                            fetching it.
     * @returns {number} Request id.
     * @fires module:queue/update.UpdateQueue#queuepriorized
     */
    addRequest(requestArgs, persistent = false, priorized = false, skip = 0) {
        // only allow priorized if its either not a persistent request or it skips
        // skipping requests are only priorized for the first time the are actually sent
        // however they will the first time not skip.
        priorized = priorized && (!persistent || skip > 0);

        if (!this.containsPriorized() && priorized) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "queuepriorized");
        }
        return super.addRequest(Object.assign({
            persist: persistent,
            priorize: priorized,
            skip,
            skipped: 0
        }, requestArgs));
    }
    /**
     * Fetch multiple requests from the top of the queue.
     *
     * @param {number} index - Index of the request to fetch.
     * @fires module:queue/update.UpdateQueue#allpriorizedloaded
     * @returns {undefined}
     */
    getRequest(index) {
        if (this.getFirstPriorized()) {
            if (!this.containsPriorized()) {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "allpriorizedloaded");
            }
        } else {
            this.getRequestByIndex(index);
        }
    }
    /**
     * Fetch the first priorized request in the queue.
     *
     * @returns {boolean} If a priorized request was fetched.
     */
    getFirstPriorized() {
        return this.queue.some((req, i) => {
            if (req.priorize) {
                this.getRequestByIndex(i);
                return true;
            }
            return false;
        });
    }
    /**
     * Fetch the request at the given index.
     *
     * @param {number} index - Index in the queue of the request.
     * @returns {undefined}
     */
    getRequestByIndex(index) {
        console.info(this.queue.length + " jobs left in the queue.");
        if (this.queue[index].skip > this.queue[index].skipped && !this.queue[index].priorize) {
            console.log("[Queue]> Skipping " + this.queue[index].url);
            this.queue[index].skipped++;

            this.queue.push(this.queue.splice(index, 1)[0]);
        } else {
            console.log("[Queue]> Getting " + this.queue[index].url);

            const req = super.getRequest(index);
            if (req.persist) {

                // explication of the skipping logic in the addRequest method
                if (req.skip > 0) {
                    req.skipped = 0;
                    if (req.priorize) {
                        req.priorize = false;
                    }
                }

                this.queue.push(req);
            }
        }
    }
    /**
     * Check if the queue has a priorized request waiting.
     *
     * @returns {boolean} Whether there is a priorized request in the queue.
     */
    containsPriorized() {
        return this.queue.some(item => item.priorize);
    }
    /**
     * Fetch all priorized requests.
     *
     * @fires module:queue/update.UpdateQueue#allpriorizedloaded
     * @returns {undefined}
     */
    getAllPriorized() {
        this.queue.filter(req => req.priorize).forEach(() => {
            this.getFirstPriorized();
        });
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* emit */])(this, "allpriorizedloaded");
    }
    /**
     * @override
     */
    resume() {
        super.resume();
        if (this.containsPriorized()) {
            this.getAllPriorized();
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = UpdateQueue;


/***/ }),
/* 50 */
/***/ (function(module, exports) {

(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @author Toru Nagashima
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */


//-----------------------------------------------------------------------------
// Requirements
//-----------------------------------------------------------------------------

var Commons = __webpack_require__(18)
var LISTENERS = Commons.LISTENERS
var ATTRIBUTE = Commons.ATTRIBUTE
var newNode = Commons.newNode

//-----------------------------------------------------------------------------
// Helpers
//-----------------------------------------------------------------------------

/**
 * Gets a specified attribute listener from a given EventTarget object.
 *
 * @param {EventTarget} eventTarget - An EventTarget object to get.
 * @param {string} type - An event type to get.
 * @returns {function|null} The found attribute listener.
 */
function getAttributeListener(eventTarget, type) {
    var node = eventTarget[LISTENERS][type]
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            return node.listener
        }
        node = node.next
    }
    return null
}

/**
 * Sets a specified attribute listener to a given EventTarget object.
 *
 * @param {EventTarget} eventTarget - An EventTarget object to set.
 * @param {string} type - An event type to set.
 * @param {function|null} listener - A listener to be set.
 * @returns {void}
 */
function setAttributeListener(eventTarget, type, listener) {
    if (typeof listener !== "function" && typeof listener !== "object") {
        listener = null // eslint-disable-line no-param-reassign
    }

    var prev = null
    var node = eventTarget[LISTENERS][type]
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            // Remove old value.
            if (prev == null) {
                eventTarget[LISTENERS][type] = node.next
            }
            else {
                prev.next = node.next
            }
        }
        else {
            prev = node
        }

        node = node.next
    }

    // Add new value.
    if (listener != null) {
        if (prev == null) {
            eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE)
        }
        else {
            prev.next = newNode(listener, ATTRIBUTE)
        }
    }
}

//-----------------------------------------------------------------------------
// Public Interface
//-----------------------------------------------------------------------------

/**
 * Defines an `EventTarget` implementation which has `onfoobar` attributes.
 *
 * @param {EventTarget} EventTargetBase - A base implementation of EventTarget.
 * @param {string[]} types - A list of event types which are defined as attribute listeners.
 * @returns {EventTarget} The defined `EventTarget` implementation which has attribute listeners.
 */
module.exports.defineCustomEventTarget = function(EventTargetBase, types) {
    /**
     * The constructor of custom event target.
     * @constructor
     */
    function EventTarget() {
        EventTargetBase.call(this)
    }

    var descripter = {
        constructor: {
            value: EventTarget,
            configurable: true,
            writable: true,
        },
    }

    types.forEach(function(type) {
        descripter["on" + type] = {
            get: function() {
                return getAttributeListener(this, type)
            },
            set: function(listener) {
                setAttributeListener(this, type, listener)
            },
            configurable: true,
            enumerable: true,
        }
    })

    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter)

    return EventTarget
}


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @author Toru Nagashima
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */


//-----------------------------------------------------------------------------
// Requirements
//-----------------------------------------------------------------------------

var createUniqueKey = __webpack_require__(18).createUniqueKey

//-----------------------------------------------------------------------------
// Constsnts
//-----------------------------------------------------------------------------

/**
 * The key of the flag which is turned on by `stopImmediatePropagation` method.
 *
 * @type {symbol|string}
 * @private
 */
var STOP_IMMEDIATE_PROPAGATION_FLAG =
    createUniqueKey("stop_immediate_propagation_flag")

/**
 * The key of the flag which is turned on by `preventDefault` method.
 *
 * @type {symbol|string}
 * @private
 */
var CANCELED_FLAG = createUniqueKey("canceled_flag")

/**
 * The key of the flag that it cannot use `preventDefault` method.
 *
 * @type {symbol|string}
 * @private
 */
var PASSIVE_LISTENER_FLAG = createUniqueKey("passive_listener_flag")

/**
 * The key of the original event object.
 *
 * @type {symbol|string}
 * @private
 */
var ORIGINAL_EVENT = createUniqueKey("original_event")

/**
 * Method definitions for the event wrapper.
 *
 * @type {object}
 * @private
 */
var wrapperPrototypeDefinition = Object.freeze({
    stopPropagation: Object.freeze({
        value: function stopPropagation() {
            var e = this[ORIGINAL_EVENT]
            if (typeof e.stopPropagation === "function") {
                e.stopPropagation()
            }
        },
        writable: true,
        configurable: true,
    }),

    stopImmediatePropagation: Object.freeze({
        value: function stopImmediatePropagation() {
            this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true

            var e = this[ORIGINAL_EVENT]
            if (typeof e.stopImmediatePropagation === "function") {
                e.stopImmediatePropagation()
            }
        },
        writable: true,
        configurable: true,
    }),

    preventDefault: Object.freeze({
        value: function preventDefault() {
            if (this[PASSIVE_LISTENER_FLAG]) {
                return
            }
            if (this.cancelable === true) {
                this[CANCELED_FLAG] = true
            }

            var e = this[ORIGINAL_EVENT]
            if (typeof e.preventDefault === "function") {
                e.preventDefault()
            }
        },
        writable: true,
        configurable: true,
    }),

    defaultPrevented: Object.freeze({
        get: function defaultPrevented() {
            return this[CANCELED_FLAG]
        },
        enumerable: true,
        configurable: true,
    }),
})

//-----------------------------------------------------------------------------
// Public Interface
//-----------------------------------------------------------------------------

module.exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG
module.exports.PASSIVE_LISTENER_FLAG = PASSIVE_LISTENER_FLAG

/**
 * Creates an event wrapper.
 *
 * We cannot modify several properties of `Event` object, so we need to create the wrapper.
 * Plus, this wrapper supports non `Event` objects.
 *
 * @param {Event|{type: string}} event - An original event to create the wrapper.
 * @param {EventTarget} eventTarget - The event target of the event.
 * @returns {Event} The created wrapper. This object is implemented `Event` interface.
 * @private
 */
module.exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
    var timeStamp = (
        typeof event.timeStamp === "number" ? event.timeStamp : Date.now()
    )
    var propertyDefinition = {
        type: {value: event.type, enumerable: true},
        target: {value: eventTarget, enumerable: true},
        currentTarget: {value: eventTarget, enumerable: true},
        eventPhase: {value: 2, enumerable: true},
        bubbles: {value: Boolean(event.bubbles), enumerable: true},
        cancelable: {value: Boolean(event.cancelable), enumerable: true},
        timeStamp: {value: timeStamp, enumerable: true},
        isTrusted: {value: false, enumerable: true},
    }
    propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = {value: false, writable: true}
    propertyDefinition[CANCELED_FLAG] = {value: false, writable: true}
    propertyDefinition[PASSIVE_LISTENER_FLAG] = {value: false, writable: true}
    propertyDefinition[ORIGINAL_EVENT] = {value: event}

    // For CustomEvent.
    if (typeof event.detail !== "undefined") {
        propertyDefinition.detail = {value: event.detail, enumerable: true}
    }

    return Object.create(
        Object.create(event, wrapperPrototypeDefinition),
        propertyDefinition
    )
}


/***/ }),
/* 53 */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

(function(){
  var crypt = __webpack_require__(50),
      utf8 = __webpack_require__(22).utf8,
      isBuffer = __webpack_require__(53),
      bin = __webpack_require__(22).bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();
    // else, assume byte array already

    var m = crypt.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  module.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

})();


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sdk__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__channel_utils__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__channel_controller__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__preferences__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__channel_live_state__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__list__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__providers_serialized__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__queue_service__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__notifier__ = __webpack_require__(26);










const S_TO_MS_FACTOR = 1000,


// Init things
notifier = new __WEBPACK_IMPORTED_MODULE_8__notifier__["a" /* default */](),
      controller = new __WEBPACK_IMPORTED_MODULE_2__channel_controller__["a" /* default */](),
      list = new __WEBPACK_IMPORTED_MODULE_5__list__["a" /* default */]();

list.addEventListener("ready", () => {
    controller.getChannelsByType().then(channels => list.addChannels(channels));

    list.setProviders(__WEBPACK_IMPORTED_MODULE_6__providers_serialized__["a" /* default */]);

    __WEBPACK_IMPORTED_MODULE_3__preferences__["a" /* default */].get(["updateInterval", "panel_style", "panel_extras", "theme"]).then(([updateInterval, style, extras, theme]) => {
        list.setQueueStatus(parseInt(updateInterval, 10) !== 0);
        list.setStyle(parseInt(style, 10));
        list.setExtrasVisibility(extras);
        list.setTheme(parseInt(theme, 10));
    });
});

list.addEventListener("opencm", () => controller.showManager());
list.addEventListener("addchannel", ({ detail: [login, type] }) => {
    controller.addChannel(login, type);
});
list.addEventListener("refresh", ({ detail: channelId }) => {
    if (channelId) {
        controller.updateChannel(channelId);
    } else {
        controller.updateChannels();
    }
});
list.addEventListener("open", ({ detail: [channelId, what] }) => {
    let p;
    if (typeof channelId === "string") {
        p = Promise.resolve({
            url: [channelId],
            live: new __WEBPACK_IMPORTED_MODULE_4__channel_live_state__["a" /* default */](__WEBPACK_IMPORTED_MODULE_4__channel_live_state__["a" /* default */].LIVE)
        });
    } else {
        p = controller.getChannel(channelId);
    }

    p.then(channel => __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__channel_utils__["a" /* selectOrOpenTab */])(channel, what));
});
list.addEventListener("pause", () => __WEBPACK_IMPORTED_MODULE_7__queue_service__["a" /* pause */]());
list.addEventListener("resume", () => __WEBPACK_IMPORTED_MODULE_7__queue_service__["b" /* resume */]());
list.addEventListener("copy", ({ detail: [channel, type] }) => {
    controller.copyChannelURL(channel, type).then(channel => {
        notifier.notifyCopied(channel.uname);
    });
});

// Wire things up

notifier.addEventListener("click", async ({ detail: channelId }) => {
    const channel = await controller.getChannel(channelId);
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__channel_utils__["a" /* selectOrOpenTab */])(channel);
});

controller.addEventListener("channelupdated", ({ detail: channel }) => {
    notifier.sendNotification(channel);
    list.onChannelChanged(channel);
});

controller.addEventListener("channelsadded", ({ detail: channels }) => {
    list.addChannels(channels);
    channels.forEach(channel => notifier.sendNotification(channel));
});

controller.addEventListener("channeldeleted", ({ detail: channelId }) => {
    notifier.onChannelRemoved(channelId);
    list.removeChannel(channelId);
});

controller.addEventListener("beforechanneldeleted", () => __WEBPACK_IMPORTED_MODULE_7__queue_service__["a" /* pause */]());
//TODO do counting instead of relying on randomness being in our favor ;)
controller.addEventListener("afterchanneldeleted", () => __WEBPACK_IMPORTED_MODULE_7__queue_service__["b" /* resume */]());

__WEBPACK_IMPORTED_MODULE_3__preferences__["a" /* default */].get(["theme", "panel_nonlive", "updateInterval", "queue_ratio", "queue_maxRequestBatchSize"]).then(([theme, nonlive, interval, ratio, batchSize]) => {
    controller.setTheme(parseInt(theme, 10));
    list.setNonLiveDisplay(nonlive);
    __WEBPACK_IMPORTED_MODULE_7__queue_service__["c" /* setOptions */]({
        interval: S_TO_MS_FACTOR * interval,
        amount: 1 / ratio,
        maxSize: batchSize
    });
});

__WEBPACK_IMPORTED_MODULE_7__queue_service__["d" /* addListeners */]({
    paused: () => list.setQueuePaused(true),
    resumed: () => list.setQueuePaused(false)
});

__WEBPACK_IMPORTED_MODULE_3__preferences__["a" /* default */].addEventListener("change", ({ detail: { pref, value } }) => {
    if (pref == "manageChannels") {
        controller.showManager();
    } else if (pref == "theme") {
        const theme = parseInt(value, 10);
        controller.setTheme(theme);
        list.setTheme(theme);
    } else if (pref == "panel_nonlive") {
        list.setNonLiveDisplay(parseInt(value, 10));
    } else if (pref == "panel_extras") {
        list.setExtrasVisibility(value);
    } else if (pref == "panel_style") {
        list.setStyle(parseInt(value, 10));
    } else if (pref == "updateInterval") {
        const interval = parseInt(value, 10);
        __WEBPACK_IMPORTED_MODULE_7__queue_service__["e" /* updateOptions */](S_TO_MS_FACTOR * interval);
        list.setQueueStatus(interval !== 0);
    }
});

// Do migration of channel data if necessary
browser.storage.local.get("migrated").then(value => {
    if (!value.migrated) {
        __WEBPACK_IMPORTED_MODULE_0__sdk__["a" /* default */].doAction("migrate-channels").then(([channels, users]) => {
            return Promise.all(users.map(user => controller.addUser(user.login, user.type))).then(() => Promise.all(channels.map(channel => controller.addChannel(channel.login, channel.type))));
        }).then(() => {
            return browser.storage.local.set({
                migrated: true
            });
        });
    }
});

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,